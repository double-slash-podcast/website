{
  "results": {
    "channels": [
      {
        "alternatives": [
          {
            "transcript": "Bienvenue sur double flash le pote dédié aux outils et aux techniques pour le développement web. Bonjour et bienvenue sur ce nouvel épisode un épisode où on va parler de Javascript mais surtout de type script avec Patrick salut patrick salut à tous aujourd'hui on voit beaucoup de personnes qui passent sur sur type crypte il y a même des un sc au sein de la communauté il y un y a qui sont pour il y en a qui sont contre à ce que je te propose c'est c'est d'en discuter et de regarder un petit peu les avantages et les inconvénients pour qui pourquoi et tout ça à la est-ce qu'on peut déjà commencer juste en mode c'est quoi c'est quoi en fait alors taille en gros ça a été créé par microsoft en fait en interne la date à peu près c'est entre 2010 et 2012 donc c'est le concepteur du framework point net top net quoi qui qui est utilisé chez Microsoft qui est proposé par microsoft qui a créé cette version de langage en fait qui est un dérivé en fait en quelque sorte de javascript et ils ont rajouté en fait des choses par dessus qui manquaient d'après eux en fait à javascript devenir un langage à part entière en fait pour des gros projets etc il faut savoir qu'en fait javascript obligatoire en utilisation pour les navigateurs on peut pas c'est obligatoire que c'est l'unique langage lu par les navigateurs qui ne peux pas utiliser navigateur ou d'autres langages ou php ce que tu veux donc c'est vraiment un passage obligatoire donc l'idée c'était de de faire un langage qui serait trans en fait javascript voilà et par dessus ça en fait ils ont rajouté plein de manques qu'ils en fait à javascript d'origine et ce qu'on enfin souvent ce type de techno en fait qui existait dans d'autres langages on appelle passé un super 7 en fait c'est voilà c'est des sortes d'a un langage qui existe déjà gens en fait moi c'est une sur ouais de sur couche un peu comme ça pour le css en gros ok ok voilà donc tu tu disais tout à l'heure qu'il était trans ouais on dit trans com parce dit c'est pas vraiment une compilation qu'il est déjà c'est déjà déjà javascript à la base il est trans en fait il est traduit en fait javascript qu'ils enlèvent des choses et il est com en gros c'est une compilation qui enlève en fait puisque transformé face un peu ouais c'est voilà mais il n'y a pas un historique aussi avec an ou en fait il était sorti pour an ou des choses que non alors alors pas vraiment par contre c'est vrai ce que tu dis il a été réellement en fait il est sorti en 2012 avec la version 0. Qui était vraiment rien à voir à ce qu'il a aujourd'hui en fait il a vraiment évolué au fil des versions on est la 4. 6 points 2 je crois aujourd'hui donc une évolution des ajouts etc mais à 0 point vraiment rien à voir par contre moi personnellement a peut-être toi aussi j'ai appris la l'existence de type script avec angulaire 2 en fait ou google quand ils ont sorti la deuxième version angulaire qui a complètement changé par rapport à la première version et qui a été breaking change pense le plus gros siège de tous les langages de tous les framework qu'on qui existait en fait et ils ont fait le choix assez couilles à l'époque de partir sur style script qui était encore assez jeune puis qui était pas du tout utilisé dans des gros framework et tout ça donc c'était vraiment vraiment fallait avoir la volonté puis avoir une vision et puis c'est vrai qu'aujourd'hui ben on se rend compte qu'ils ont ils ont ont vu juste en fait ils ont vu juste de partir taille parce que c'était c'était le langage du futur en fait après pour revenir sur an c'est c'était un bon choix en même temps ça a été aussi un petit peu c'est un petit peu mis du plomb dans l'aile au niveau d'anglais parce que ça rajouté en fait une courbe d'apprentissage supplémentaire au framework de l'arrière à l'entrée quoi une barrière à l'entrée enfin enfin tu l'as toujours d'ailleurs mais as déjà le framework qu'il a ses particularités avec les tout ça machin an et en plus il y avait l'écriture en time script qui était en plus qu'il fallait apprendre quand tu venais javascript ce qui était quand même pas évidente et en plus ils ont utilisé le times script on en parlera après mais vraiment à fond au niveau des concepts jusqu'au décor au niveau du langage ce qui qui est vraiment le times expérimental qui est tout c'est une figure qui est toujours expérimentale à aujourd'hui et décor mais qui était depuis le début sur an en fait donc ils ont vraiment pousser le truc à fond mais voilà c'était un choix vraiment en 2015 an deux pour rappel et là du coup non on est sur quelle version à peu près c'est la de frites de type de table crypto on est à 4. Je crois en fait évolue évolue assez régulièrement il ya des ajouts puisque puisqu'en fait ça ils ont un petit peu une sorte d'avance d'avancé par rapport à javascript javascript volumes avec next tout ça enfin toutes les versions qui sortent tous les ans aujourd'hui maintenant avec un cycle assez régulier et en fait à chaque fois il rajoute les au niveau de ya eu sont un petit peu plus en avance ils vont un petit peu plus loin dans les futures qui seront souvent c'est des choses qui seront ajoutées dans javascript mais un petit peu plus tard donc selon toi en en fait pourquoi le type script a pris parce que parce que Google a tapé fort et à force de mat de dev é et tout de toute la communauté qui poussait tables crypte du coup ça a pris ou c'est vraiment basé sur des sur des fondements solides qui font que ça amène une vraie plus-value par rapport au javascript clairement apporte une vraie aujourd'hui on peut le dire ça apporte une vraie value en fait ce qui se passe c'est que tu as deux types de développeurs donc as deux chasseurs as deux types de mais as les développeurs qui ont fait des études été dans les études de développement d'informatique etc comme qui ont forcément appris du java du c plus plus des choses comme ça donc des langages qui sont fortement typiques donc eux quand ils arrivent pas craindre en fait universitaire on va dire ouais ont vraiment un votre en universitaire avec du langage fortement tip tu prends du java parce que souvent c'est java qui est les par exemple un des premiers langages qu'ils apprennent c'est java hyper et quand un développeur comme ça arrive sur du javascript un moment donné vas tu vas forcément faire des applications brothers comme ça et là ils arrivent sur javascript là c'est le drame en fait c'est il n'y a pas de type il a pas de classe il n'y a pas main je peux pas faire un new enfin ça va pas c'est permis quoi tu peux faire un peu tout c'est permis mais ça c'est un mauvais côté le père de fait que ça per et en fait ces développeurs la détestent javascript php javascript déteste tous les langages qui sont pas qui sont anti pages dynamique dynamiques pas ce type de personnes et ensuite à les autres moi je fais partie de l'autre catégorie sont autodidacte qui ont appris le langage du web voilà on n'a pas appris du java tout ça donc pendant longtemps moi pourquoi tu veux type un truc je comprends pas ça marche très bien comme ça puis je je pourquoi tu veux rajouter que c'est string je comprends pas en fait avec le temps en fait il te rends compte que finalement s'il ya des langages qui existent qui sont c'est pas pour rien ça fait quand même longtemps l'informatique existe et qui a vraiment un besoin de type pour une compilation pour vérification que le code est propre qu'on ne fait pas d'erreur et donc je pense que petit à petit en fait le fait que les projets javascript navigateur application etc prennent de l'ampleur on est de travail de ce de plus en plus problèmes en plus gros en fait et le besoin de taille est vraiment nécessaire en fait sur des gros projets et c'est ce qui fait qu'aujourd'hui taille devient de plus en plus plus utilisé un comptable en fait ok ça marche et on va dire c'est quoi le gros paradigme qui change la grosse les gros points de différence entre entre script js alors le pages peut-être non déjà principalement truc de c'est façon ces petits pages en premier parce que c'est pourquoi type script donc voilà c'est le âge qui est vraiment la plus gros le plus gros ajout en futur par rapport javascript après il ya a d'autres d'autres choses qu'on va voir après mais il ya plein d'âge ajouts puisque je le rappelle les écran en 2012 plus connue en 2015 avec angulaire mais les versions de javascript qu'on connaît aujourd'hui c'est assez récent encore il faut pas oublier que il n'y a pas longtemps et on utilise encore on utilise ba tout ça pour ajouter quand il manque y un manque au niveau de notre code pour com sur le bon pour que soit compatible pour les brothers tout ça donc chercher de la rétro voilà disait et 11 des voilà on utilise pas tout ça donc ça peut remplacer la effectivement et voilà ça ajoute la manière de ba des des méthodes des futures qui n'existe pas dans navigateur qui sont pas compatibles avec tous les brothers parce que chrome qu'on ajoute beaucoup de f qui sont dispo assez rapidement tout ça mais les autres suivent pas forcément ça me rappelle un tweet il n'y a pas longtemps ouais oui oui mais je comprends je comprends en ok alors une chose il ya a une chose importante que je voudrais dire dès le début parce que c'est quelque chose qu'il faut vraiment comprendre au niveau de time et javascript c'est que le quand on écrit en tête trip c'est vraiment pour le développement donc quand on développe l'application on fait du time script après le code est toujours trans com en javascript toujours toujours toujours le navigateur no etc ne savent pas lire le taille donc il faut vraiment comprendre que le est uniquement qu'on le développement. Donc en fait c'est au moment de mon build où là selon la configuration que j'ai mis en place il va trans en js voilà avec l'export que je vais lui demander si je veux faire un export sur les dernières versions de es next ou de ou 2006 ou si je dois supporter des vieux navigateurs c'est moi qui vais choisir le type au final le code c'est toujours javascript et j'ai vérifié parce que le jour j'en parlais d qui supporte script com aussi enfin convertis aussi un js au moment la de l'exécution du code parfait donc gros pages donc ça amène plein de plein de contraintes est-ce que ce que ça on arrive aujourd'hui on a tout un écosystème qui s'est mis en place pour nous aider sur sur le ou c'est à nous en fait de créer tous les types à chaque fois non non c'est tout alors ça c'est à peut-être y revenir revenir après parce qu'il ya voilà on va parler un peu toutes les grosses les gros points en fait au taille en plus le plus le reste par contre je voulais en fait les différents pourquoi on a du on a déjà parlé un petit peu mais ok donc on a déjà parlé c'est disposer des types donc parce que comme je reviens sur javascript parce que en fait javascript faut comprendre que c'est c'est un langage qui est un type un petit page dynamique à la manière php écrit exactement paris c'est à dire que l'inter au moment où il exécute le code c'est à ce moment là qui va déterminer quel est le type de la variable donc si tu as une variable où tu mets une string il va dire là c'est string si c'est un number il va dire c'est number mais en fait il signer et tu peux la en plus imagines complications du truc et on connaît tous les fameux bug en fait où tu vas con un number et string qui va trop ressortir une string alors que tu dis mais moi je voulais juste un calcul en fait enfin c'est tous les trucs un peu ou le not number beurre ou des choses comme ça en fait tu as vraiment des fois des bugs en fait au niveau de javascript que tu des erreurs de code de tu vas taper un truc tu tu vas tout ça en fait c'est c'est vraiment du piège classique de javascript comme les champs de formule les de formulaire tu vas faire des champs formulaire dans ta page web tu vas vouloir des number tu vas vouloir faire un calcul avec ça sauf que le l input il en bas des string il pas des number vois c'est tout voilà et ça il faut que c'est pas aussi une connaissance du paradigme de ton langage que tu utilises en fait c'est javascript et comme ça quoi donc quand on dit il ya un bug dans javascript en fait non c'est il a été écrit et pensé comme ça et et donc c'est à nous de nous adapter au paradigme de ce langage là par contre justement l'avantage de passer sur du type script c'est qu'on vient et ça nous supprime toutes ces ce truc un peu messi si quoi ou c'est un peu c'est un peu le bordel où on est obligé d'être hyper attentif sur sur le ouais ok oui ouais en fait il est en fait javascript qu'il a été créé pour c'est quand même un truc qui a été créé pour faire des pages d ou un langage de programmation c'est ça le truc en fait Donc il n'a pas été pensé pour faire ce qu'on fait aujourd'hui en fait c'est juste fou ce qu'on fait aujourd'hui avec javascript faire des applications hyper complexes il n'est pas du tout été fait pour ça c'était vraiment un langage de de navigateur pour faire des animations pour faire des des formulaires un peu interactifs tout vraiment basique en fait et aujourd'hui c'est il est tourné complètement à la manière de php aussi un php est complètement de détourné de sa première utilisation php c'était n'était pas du tout pour faire qu'on fait aujourd'hui ce qu'on fait du symphonie tout ça c'est vraiment très très poussé donc voilà c'est en fait les faiblesses du langage et c'est normal qu'elles existent parce qu'il n'était pas fait pour ça et donc en c'est un peu comme les tests en fait quand tu par exemple tu fais une application tu vas faire tes tests sais quand tu vas lancer tout les tests ça passe tu sais que ton code il est clean quoi ça y'a pas de problème ben en fait le fait d'avoir un langage avec des types comme ça qui va se trans va se com en fait si ça com c'est un peu comme reste tu vois si r com c'est que ton code est nickel times script en fait il a rajouté ça en fait javascript à dire que si le script qui va com sans de sortir d'erreurs eh ben c'est que ton il il écrit en fait donc ça c'est un gros avantage de ça c'est le deuxième avantage en plus de rajouter les types sur javascript et troisième troisième avantage et ça c'est génial je pense que ça te plaît pas mal aussi c'est tout ce qui est auto complet fait le fait en fait d'ajouter les types touche ça dans dans tes fonctions dans tes valeurs et tout ça ben en fait quand tu vas être dans ton vs code où ton php importe et ben en fait il va tout compléter quand tu passes la souris dessus tu sais les valeurs que tu peux mettre à chaque fonction etc et ça c'est une grosse grosse aide pour coder en fait tu beaucoup de temps quand entre deux fichiers et trois fichiers t'as pas besoin de revenir sur le fichier attends je me souviens plus que c'était machin la valeur à tout c'est hyper hyper pratique et quand quand un gros projet c'est vraiment pratique d'avoir pas besoin de avoir besoin de se souvenir de tous les paramètres chaque fonction etc ça c'est vraiment top puis même tu as pas besoin enfin tu as toujours besoin de lire la doc on est d'accord mais tu as moins besoin de d'y revenir venir parce que qu'en fait tu vas avoir une auto occupation qui va te dire ouais c'est ça up c'est quoi c'est si up louise ou ça up machin et hop tu tu l'as automatiquement et ça c'est vrai que c'est super confortable au au quotidien c'est hyper fluide quoi et après quatrième avantage et donc c'est comme ce travail api parce qu'aujourd'hui on travaille beaucoup avec des api les api on sait ce qu'elles vont répondre avant vont répondre des éléments avec un title tout ça la description tout ce que tu veux et ça en fait tu vas le tip tu vas tu vas faire une interface de ton de ta réponse à api machin et tu pourras travailler après avec tes fonctions tu vas lui dire c'est ça qui va recevoir comme type de comme interface et tu auras le clean parce qu'il qu'il sera exactement ce qui est quand tu travailles qu'il a pays que tu fais un appel tu reçois une data en fait c'est là où as ne peut pas savoir ne peut pas deviner en fait que ce que tu vas recevoir parce que c'est au moment de l'appel que tu vas recevoir la réponse donc c'est là où tu vas définir le ch en fait la réponse et là tu pourras faire ta fonction qui va correctement format tout ça ta réponse à payer ça c'est c'est aussi un avantage de pouvoir savoir à l'avance que ton api n'y pas de problème que ça va passer je sais que avec graph quand tu peux c'est ip j'utilise beaucoup graph cette ip et donc as aussi cet avantage en fait puisque des petits pages qui est disponibles dans des scott tout ça donc c'est c'est hyper pratique en gros vas-y vas-y en gros en fait times script moi je le vois comment je le vois depuis le début en fait pour moi c'est une sorte ce que j'ai écrit c'est une sorte de en fait. En gros quand tu écris ton code c'est comme si tu connais avec quelqu'un d'autre en fait avec un autre code odeur et times en fait c'est l'autre code qui vient régulièrement te dire attendant là c'est pas bon là normalement c'est c'est pas une string ça number ça va pas du tout et en fait qu'ils tape sur le dos en disant non mais là c'est pas bon c'est ça en fait de coder en taille trip c'est régulièrement ça en fait quand tu code il s'est dit non là c'est pas bon ça c'est pas bon ça c'est bon et c'est hyper en fait en fait tu doubles ta capacité d'analyse de code en fait c'est un super assistant quoi c'est ça un super assistant qui de fait faire des erreurs en fait excellent excellent du coup est-ce que la learning girl valait compliqué pour quelqu'un qui a déjà va dire un historique qui manipule déjà du javascript de manière courante ou plutôt experte et est-ce que c'est compliqué de faire le switch de passer justement sur sur du test ou ou pas du tout ouais ok voilà merci honnêtement ça c'est pas si compliqué parce qu'en fait peux aller progressivement après ça dépend aussi la taille de c'est pas si compliqué mais ça peut faire peur ça peut faire peur parce qu'il ya des concepts un petit peu il ya beaucoup de c'est un petit peu verbe que tu fais écris beaucoup d'ailleurs enfin tu peut-être en parler mais c'est assez vert faut écrire les types une interface tout ça demande quand même de rajouter des explications pour aider taille à comprendre ton code tout ça ça peut être impressionnant il y ya vraiment des paradigme à comprendre et puis donc ouais au début ça c'est pas forcément évident c'est mais le début est difficile mais après c'est une fois que tu es rentré dedans c'est fluide en fait en fait souvent les développeurs se mettent à taille après qu'ils rentrent dans des projets où ils font que ça et ben ils sont assez souvent choqués de revenir à javascript. Et de donc en fait il il a une learning cave qui est un petit peu qui est un petit peu dur au départ mais la première marge une fois que tu as fait l'effort en fait tu gagnes vraiment en productivité en sans fluidité et donc le retour en arrière et est plus difficile quoi donc en retour vraiment difficile et pour le coup est-ce que c'est du on off parce que tu tu disais tu peux y aller de manière progressive est-ce que c'est on off ou tu peux est est-ce que tu prends est ce que si je fais mon fichier à js je le renom t ça passe alors non ce qui va forcément te dire il manque aussi manque ça alors il y l j'en parlera après mais il est capable de deviner des types en fait lui-même taille donc suivant ton fichier s'ils complexe ou pas il est capable de de le lire et de l'ex exécuter sans problème s'il n'est pas complexe par contre il faut savoir que on peut on n'est pas obligé de faire un projet 100 taille en fait tu peux très bien avoir un projet javascript et inclure du time script de dedans fait c'est à dire que tu peux en fait quand tu tu vas lancer tu vas tu vas créer ton fichier config tu peux lui mettre all js en entre et là il va pouvoir tu vas pouvoir rajouter les fichiers tests dans ton projet javascript et exécuter ces fichiers écrite sans problème en fait tu peux mélanger les deux des fichiers des fichiers th donc tu peux demain fait même dès aujourd'hui commencer à faire patrick de sur un projet qui est déjà existant en fait et si tu as envie ça m'est déjà arrivé à un moment donné j'arrivais sur un un projet qui était 100 javascript j'arrive sur des fonctions qui sont un petit peu complexes tu vois je me dis il faut vraiment que ça fonctionne il faut que voilà il faut que ce soit clean et bien à ce moment là j'avais rajouté tac dans le projet et j'avais fait pas pour être sûr que mon code mes fonctions soit clean et il fallait que ça fonctionne parfaitement donc donc tu peux très bien mélanger les deux et j'encourage vraiment à débuter le plus tôt possible en fait il faut s'y mettre le plus rapidement possible pour pour pour apprendre et est est-ce qu'on peut dire que si on fait du ds ton code des plus clean où tu peux le faire du time sc un peu nul en la comme tout alors c'est pas magique non c'est pas magique et non tu peux très bien faire n'importe quoi le script ça vaut rien tout à fait possible laissez c'est s'épanouir c'est pas non plus enfin ça pas faut pas faut continuer à faire des tests continuer décor une baguette magique non c'est comme de ga magique ça aide juste ok mais par contre c'est plus facile de faire du clean du code super propre et clean parce que justement tout est ba et tout et tout est bien structuré type soit les appels les retours et tout ça quoi autres ce dont es sûr quand tu créé avec type c'est que quand tu vas utiliser une fonction native ou des choses comme ça es sûr que ce que tu vas utiliser en paramètre dans cette fonction ça sera validé parce que le type correspondra à ce que la fonction native attend ce sera un number string comme ça ou donc tu sais que ça va fonctionner que tu n'auras pas à un moment donné autre même beurre une erreur va se soulever dans la console parce que le paramètre sera pas sera pas bon que si tu as tu écris tu faire un match un tableau que ce soit bien un tableau donc tout toutes ces choses-là là ça vite les bugs en fait que tu n'aurais aurais pas forcément vu directement. Ok ça marche et donc si si je veux m'y mettre qu'est ce que je fais alors sur mon projet principe de base alors on va on va juste survoler en fait principes de base de taille on va pas rentrer trop dans le dans le technique après il y ya plein de tutos sur internet puis c'est quand même compliqué d'aller très loin sur un podcast audio mais on va on va aller faire les principes de base donc le premier premier premier principe c'est déjà parce installer sur ta machine avec paquet mp global à partir de là tu auras la moi moi j'ai une question est-ce que faut le faire en global sur ta machine ou en local sur le projet parce que si tu vois tes freelance intervient sur un projet où ils ont telle un autre ils ont versions est-ce que ça peut pas amener des conflits sur des versions c'est à l'intérieur de la configuration de ta trans ton t config que tu vas régler tout ça non non il faut après c'est alors ça c'est gros débat ce qu'on installe que c'est débat pour une pme en général non tu peux l'installer dans ton projet avec la version qui correspond alors l'avantage de d'installer globe la commande t terminale pour générer la config tout ça ou com tout ça effectivement la plupart du temps tu plutôt dans le projet puisque tu as une version qui correspond et qui qui va correspondre à toutes tous les développeurs de travailler sur le projet donc là oui mais donc soit d'un projet soit et à partir là tu peux générer ton fichier t config en faisant un t et là il va générer un fichier config de base en fait avec voilà il y a quelques truc de base qui sont la target les modules enfin des choses comme ça dossier doit chercher la plupart du temps par des défaut c'est ça et le fichier de com je sais plus soit tu mais big de soit tu mets enfin ce que tu veux voilà il y a quelques trucs par le défaut après il a plein plein plein de configurations très poussées cette de config est assez bien fait parce qu'il ya des commentaires donc qui explique chaque éléments qui sont commenté tout ça tu peux être très loin dans les config mais ce fichier de config est obligatoire qui ça permet à la taille de savoir comment trans ton code. Et du coup pas c'est pas une usine à gaz un peu à mettre en place où on arrive quand même à s'en sortir faire quelque chose de mini hyper facile direct par à son sens ouais par des défaut il n'est pas très compliqué franchement par défaut il ya 6 sept paramètres et encore même pas tu peux que ça toute façon il des paramètres par défaut qui sont déjà réglés il ya des paramètres qui sont super importants comme le target alors le target c'est c'est comment tu veux sur quelle sur quelle target en fait de javascript tu vas tu veux qu'on trans donc le minimum c'est 5 c'est 5 donc était lu par explorer 11 et le plus haut c'est net qui qui va prendre la la dernière version street voilà alors est que tout ça ça pas un peu plus facilité aujourd'hui la mise à jour automatique des navigateurs qui qui en fait base une grosse partie du parc en fait machine va être mis à jour quasiment automatique après il y a encore des projets spécifiques sur des sociétés où ils peuvent pas me faire des mises à jour automatique mais est-ce que c'est pas qu'il a pas de plus en plus de gens qui qui sont prêts pour de le s next quoi Alors le s faut faire très attention en fait la il faut faire après attention parce que comme tu dis les brothers alors aujourd'hui c'est sûr chrome grandement majoritaire et à côté parce que même opéra tout ça utilise chrome ta firefox et safari mais ça vrai que chrome majoritaire et chrome i les choses assez rapidement ils ont même tendance à pousser un peu trop de mon avis mais voilà c'est un autre débat on fera peut-être un podcast de dessus mais ce qu'il faut faire attention avec le s c'est qu'il va vraiment com dans la dernière génération et ce qu'il faut vérifier c'est que qu'au niveau de ton code eh ben tu dois vérifier can est-ce que cette fonction j'utilise sur javascript parce qu'elle est d'en chrome mais ce qui est disponible dans safari parce qu'à moment à ce moment là c'est toi qui va être responsable de ce que tu utilises comme f en fait et elle n'est pas dispo lui il va pas la com ce qui se passe c'est quand tu vas mettre par exemple 5 il y des choses qui n'existent pas dans les 5 au niveau de javascript qui va en sorte que ça fonctionne dans 11 par exemple spread ça des objets tout ça il va aller com enfin va va faire objet as pour voilà il va va transformer ton code ça va faire un gros tas de code en plus parce que forcément il faut que ça fonctionne dans on est 5 mais ça va fonctionner après next il va moins com le code il va va rester sur des choses un peu plus classiques donc si ta f javascript que tu as utilisé elle n'est pas implémenté dans sa safari ça ne marche pas dans sa safari c'est à toi c'est ta responsabilité en fait tu peux rajouter un po mais donc c'est s next c'est bien de l'utiliser mais faire attention à ce que utilise comme fonction donc c'est ouais donc en fait c'est selon la lettre typologie de clients brothers que je vais je vais ou ou que mais les utilisateurs de ma de mali ou de mon site ou de mon appli ouais je vais être obligé de prendre ça en compte c'est un paramètre qui hyper important quoi. C'est hyper important c'est toi qui responsable de ce que tu utilises et c'est à toi de tester derrière dans tous les navigateurs fonctionne donc le next attention c'est du prudence voilà ok ouais donc ça c'est important de target ça marche après on a dit que c'était t du coup qu'est ce que je vais faire je vais je vais déclarer le type à travers quoi à travers des fichiers objets où je vais déclarer ça c'est string ça c'est un nombre c'est un bon en fait alors déjà tes fichiers ce sera du point t toujours le fait que ton type script va chercher les fichiers en point ou t 6 pour quand tu fais du direct donc comme j ai six donc c'est exactement et à partir là oui tu peux donc dans des fichiers tout ce que tu vas remplir dans ses fichiers t ça sera du donc à partir de là lui il va s'attendre à ce que faire alors juste avant c'est l c'est c'est le concept en fait qui fait que time script est capable lui-même même de deviner le type de la variable si tu as une variable où tu vas assigner une string dedans forcément lui il va dire ça c'est une string il est assez intelligent en fait pour deviner en fait les types de de certaines fonctions de certaines variables. Donc ça c'est très pratique parce que l'idéal c'est de type le moins possible toi même en fait les ton code en fait de mettre moins possible de code s'il n'arrive pas ça toi de mettre tout type donc le type ça s'écrit simplement avec tu fais une variable cons toto deux points string égal et un string écrit et le world par exemple et c'est à partir là il sera que c'est une string voilà tu peux les mettre dans tes fichiers t directement sur les variables variable voilà c'est tout au mélanger en fait sur les fonctions etc donc c'est ça c'est simple en fait par contre quand je pense par exemple pas une réponse d'une api reste où là je vais recevoir un objet est ce que je peux t justement ma réponse en mode ça c'est la réponse c'est le c'est mon de la réponse et donc je vais avoir un objet avec cette clé c'est un boulet cette clé c'est un un string et donc ça je peux je peux aussi le déclarer quelque part tu déclare où tu veux en fait enfin où tu veux tu peux le déclarer dans directement ou que tu fais ton appel? Donc dans le fichier au début du fichier tu peux très bien déclarer ton type ton interface en haut et tu l'utilise dans le fichier tu peux faire un fichier de déclaration qui sera lu par taille puisque si tu lui par défaut il va dans les faire si ton fichier de déclaration tu le mets dans les il va voir que c'est des types c'est des définitions et il va l'utiliser en fait et ton étant ta définition tu vas tu l'appelles api type par exemple eh ben il va savoir que c'est cette définition et il va automatiquement l'utiliser pour pour pour savoir ce que ce que la pays répond en fait vraiment la soit donc ça veut dire que je peux la mettre dans mon projet dans un dossier que je peux appeler type et à l'intérieur dedans à l'intérieur de ce dossier, je vais mettre tous mes fichiers de type où je vais tip en fait tous mais tous mes objets et et en fait je vais centraliser tous mes petits pages c'est quoi la meilleures pratiques c'est de tout centraliser centralisé ou faire le là où je j'utilise alors débat dépend honnêtement ça pas la taille du projet si c'est un projet simple tu peux très bien les mettre dans les fichiers moi avec quand on a des compo où tu vas utiliser les pour les des tu tu peux très bien les mettre juste au-dessus dessus du coup fond de fonction ça pose aucun problème quand c'est des trucs qui sont pas hyper complexes après c'est très bien aussi de centraliser à un endroit dans une parce que tu sais où c'est c'est pas mélanger avec le reste c'est ça c'est toujours là voilà c'est les méthodes de développement le bon sens tout ça ça dépend gros débat ouais gros débat mais c'est bien de centraliser ce souvent plus simple trouver et ça permet aussi de réutiliser entre fichiers. Ok et du coup là on parlait des types simples type string objets tout ça par contre est-ce que je vais pouvoir t aussi et les paramètres de ma fonction que ce que je vais injecter dans ma fonction elle ne prend que des que des number et donc là ce que je dois lui je dois t en fait être en fait de ma fonction tu dois les paramètres tu vas tu peux les paramètres de la fonction tu peux t la valeur de retour aussi important pour savoir ce qu'elle retourne parce que derrière ta fonction tu vas forcément réutiliser ce qu'elle va retourner la valeur donc pour les prochaines fonctions qui les retours d'une fonction il faut que soit en fait toute une chaîne de et oui tu vas t les paramètres tout ça donc il ya deux types alors on va de suite parler de ça tu as les types classiques on ce appelle type c'est des tubes primitifs comme string, number meurent tout ça et ensuite derrière les interfaces Souvent qu'est-ce que c'est une premières question quand on commence c'est quoi la différence entre un un type et une interface ouais pourquoi j'ai utilisé une interface auquel quel moment l'interface c'est utilisé le type ben en fait c'est simple l'interface c'est on va l'utiliser en fait c'est une sorte de shape d'objets fait en le type un objet par contre avec l'interface tu peux faire un objet tu vas faire tu vas définir voilà tes clés machin ça c'est une number et en plus gros avantage interface c'est que tu veux faire d'héritage tu peux avoir des deux interfaces en faire une troisième qui va hériter d'une première interface tu peux faire un stand donc vraiment l'interface est beaucoup plus poussée en fait au niveau de de la définition de types en fait voilà et si si on faisait un parallèle et enfin est-ce qu'on peut faire le parallèle le type en fait ça serait des atomes et les interfaces ça serait des molécules mais exactement c'est parfait c'est exactement ça rapidement rapidement sur des interfaces parce que les types c'est vraiment très voilà titre primitif basique ça marche ouais ça marche et ensuite donc ça c'est vraiment quand tu veux t tes fonctions etc et alors parler des génériques aussi sont une assez puissant niveau de type script le générique alors c'est quoi générique c'est une sorte de petit page dynamique en gros tu vas pas dire que c'est tu vas pas dire ton paramètre de la fonction c'est string il va le deviner au moment l'exécution tu soit tu peux lui indiquer soit tu peux ils peut le deviner avec l en fait donc en gros tu vas lui dire que qu'en fait par défaut il ya la lettre t majuscule qui est utilisé mais c'est vraiment comment dire c'est pas obligatoire tu peux mettre ce que tu en fait c'est juste une convention c'est une convention c'est une convention pour que les gens se retrouvent taille et en fait ce en fait il va être remplacé au moment où tu vas appeler la fonction tu vas lui dire par exemple que le paramètre c'est le number et lui il va peur il exactement fait tout seul et si vous réutilise c'est bon pas bon en fait en fonction de ce que tu mets comme et ça aussi il est capable aussi de deviner tout seul avec l donc n'es pas obligé en a appelant la fonction de lui dire que c'est st donc c'est très pratique en fait pour un un code un petit peu plus simple souple en fait parce que j'en parle après mais blocage en fait il veut pas accepter tel type devient gros ben le type ne passe plus en fait il veut plus com te dit ça ça marche pas et tu commences à changer le type et puis après ça fait déconner un autre truc et et là tu commences à t'a les cheveux pendant une et ça fonctionner com et ça c'est c'est donc les génériques c'est balle parce que ça de souplesse au niveau de type niveau des appels de fonction tout ça il faut vraiment quelque chose qu'il faut apprendre à utiliser assez rapidement quand on met avec trip c'est vraiment utile pour vraiment éviter de complexifier le code au niveau des l'équipe donc peut en fait par exemple je pourrais utiliser ma fonction où lui injecte un chiffre et donc elle va me retourner un chiffre donc ça va être t en mode chiffre par contre j'utilise la même fonction où j injecte une string donc il va automatiquement comprendre que dans ce contexte là fait bah c'est une string voilà et donc mon petit âge va être une stream c'est ça voilà donc ça t évite toi c'est parfait dynamique mamie et t'as pas union entre soit string soit un number un union et c'est là où la la complication arrive parce que j'y viens vas faire na ou du en fait faut tester c'est quoi c'était quoi ces termes hyper barbare ouais en fait imaginons que qu'il mets pas générique allez dire ma fonction c'est ce soit une string et donc pour ça pour pouvoir mettre deux types on utilise ou l'autre c'est là ou l'autre donc on fait union donc c'est le pipe qu'on met entre les deux number ou string à partir de là ce qui se passe c'est que dans ta fonction ok si je reçois un number home c'est pas pareil en fait si je veux utiliser une fonction native javascript qui est propre au string je pourrais pas l'utiliser sur même parce que j'aurai une erreur et c'est là où arrive le darwin mais il il va falloir faire un test pour voir si c'est un number ou si c'est un string en fait donc avec ça tu vas définir si le tai de ton paramètre c'est une string ou si c'est et donc du coup tu vas faire un traitement différent si c'est si c'est un si c'est un chiffre tu fais ça si c'est une string tu fais ça exactement et c'est là où tu vois si tu mets pas le générique avec ce petit page dynamique eh ben c'est là où tu com ton code parce à ce moment là il faudra tester en plus rajouter du code notre fonction c'est après le darwin est quand même nécessaire dans pas mal de trucs et quand tu l'utilisent en fait si tu en fait c'est simple quand tu l'utilise pas fait ce que je viens union string number ben en fait taille vous dois mettre erreur par contre si derrière tu rajoutes un test number de string là lui va voir que tu teste et donc il va mettre ok c'est bon ça passe pas problème voilà donc est vraiment capable de définir de comprendre ton code etc de et ça tu crois que ça amène vraiment plus de lecture dans le code enfin je sais pas ça me paraît bien en fait tu déplace complexité en fait tu veux tu veux t mais tu fais une fonction avec qui accepte deux types radicalement différents parce que dans la mesure du possible pouvez le faire mais il faut es donc c'est là où c'est là où tu peux vraiment avoir des erreurs de complications des c'est vraiment les union là quand j'ai plusieurs types et surtout quand on a trois quatre parce que tu peux faire des c'est en fait par exemple tu peux faire un alias en fait c'est tu vas attribuer à une variable plusieurs types c'est séparées par des pipe donc c'est des union mais tu peux en mettre deux trois 4 enfin que tu veux et c'est là où tu peux vraiment rajouter des erreurs de type etc parce qu'à un moment donné il sera plus en fait quel type correspond machin et c'est là où tu tu commences à en usine gaz ça créer une usine à gaz et tu commences à détester ta parce que tu arrives plus à tu comprends pas pourquoi projet doit être fini dans une heure voilà donc il faut rester le plus simple possible d'accord là et ya cette notion de classe aussi c'est pareil quand c'est pareil en javascript ou pas du tout tout alors ok c'est autre chose c'est carrément mais ça veut dire autre chose non alors à javascript contrairement à ce que ce que les développeurs ont fait des grandes études pensent c'est un langage objet clairement seulement c'est un langage objet où il n'y a pas de classe on n'a pas le mot classe on fait pas le voilà il n'y a pas de construit etc enfin le truc classique qu'on retrouve dans les langages avec des classes donc tu sais le fait de créer un avec un constructeur tout ça avec des variables qui sont publiques private etc donc c'est des premières c'est la première qu'ils ont rajouté un tas de clip parce en plus des types c'est ce qui manque n'y pas de classe pour les développeurs habitués à créer des classes vraiment des vraies classes comme on fait dans les langages comme java ben ça leur manquait donc c'est une des premières figures qu'ils ont rajouté et au fur et à mesure et j'ai rajouté des niveaux de gr au niveau de la visibilité des paramètres les attributs avec public private de mais c'est voilà pour les gens qui aiment faire les classes il a de quoi faire Donc en fait ça été implémenté par la communauté qui demandait en fait de gérer leur objet avec des classes. En fait c'est une des premières choses quand un développeur qui arrive sur javascript qui est habitué à créer son code à à structurer son code avec des classes qu'il appelle un peu partout new machin tout ça new art new new car c'est les premiers trucs qu'on apprend quand on fait du code ben en fait ça manque je veux faire des classes machin non je fais pas du fonctionnel donc c'est le système de classe est très très poussé très avancé très bien fait il n'est pas obligatoire on peut toujours utiliser les fonction c'est ce qu'on utilise dans fait pas de classe en actes depuis un petit moment depuis la version 16 depuis qu'ils ont rajouté les ho on fait quasiment enfin plus personne aujourd'hui décrit des qu'on en classe dans actes mais on peut le faire an écrit les contenants avec des classes tout ça donc on pourra on pourra en plus discuter peut-être dans un autre épisode de la programmation objet, la programmation fonctionnelle, procédure enfin voilà exactement c'est la boîte de pan mais en fait pour comprendre les grands concepts les grands paradigme sur ça marche tu nous parlais tout à l'heure des décor ouais quoi en fait les décor c'est alors je suis pas je suis pas j'utilise pas trop ça c'est un concept qui est toujours expérimental depuis depuis le début en quasiment qui été implémenté angulaire comme je disais tout à l'heure et et c'est versus dans en tout au niveau de javascript donc c'est un jour peut-être ça arrivera dans javascript en natif c'est pas pour de demain et ça permet en fait en fait tu fais un base tu fais une classe ou une fonction et tu peux appeler le nom de la classe au tu au en fait sur les fonction sur paramètre enfin voilà et tu étais en fait peux utiliser la fonction c'est une sorte d en fait c'est une sorte d'héritage c'est un peu difficile à expliqué en fait mais c'est une sorte d'héritage d'une autre fonction ou d'une autre classe en fait à travers une autre classe et c'est très utilisé dans an les compo par exemple quand tu écris un dans tu as un je pas dire une connerie j'en fais pas dans l'armée c'est qu'on choix et du coup tu vas avoir tous toutes les propriétés disponibles pour les temps directement en fait dans ton truc en donc c'est hyper pratique ça te clean le code parce qu'en fait rien qu'en écrivant un le nom de la truc et tu récupère tous les paramètres être créer les fonctions et et ça te fait un truc super simple au niveau de ton code sauf que voilà je connais pas beaucoup de gens qui l'utilisent c'est un truc qui vient sur de java je crois java existe deux sur j'avais ensemble peut-être dans d'autres code aussi fin dans nos langage mais voilà faut savoir que ça existe et c'est utilisé dans ça marche ok et du coup tu en as déjà un peu tout petit peu parlé mais on n'est pas obligé de faire du 100 on peut mixer sur un projet un mix de javascript et de répète je le répète c'est vraiment pas obligatoire de faire que du test donc on peut s'y mettre tout doucement c'est ça qu'il faut comprendre faut pas attendre d'avoir un projet faut pas attendre de dire bon un projet un projet là je commencerai zéro que du top script et tout ça nickel non vas-y direct ho true et tu peux direct faire du bts dedans et a même un truc vois j'utilise pas trop et j'ai un peu vu quand je faisais la doc là fin notes tu peux avec Js doc tu sais avec les commentaires js doc en disant de tels paramètres string tel le et ben en fait en me vieillissant ça avec taille de ma taille script était capable de deviner des types de ton de tes fonctions clients javascript donc c'est pas mal vois tu peux vraiment un projet qui est un petit peu ancien tu peux petit à petit ra tas de crypte rajouter du js doc dedans et pouvoir coder implémenter nouvelles friture proprement en de l'auto après je vois sur sur on va dire tous les l'écosystème js il ya de plus en plus de ou de package qui sont qui sont codé en en t du coup on voit qu'il ya a quand même une une tendance en fait ma question elle est la question sous-jacente ja c'est que justement c'est pour construire plutôt des librairies qu'on va utiliser du t mais l'usage final en fait on peut faire un peu ce qu'on veut avec du js mais on va utiliser des posant ou des librairies ou des modules qui sont eux-mêmes codé en en t pour la robustesse pour la fiabilité pour tout ça ouais façon enfin toutes les librairies sont train progressivement soit sont écrites soit soit passe sur du times script on le voit avec jules vu 3 qui a été totalement écrit ne qui a était totalement écrit st trip voilà vraiment ré je pense que si script aussi aujourd'hui voilà toutes les grosses les grosses le gros framework sont écrit un peu 100 donc on peut les utiliser dans un projet javascript description sans problème puisque en fait ça passe un problème puisque c'est javascript de toute façon et si tu utilises en c'est parfait les définitions sont déjà là tu enfin tout est hyper compatible en fait et après pour des projets qui sont full js mais qui sont pas qui n'ont pas fait la migration full bts comment on fait c'est là où ça se complique alors la plupart des grosses sont on on soit les définitions soit les types disponibles en fait donc soit déjà en fait comme tu tu dis les il y aura finitions définition qui vont être créés en même temps donc quand tu vas la rajouter dans ton projet la définition est dispo pas le problème ça marche pour les projets qui sont un petit peu plus anciens donc je prends l'exemple de l'audace qui est un petit peu ancien qui écrit en js ils vont pas tout ré réécrire aujourd'hui avant qu'il mecs que soit hyper motivé mais ils vont pas tout écrire aujourd'hui et ben en fait il ya des des types sont disponibles séparément en fait pour l'audace dash c'est à dire qu'il y ya des gens tu peux contribuer même toi tu peux contribuer en fait il y ya un ri qui commence par type qui qui où on peut mettre en fait toutes les tous les définitions de librairies dedans c'est à dire que si tu vas utiliser l'audace dash sur ton projet tu vas rajouter les type l'audace dash en même temps avec ton et tu vas pouvoir pouvoir avoir les définitions en fait alors c'est soit c'est link qui est directement dans le package donc il est capable d'aller chercher tout seul soit c'est tu vas aller aller chercher toi même dans le repos taille en besoin de cherche il ya un site existe tu fais va trouver les types et là tu leur rajoutes ton vs code il est capable il est capable de définir les types de chaque fonction de chaque machin et donc en fait au fur et à mesure si tu veux tout tout va être plus ou moins tip et donc ça va être on pourra toujours utiliser du du t même si la elle est en js vu qu'on aura on va dire le fichier de avec toutes les explications et toutes les interfaces on pourra l'utiliser dans nos projets t quoi ouais tu pourras toujours façon petit à petit à part vraiment les petits projets la plupart du temps soit à les tailles qui sont disponibles soit voilà c'est créé en pas et après dernier si jamais tu utilises un package qui est un petit peu ancien qui est pas maintenu ou est tout petit peut-être tu peux avoir un truc un package avec une petite fonction qui fait un truc vraiment spécifique comme le gif il comme ça après tu peux si jamais le pipe n'existe pas donc soit soit tu écris tu fais ce ce travail d'écrire le de contribuer à ce package à ce pardon et tu rajoutes de taille pour cet librairie donc il serait disponible pour tout le monde c'est cool de contribuer soit vraiment tu t'as pas envie de à partir de là tu peux défaire la définition en fait pour rajouter la définition de ton package en. Donc tu fais une déclaration et tu vas déclarer fonction elle prend paramètre tu fais toi-même même quoi tu le fait toi-même même c'est vraiment le dernier vraiment l'intérieur ton code c'est pas dispo tout ça dernier recours écrit des déclarations si tu utilises qu'une seule fonction de ce package je écrit que cette fonction et puis c'est réglé ça fonctionne en fait t'as pas besoin d'aller chercher plus ok c'est cool tout ça après on a déjà parlé sur la courbe d'apprentissage où il y ya un effort à fournir un peu au départ après en fait on a tous les bénéfices qu'on a évoqué du l'épisode mais on va dire moi je suis un peu je suis plutôt g que es que comment je fais pour m'y mettre ya des ressources sur les net ya des chic des tutos des choses comme ça et que je peux voir bah ya tout il ya tout il ya beaucoup beaucoup beaucoup de choses déjà le site t script a fait il ya beaucoup de la doc et bien fait tout expliqué il y a plein d'exemples as un qui est disponible sur sur le site aussi donc que tu peux imprimer si jamais tu veux l'imprimer tout ça il ya beaucoup de choses qui sont disponibles et il ya énormément de tutos sur youtube graphique car en a fait a pas très longtemps je crois pour faire de la plus où on est pas simplement les basiques donc il ya vraiment beaucoup de tutos donc c'est vraiment pas compliqué à s'y mettre après ça chaque librairie si tu fais du du vu tout ça as forcément des trucs particuliers parce qu'il ya a des types qui sont définis et puis donc là il faudra de ton on ferait tout ça de exemple qui sont définies mais dans l'ensemble il ya beaucoup de ressources sur internet donc honnêtement aujourd'hui je ne vois pas de pas de pourquoi on un développeur ne va pas donc en clair on n'a pas trop d'excuses quoi si on va dire que pour un développeur front c'est obligatoire ou un développeur bac qui fait du no il est obligé de passer sur du test encore ouais façon ce c'est les projets vont de plus en plus en taille ça c'est clair et net il faut aussi s'y mettre il faut être employé guillemets bien sûr vous êtes de toute les gros projets et on de javascript passe forcément par et même des fois dernièrement j'ai fait un projet qu'on avait commencé en un javascript parce que je voulais pas rajouter une courbe enfin la difficulté au développeurs qui travaillait sur le projet parce qu'ils étaient pas à l'aise avec street et puis au fur et à mesure des choses que le projet finalement a de l'ampleur a grossi je me suis rendu compte que c'était une erreur et que j'aurais vraiment dû vraiment favoriser pas de suite un code donc moi je pense que vraiment c'est trop tard quoi parfois on loue un peu trop tard on dû faire en du et on peut pas tout ré réécrire on peut pas trop et c'est pour faire pour ça que tu peux l ça c'est pratique si jamais un moment donné tu dis j'aurais dû faire du grand script dès le début bon bah c'est pas grave continuons comme ça un du quand on a vraiment un code comme ça on est sûr que ça fonctionne et mais bon c'est vraiment encore plus si tu fais du javascript de côté serveur qui souvent as plus de complexité parce que tu as une api qui va faire qui va traiter d'a data tout ça là c'est quasiment obligatoire je pense côté ça ok voilà cool de toute façon on mettra toutes toutes les notes dans en à tous les liens justement qu'on a évoqué dans dans la description cool et ben on n'a qu'à tester tout ça un grand merci patrick rien à bientôt ciao retrouvez l slash sur plateformes de podcast préférées et sur le site internet du podcast w fr le site vous allez retrouver tous les liens épisodes vire référence évoquées l'émission."
          }
        ]
      }
    ]
  }
}
