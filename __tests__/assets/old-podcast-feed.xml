<?xml version="1.0" encoding="UTF-8" ?>
<rss
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:atom="http://www.w3.org/2005/Atom"
  version="2.0"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:googleplay="http://www.google.com/schemas/play-podcasts/1.0"
><channel><title><![CDATA[Double Slash]]></title><description
    ><![CDATA[Double Slash, un podcast avec 2 animateurs qui se retrouvent pour discuter des outils et des techniques pour le développement moderne de site web et d’application web.
  Retrouvez-nous régulièrement pour parler de sujets variés tels que la JAMStack, l’accessibilité, l’écoconception, React JS, Vue JS et des retours d’expériences sur des implémentations.
  Également, des débats autour de sujets polémiques tels que la communication entre développeurs/designers ou comment avoir un discours compréhensible par les clients.
  Nous serons accompagnés de temps en temps par des invités experts dans leur domaine pour approfondir un sujet et avoir des retours d’expériences.
  Faites-nous vos retours par mail sur <a href="mailto:info@slash-podcast.fr">info@slash-podcast.fr</a>
  ]]></description><link
    >https://slash-podcast.fr</link><image><url
      >https://slash-podcast.fr/new-double-slash.jpg</url><title
      >Double Slash</title><link
      >https://slash-podcast.fr</link></image><generator
    >RSS for Node</generator><lastBuildDate
    >Thu, 30 Jun 2022 03:12:03 GMT</lastBuildDate><atom:link
      href="https://slash-podcast.fr/pocast-rss-feed.xml"
      rel="self"
      type="application/rss+xml"
    /><author><![CDATA[Alex Duval/Patrick Faramaz]]></author><pubDate
    >Wed, 01 Apr 2020 10:00:00 GMT</pubDate><copyright
    ><![CDATA[Copyright © 2021 Double Slash]]></copyright><language
    ><![CDATA[fr-FR]]></language><managingEditor
    ><![CDATA[info@slash-podcast.fr]]></managingEditor><webMaster
    ><![CDATA[info@slash-podcast.fr]]></webMaster><docs
    >https://help.apple.com/itc/podcasts_connect/#/itcb54353390</docs><ttl
    >60</ttl><category><![CDATA[Technology]]></category><itunes:title
    >Double Slash</itunes:title><itunes:subtitle
    >Le podcast sur le développement web moderne</itunes:subtitle><itunes:summary
    >Double Slash, un podcast sur le développement web. Retrouvez-nous régulièrement pour parler de sujets variés tels que la JAMStack, l’accessibilité, l’écoconception, React.js, Vue.js, Next.js, Nuxt.js, le CSS et des retours d’expériences sur des implémentations.</itunes:summary><itunes:type
    >episodic</itunes:type><itunes:explicit>no</itunes:explicit><itunes:author
    >Alex Duval/Patrick Faramaz</itunes:author><itunes:owner><itunes:name
      >Double Slash</itunes:name><itunes:email
      >info@slash-podcast.fr</itunes:email></itunes:owner><itunes:image
      href="https://slash-podcast.fr/new-double-slash.jpg"
    /><itunes:category text="Technology" /><googleplay:author
    >Alex Duval/Patrick Faramaz</googleplay:author><googleplay:description
    >Double Slash, un podcast sur le développement web. Retrouvez-nous régulièrement pour parler de sujets variés tels que la JAMStack, l’accessibilité, l’écoconception, React.js, Vue.js, Next.js, Nuxt.js, le CSS et des retours d’expériences sur des implémentations.</googleplay:description><googleplay:explicit
    >no</googleplay:explicit><item><title
      ><![CDATA[Azure Static Web Apps avec Wassim Chegham]]></title><description
      ><![CDATA[<p>Dans cet épisode, nous allons parler du nouveau service de Microsoft avec notre invité, Wassim Chegham.
Présenté en mai 2020, Azure static Web Apps permet d'héberger vos projets destinés à être compilés pour générer un site ou une web app statique.</p>
<p>Il suffit de créer votre projet avec un outil tel que Nuxt, Next, Gatsby ou Eleventy. Ensuite, vous l'hébergez sur GitHub. Puis, vous déclarez votre repository Github sur votre compte Azure et ce dernier, se chargera de compiler et publier automatiquement votre projet en ligne.</p>
<p>Vous avez aussi la possibilité d'utiliser des fonctions dans votre projet que vous pourrez appeler directement de votre web app pour vous connecter à une API ou réceptionner les data d'un formulaire par exemple.</p>
<p>Azure Static Web Apps permet également la gestion des authentifications dans votre application statique.</p>
<p>Actuellement, le service Azure Static Web Apps est en "preview". Durant cette période de présentation, le service est gratuit.</p>
<p>Nous vous laissons découvrir le service plus en détail en écoutant l'épisode numéro 16 avec notre invité:</p>
<p>Wassim Chegham, <strong>Senior Developer Advocate spécialisé JavaScript</strong>
<a href="https://github.com/manekinekko">https://github.com/manekinekko</a> et <a href="http://wassim.dev">http://wassim.dev</a></p>
<h2>Les liens de l'épisode :</h2>
<ul>
<li><a href="https://azure.microsoft.com/fr-fr/services/app-service/static/?WT.mc_id=javascript-00000-wachegha">Azure static Web Apps</a></li>
<li><a href="https://docs.microsoft.com/fr-fr/azure/static-web-apps/overview?WT.mc_id=javascript-00000-wachegha">Documentation Azure static Web Apps</a></li>
<li><a href="https://docs.microsoft.com/fr-fr/azure/azure-functions/create-first-function-vs-code-node?WT.mc_id=javascript-00000-wachegha">Documentation serverless</a></li>
<li><a href="https://docs.microsoft.com/fr-fr/learn/paths/build-javascript-applications-nodejs/?WT.mc_id=javascript-00000-wachegha">Cours gratuit sur Node JS</a></li>
<li><a href="https://github.com/manekinekko/swa-emulator">Static Web Apps Emulator</a></li>
<li><a href="https://ecologi.com/wassimchegham?r=5facf70521660a001d024120">Acheter un arbre sur Ecologi</a></li>
</ul>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/azure-static-web-app/</link><guid
        isPermaLink="false"
      >e3a620e47a0c34dcf64503211d1b5ea6</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Mon, 07 Dec 2020 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_016_swa.mp3"
        length="81665857"
        type="audio/mpeg"
      /><itunes:title
      >Azure Static Web Apps avec Wassim Chegham</itunes:title><itunes:subtitle
      /><itunes:season>1</itunes:season><itunes:episode
      >16</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Dans cet épisode, nous allons parler du nouveau service de Microsoft avec notre invité, Wassim Chegham.
Présenté en mai 2020, Azure static Web Apps permet d&apos;héberger vos projets destinés à être compilés pour générer un site ou une web app statique. Il suffit de créer votre projet avec un outil tel que Nuxt, Next, Gatsby ou Eleventy. Ensuite, vous l&apos;hébergez sur GitHub. Puis, vous déclarez votre repository Github sur votre compte Azure et ce dernier, se chargera de compiler et publier automatiquement votre projet en ligne. Vous avez aussi la possibilité d&apos;utiliser des fonctions dans votre projet que vous pourrez appeler directement de votre web app pour vous connecter à une API ou réceptionner les data d&apos;un formulaire par exemple. Azure Static Web Apps permet également la gestion des authentifications dans votre application statique. Actuellement, le service Azure Static Web Apps est en &quot;preview&quot;. Durant cette période de présentation, le service est gratuit. Nous vous laissons découvrir le service plus en détail en écoutant l&apos;épisode numéro 16 avec notre invité: Wassim Chegham, Senior Developer Advocate spécialisé JavaScript
https://github.com/manekinekko et http://wassim.dev Les liens de l&apos;épisode : Azure static Web Apps Documentation Azure static Web Apps Documentation serverless Cours gratuit sur Node JS Static Web Apps Emulator Acheter un arbre sur Ecologi Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Dans cet épisode, nous allons parler du nouveau service de Microsoft avec notre invité, Wassim Chegham.
Présenté en mai 2020, Azure static Web Apps permet d&apos;héberger vos projets destinés à être compilés pour générer un site ou une web app statique. Il suffit de créer votre projet avec un outil tel que Nuxt, Next, Gatsby ou Eleventy. Ensuite, vous l&apos;hébergez sur GitHub. Puis, vous déclarez votre repository Github sur votre compte Azure et ce dernier, se chargera de compiler et publier automatiquement votre projet en ligne. Vous avez aussi la possibilité d&apos;utiliser des fonctions dans votre projet que vous pourrez appeler directement de votre web app pour vous connecter à une API ou réceptionner les data d&apos;un formulaire par exemple. Azure Static Web Apps permet également la gestion des authentifications dans votre application statique. Actuellement, le service Azure Static Web Apps est en &quot;preview&quot;. Durant cette période de présentation, le service est gratuit. Nous vous laissons découvrir le service plus en détail en écoutant l&apos;épisode numéro 16 avec notre invité: Wassim Chegham, Senior Developer Advocate spécialisé JavaScript
https://github.com/manekinekko et http://wassim.dev Les liens de l&apos;épisode : Azure static Web Apps Documentation Azure static Web Apps Documentation serverless Cours gratuit sur Node JS Static Web Apps Emulator Acheter un arbre sur Ecologi Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >3401</itunes:duration></item><item><title
      ><![CDATA[Back to school]]></title><description
      ><![CDATA[<h2>Un épisode de rentrée en format "news". Nous revenons sur les annonces qui ont eu lieu durant l'été 2021.</h2>
<h2>GitHub Copilot</h2>
<blockquote>
<p>Du pair coding avec une AI !</p>
</blockquote>
<p>Principalement disponible sur VSCode, <strong>GitHub Copilot</strong> est une assistance formée sur des milliards de lignes de code public. Elle complète votre code au fur et à mesure que vous écrivez.
Elle apprend en analysant votre code et vous suggère la complétion de votre code. Vous êtes libre d'accepter ou non la suggestion.
Encore en version technical preview, vous pouvez l'essayer en allant sur cette page : <a href="https://copilot.github.com/">https://copilot.github.com/</a></p>
<h2>GitHub Dev</h2>
<blockquote>
<p>Passer en mode “édition” grâce avec la touche "." !</p>
</blockquote>
<p>Quand vous êtes dans un repository sur github.com, il vous suffit d'appuyer sur la touche "." de votre clavier pour passer sur github.dev et éditer le projet sur un VSCode en ligne.
Vous pouvez importer vos settings et travailler comme si vous étiez dans votre VSCode installé sur votre ordinateur.
<strong>Les notes de cet épisode sont créées directement sur github.dev</strong></p>
<h2>Alpine JS 3</h2>
<blockquote>
<p>La version de la maturité !</p>
</blockquote>
<p>Fin mai, c'est déroulé l'alpine day. <a href="https://alpineday.com/watch">https://alpineday.com/watch</a>.Nous vous recommandons de visionner les différentes présentations.
Suite à ça, la version 3 d'AlpineJS est sortie. Dans la foulée, un nouveau site et une nouvelle documentation.</p>
<h2>Petite Vue</h2>
<blockquote>
<p>WTF Evan !</p>
</blockquote>
<p>Quand Evan You fait un side project, ça donne <a href="https://github.com/vuejs/petite-vue">petite-vue</a>.
Directement inspiré d'AlpineJS, petite vue (avec l'accent) est une petite librairie qui pèse seulement 6Kb.
Une grosse majorité des méthodes provenant de VueJS sont disponibles. Elle permet de créer des éléments interactifs dans une page web sans devoir installer une plus grosse librairie.</p>
<h2>Vue 3</h2>
<blockquote>
<p>La bêta que l'on utilise tous en prod !</p>
</blockquote>
<p>La version 3.2 vient de sortir avec des nouveautés et des grosses améliorations de performance.
Lire ici le post de la version 3.2 : <a href="https://blog.vuejs.org/posts/vue-3.2.html">https://blog.vuejs.org/posts/vue-3.2.html</a></p>
<h2>Nuxt 3</h2>
<blockquote>
<p>Plus c'est long, plus c'est bon !</p>
</blockquote>
<p>La version 3.2 vient de sortir avec des nouveautés et 	L'attente est longue, mais le travail est immense pour l'équipe de <a href="https://github.com/nuxtlabs">Nuxt Lab</a>.
La conf Nuxt Nation vient de passer avec une présentation et la timeline du travail pour sortir la version 3 de Nuxt.
La première version bêta publique est annoncée pour le 12 octobre 2021.
Le travail est immense pour l'équipe, car en plus de réécrire totalement la version 3 en TypeScript, il faut maintenir la version 2 et sortir des nouveaux modules. À l'image de <a href="https://image.nuxtjs.org/">Nuxt Image</a> sorite courant juin 2021 !
En quelques lignes, la version 3 de Nuxt, c'est :</p>
<ul>
<li>Compatible Vue 3</li>
<li>Très compatible avec TypeScript (comme Vue 3)</li>
<li>Un nouveau moteur Nitro, très performant et capable de faire de l'incrémentale.</li>
<li>Un bundle de prod hyper performant et cross plateforme.</li>
</ul>
<h2>Strapi 4</h2>
<blockquote>
<p>On reprend tout depuis le début !</p>
</blockquote>
<p>La version 4 de Strapi est en développement. Une grosse majorité de fonctionnalités est repensée.
Voici les principales évolutions :</p>
<ul>
<li>Nouvelle interface d'admin</li>
<li>Nouveau système de plugin</li>
<li>Nouveau Database Layer</li>
<li>Nouvelle API REST et GraphQL</li>
<li>Système de migration</li>
<li>Système de hook pour étendre Strapi</li>
</ul>
<p>Au-delà de la version 4, Strapi a annoncé un changement de pricing :
<a href="https://strapi.io/blog/introducing-user-based-pricing-for-strapi-enterprise-edition">https://strapi.io/blog/introducing-user-based-pricing-for-strapi-enterprise-edition</a></p>
<h2>Astro JS</h2>
<blockquote>
<p>Faire l'inverse des autres !</p>
</blockquote>
<p>Astro est un générateur de site statique qui par défaut, ne met aucun JavaScript dans le navigateur.
Vous pouvez développer vos templates avec le langage ".astro" mais aussi avec vos frameworks JS préférés : lit, Vue, React, Preact, Svelte ou Solid. Astro compile sans problème avec plusieurs frameworks.
En cas d'utilisation d'un component créé avec Vue par exemple, il est rendu par défaut sans interaction, juste en HTML. Ensuite, vous pouvez choisir différents modes d'hydratation pour le rendre interactif : load, visible, idle, only.
Il gère également tous les assets (css, etc.).
Encore en version bêta, il semble très prometteur.</p>
<h2>Outil recommandé</h2>
<ul>
<li><a href="https://fig.io/">Fig</a></li>
</ul>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/back-to-school/</link><guid
        isPermaLink="false"
      >8c99b7f6333d2d920abfa786ffb827c9</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Fri, 17 Sep 2021 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_027_news921.mp3"
        length="89247480"
        type="audio/mpeg"
      /><itunes:title>Back to school</itunes:title><itunes:subtitle
      >Un épisode de rentrée en format &quot;news&quot;. Nous revenons sur les annonces qui ont eu lieu durant l&apos;été 2021.</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>27</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Un épisode de rentrée en format &quot;news&quot;. Nous revenons sur les annonces qui ont eu lieu durant l&apos;été 2021. GitHub Copilot Du pair coding avec une AI ! Principalement disponible sur VSCode, GitHub Copilot est une assistance formée sur des milliards de lignes de code public. Elle complète votre code au fur et à mesure que vous écrivez.
Elle apprend en analysant votre code et vous suggère la complétion de votre code. Vous êtes libre d&apos;accepter ou non la suggestion.
Encore en version technical preview, vous pouvez l&apos;essayer en allant sur cette page : https://copilot.github.com/ GitHub Dev Passer en mode “édition” grâce avec la touche &quot;.&quot; ! Quand vous êtes dans un repository sur github.com, il vous suffit d&apos;appuyer sur la touche &quot;.&quot; de votre clavier pour passer sur github.dev et éditer le projet sur un VSCode en ligne.
Vous pouvez importer vos settings et travailler comme si vous étiez dans votre VSCode installé sur votre ordinateur.
Les notes de cet épisode sont créées directement sur github.dev Alpine JS 3 La version de la maturité ! Fin mai, c&apos;est déroulé l&apos;alpine day. https://alpineday.com/watch.Nous vous recommandons de visionner les différentes présentations.
Suite à ça, la version 3 d&apos;AlpineJS est sortie. Dans la foulée, un nouveau site et une nouvelle documentation. Petite Vue WTF Evan ! Quand Evan You fait un side project, ça donne petite-vue.
Directement inspiré d&apos;AlpineJS, petite vue (avec l&apos;accent) est une petite librairie qui pèse seulement 6Kb.
Une grosse majorité des méthodes provenant de VueJS sont disponibles. Elle permet de créer des éléments interactifs dans une page web sans devoir installer une plus grosse librairie. Vue 3 La bêta que l&apos;on utilise tous en prod ! La version 3.2 vient de sortir avec des nouveautés et des grosses améliorations de performance.
Lire ici le post de la version 3.2 : https://blog.vuejs.org/posts/vue-3.2.html Nuxt 3 Plus c&apos;est long, plus c&apos;est bon ! La version 3.2 vient de sortir avec des nouveautés et 	L&apos;attente est longue, mais le travail est immense pour l&apos;équipe de Nuxt Lab.
La conf Nuxt Nation vient de passer avec une présentation et la timeline du travail pour sortir la version 3 de Nuxt.
La première version bêta publique est annoncée pour le 12 octobre 2021.
Le travail est immense pour l&apos;équipe, car en plus de réécrire totalement la version 3 en TypeScript, il faut maintenir la version 2 et sortir des nouveaux modules. À l&apos;image de Nuxt Image sorite courant juin 2021 !
En quelques lignes, la version 3 de Nuxt, c&apos;est : Compatible Vue 3 Très compatible avec TypeScript (comme Vue 3) Un nouveau moteur Nitro, très performant et capable de faire de l&apos;incrémentale. Un bundle de prod hyper performant et cross plateforme. Strapi 4 On reprend tout depuis le début ! La version 4 de Strapi est en développement. Une grosse majorité de fonctionnalités est repensée.
Voici les principales évolutions : Nouvelle interface d&apos;admin Nouveau système de plugin Nouveau Database Layer Nouvelle API REST et GraphQL Système de migration Système de hook pour étendre Strapi Au-delà de la version 4, Strapi a annoncé un changement de pricing :
 https://strapi.io/blog/introducing-user-based-pricing-for-strapi-enterprise-edition Astro JS Faire l&apos;inverse des autres ! Astro est un générateur de site statique qui par défaut, ne met aucun JavaScript dans le navigateur.
Vous pouvez développer vos templates avec le langage &quot;.astro&quot; mais aussi avec vos frameworks JS préférés : lit, Vue, React, Preact, Svelte ou Solid. Astro compile sans problème avec plusieurs frameworks.
En cas d&apos;utilisation d&apos;un component créé avec Vue par exemple, il est rendu par défaut sans interaction, juste en HTML. Ensuite, vous pouvez choisir différents modes d&apos;hydratation pour le rendre interactif : load, visible, idle, only.
Il gère également tous les assets (css, etc.).
Encore en version bêta, il semble très prometteur. Outil recommandé Fig Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Un épisode de rentrée en format &quot;news&quot;. Nous revenons sur les annonces qui ont eu lieu durant l&apos;été 2021. GitHub Copilot Du pair coding avec une AI ! Principalement disponible sur VSCode, GitHub Copilot est une assistance formée sur des milliards de lignes de code public. Elle complète votre code au fur et à mesure que vous écrivez.
Elle apprend en analysant votre code et vous suggère la complétion de votre code. Vous êtes libre d&apos;accepter ou non la suggestion.
Encore en version technical preview, vous pouvez l&apos;essayer en allant sur cette page : https://copilot.github.com/ GitHub Dev Passer en mode “édition” grâce avec la touche &quot;.&quot; ! Quand vous êtes dans un repository sur github.com, il vous suffit d&apos;appuyer sur la touche &quot;.&quot; de votre clavier pour passer sur github.dev et éditer le projet sur un VSCode en ligne.
Vous pouvez importer vos settings et travailler comme si vous étiez dans votre VSCode installé sur votre ordinateur.
Les notes de cet épisode sont créées directement sur github.dev Alpine JS 3 La version de la maturité ! Fin mai, c&apos;est déroulé l&apos;alpine day. https://alpineday.com/watch.Nous vous recommandons de visionner les différentes présentations.
Suite à ça, la version 3 d&apos;AlpineJS est sortie. Dans la foulée, un nouveau site et une nouvelle documentation. Petite Vue WTF Evan ! Quand Evan You fait un side project, ça donne petite-vue.
Directement inspiré d&apos;AlpineJS, petite vue (avec l&apos;accent) est une petite librairie qui pèse seulement 6Kb.
Une grosse majorité des méthodes provenant de VueJS sont disponibles. Elle permet de créer des éléments interactifs dans une page web sans devoir installer une plus grosse librairie. Vue 3 La bêta que l&apos;on utilise tous en prod ! La version 3.2 vient de sortir avec des nouveautés et des grosses améliorations de performance.
Lire ici le post de la version 3.2 : https://blog.vuejs.org/posts/vue-3.2.html Nuxt 3 Plus c&apos;est long, plus c&apos;est bon ! La version 3.2 vient de sortir avec des nouveautés et 	L&apos;attente est longue, mais le travail est immense pour l&apos;équipe de Nuxt Lab.
La conf Nuxt Nation vient de passer avec une présentation et la timeline du travail pour sortir la version 3 de Nuxt.
La première version bêta publique est annoncée pour le 12 octobre 2021.
Le travail est immense pour l&apos;équipe, car en plus de réécrire totalement la version 3 en TypeScript, il faut maintenir la version 2 et sortir des nouveaux modules. À l&apos;image de Nuxt Image sorite courant juin 2021 !
En quelques lignes, la version 3 de Nuxt, c&apos;est : Compatible Vue 3 Très compatible avec TypeScript (comme Vue 3) Un nouveau moteur Nitro, très performant et capable de faire de l&apos;incrémentale. Un bundle de prod hyper performant et cross plateforme. Strapi 4 On reprend tout depuis le début ! La version 4 de Strapi est en développement. Une grosse majorité de fonctionnalités est repensée.
Voici les principales évolutions : Nouvelle interface d&apos;admin Nouveau système de plugin Nouveau Database Layer Nouvelle API REST et GraphQL Système de migration Système de hook pour étendre Strapi Au-delà de la version 4, Strapi a annoncé un changement de pricing :
 https://strapi.io/blog/introducing-user-based-pricing-for-strapi-enterprise-edition Astro JS Faire l&apos;inverse des autres ! Astro est un générateur de site statique qui par défaut, ne met aucun JavaScript dans le navigateur.
Vous pouvez développer vos templates avec le langage &quot;.astro&quot; mais aussi avec vos frameworks JS préférés : lit, Vue, React, Preact, Svelte ou Solid. Astro compile sans problème avec plusieurs frameworks.
En cas d&apos;utilisation d&apos;un component créé avec Vue par exemple, il est rendu par défaut sans interaction, juste en HTML. Ensuite, vous pouvez choisir différents modes d&apos;hydratation pour le rendre interactif : load, visible, idle, only.
Il gère également tous les assets (css, etc.).
Encore en version bêta, il semble très prometteur. Outil recommandé Fig Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >3717</itunes:duration></item><item><title
      ><![CDATA[Bit.dev avec Olivier Combe]]></title><description
      ><![CDATA[<h2>Support de l'épisode</h2>
<p>Indy, la comptabilité des indépendants tout simplement. Synchronisation bancaire sécurisée, déclarations fiscales préremplies et télétransmises, support client avec réponse sous 4 minutes.</p>
<p>Obtenez 2 mois gratuits avec notre code sponsor. <a href="https://bit.ly/3dojgDo">Cliquez sur ici pour profiter du code</a></p>
<h2>Dans cet épisode, nous avons le plaisir de recevoir Olivier Combe pour parler du service Bitdev. Un service qui vous facilite le quotidien pour la gestion de vos components.</h2>
<h3>Retrouvez la vidéo de l'enregistrement sur <a href="https://www.youtube.com/watch?v=3TFpuKHMdb4">YouTube</a> et <a href="https://www.twitch.tv/doubleslashpodcast/video/1221756050">Twitch</a></h3>
<p><a href="https://bit.dev/">Bit.dev</a> est un outil pour le développement en mode component driven (CDD).
Le “component-driven development” est une méthode qui consiste à développer indépendamment chaque components. Les components sont autonomes et peuvent être intégrés dans une app par la suite.</p>
<p>À l’instar de <a href="https://storybook.js.org/">Storybook</a>, bien connu des développeurs React (Storybook est maintenant compatible sur plusieurs frameworks), Bit.dev permet de visualiser les components dans un playground.</p>
<p>Mais le service offre des fonctionnalités beaucoup plus poussées :</p>
<ul>
<li>Il permet de partager les components entre différents projets facilement, car ils deviennent installables comme des dépendances.</li>
<li>Il est possible de gérer des versions de components également et même de visualiser les versions sur l’interface.</li>
</ul>
<p>C’est donc un système bien pratique pour gérer un design système et une bibliothèque de composant dans une entreprise.</p>
<p>Le service propose un compte “free” avec un seul scope privé et les autres en publics. Ensuite, les versions payantes des scopes privées unlimited.</p>
<h2>Angular 13</h2>
<p>Dans cet épisode, nous profitons de l’expertise d’olivier pour parler rapidement d’Angular qui vient de sortir dans sa version 13 :</p>
<ul>
<li>changement du moteur de vue par défaut (Ivy)</li>
<li>changement du package format</li>
<li>update de l'API component</li>
<li>arrêt du support de IE11</li>
</ul>
<h2>Pour retrouver notre invité</h2>
<ul>
<li>Olivier Combe : <a href="https://twitter.com/OCombe">@OCombe</a></li>
<li>GitHub Olivier : <a href="https://github.com/ocombe">https://github.com/ocombe</a></li>
</ul>
<h2>Les liens de l'épisode</h2>
<ul>
<li><a href="https://bit.dev/">https://bit.dev/</a></li>
<li><a href="https://twitter.com/bitdev_?s=20">@bitdev</a></li>
<li><a href="https://blog.angular.io/angular-v13-is-now-available-cce66f7bc296">Angular 13</a></li>
<li><a href="http://www.ngx-translate.com/">NGX Translate</a></li>
</ul>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>
<BlocBorder>
  <strong>Support de l'épisode</strong><br /><br />
  Indy, la comptabilité des indépendants tout simplement. Synchronisation bancaire sécurisée, déclarations fiscales préremplies et télétransmises, support client avec réponse sous 4 minutes.<br /><br />
  Obtenez 2 mois gratuits avec notre code sponsor. <a href="https://bit.ly/3dojgDo" target="_blank">Cliquez sur ici pour profiter du code</a>
</BlocBorder>]]></description><link
      >https://slash-podcast.fr/podcasts/bit-dev-olivier-combe/</link><guid
        isPermaLink="false"
      >e8fead5a9f5e8f1d4ae779d654509d3b</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Mon, 06 Dec 2021 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_030_bit.mp3"
        length="89966919"
        type="audio/mpeg"
      /><itunes:title>Bit.dev avec Olivier Combe</itunes:title><itunes:subtitle
      >Dans cet épisode, nous avons le plaisir de recevoir Olivier Combe pour parler du service Bitdev.</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>30</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Support de l&apos;épisode Indy, la comptabilité des indépendants tout simplement. Synchronisation bancaire sécurisée, déclarations fiscales préremplies et télétransmises, support client avec réponse sous 4 minutes. Obtenez 2 mois gratuits avec notre code sponsor. Cliquez sur ici pour profiter du code Dans cet épisode, nous avons le plaisir de recevoir Olivier Combe pour parler du service Bitdev. Un service qui vous facilite le quotidien pour la gestion de vos components. Retrouvez la vidéo de l&apos;enregistrement sur YouTube et Twitch Bit.dev est un outil pour le développement en mode component driven (CDD).
Le “component-driven development” est une méthode qui consiste à développer indépendamment chaque components. Les components sont autonomes et peuvent être intégrés dans une app par la suite. À l’instar de Storybook, bien connu des développeurs React (Storybook est maintenant compatible sur plusieurs frameworks), Bit.dev permet de visualiser les components dans un playground. Mais le service offre des fonctionnalités beaucoup plus poussées : Il permet de partager les components entre différents projets facilement, car ils deviennent installables comme des dépendances. Il est possible de gérer des versions de components également et même de visualiser les versions sur l’interface. C’est donc un système bien pratique pour gérer un design système et une bibliothèque de composant dans une entreprise. Le service propose un compte “free” avec un seul scope privé et les autres en publics. Ensuite, les versions payantes des scopes privées unlimited. Angular 13 Dans cet épisode, nous profitons de l’expertise d’olivier pour parler rapidement d’Angular qui vient de sortir dans sa version 13 : changement du moteur de vue par défaut (Ivy) changement du package format update de l&apos;API component arrêt du support de IE11 Pour retrouver notre invité Olivier Combe : @OCombe GitHub Olivier : https://github.com/ocombe Les liens de l&apos;épisode https://bit.dev/ @bitdev Angular 13 NGX Translate Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Support de l&apos;épisode Indy, la comptabilité des indépendants tout simplement. Synchronisation bancaire sécurisée, déclarations fiscales préremplies et télétransmises, support client avec réponse sous 4 minutes. Obtenez 2 mois gratuits avec notre code sponsor. Cliquez sur ici pour profiter du code Dans cet épisode, nous avons le plaisir de recevoir Olivier Combe pour parler du service Bitdev. Un service qui vous facilite le quotidien pour la gestion de vos components. Retrouvez la vidéo de l&apos;enregistrement sur YouTube et Twitch Bit.dev est un outil pour le développement en mode component driven (CDD).
Le “component-driven development” est une méthode qui consiste à développer indépendamment chaque components. Les components sont autonomes et peuvent être intégrés dans une app par la suite. À l’instar de Storybook, bien connu des développeurs React (Storybook est maintenant compatible sur plusieurs frameworks), Bit.dev permet de visualiser les components dans un playground. Mais le service offre des fonctionnalités beaucoup plus poussées : Il permet de partager les components entre différents projets facilement, car ils deviennent installables comme des dépendances. Il est possible de gérer des versions de components également et même de visualiser les versions sur l’interface. C’est donc un système bien pratique pour gérer un design système et une bibliothèque de composant dans une entreprise. Le service propose un compte “free” avec un seul scope privé et les autres en publics. Ensuite, les versions payantes des scopes privées unlimited. Angular 13 Dans cet épisode, nous profitons de l’expertise d’olivier pour parler rapidement d’Angular qui vient de sortir dans sa version 13 : changement du moteur de vue par défaut (Ivy) changement du package format update de l&apos;API component arrêt du support de IE11 Pour retrouver notre invité Olivier Combe : @OCombe GitHub Olivier : https://github.com/ocombe Les liens de l&apos;épisode https://bit.dev/ @bitdev Angular 13 NGX Translate Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >3747</itunes:duration></item><item><title
      ><![CDATA[Audit des Google core web vitals]]></title><description
      ><![CDATA[<p>En juin 2021, Google introduit de nouveaux indicateurs de performance pour les sites web. Ils annoncent qu'ils sont désormais pris en compte dans les critères pour le classement dans le résultat de recherches.</p>
<p>On constate une panique générale des propriétaires de site web alors que Google avait prévenu depuis un moment que la vitesse de chargement serait de plus en plus prise en compte.</p>
<p>Si vous êtes propriétaire d'un site WordPress créé avec un builder, vous pouvez vous inquiéter ! Mais attention, cela peut toucher tous les sites. N'oubliez jamais, rien n'est automatique et votre site sera rapide uniquement si vous faites en sorte qu'il le soit !</p>
<p>Dans cet épisode, nous détaillons les 3 indicateurs et comment améliorer le score d’un site sur chaque critère :</p>
<ul>
<li>Largest Contentful Paint (LCP)</li>
<li>First Input Delay (FID)</li>
<li>Cumulative Layout Shift (CLS)</li>
</ul>
<h2>1 - Largest Contentful Paint (LCP)</h2>
<p>Moins de 2.5 secs pour charger le plus gros élément visible dans le viewport.</p>
<p>Une image, une image dans un svg, une vidéo, élément avec background-image, élément avec du texte.
Pour la majorité des sites, c'est une image (hero image)</p>
<p>Pour trouver l'élément, Dev Tools (chrome) > Preformance (run) > dans la timeline "Timing" trouver le bloc "LCP"</p>
<h3>Serveur</h3>
<ul>
<li class="task-list-item"><input type="checkbox" disabled>  optimiser la réponse du serveur (cache, code..)</li>
</ul>
<h3>Images</h3>
<ul>
<li class="task-list-item"><input type="checkbox" disabled>  les images doivent être responsive (afficher différentes images en fonction de la largeur du device).</li>
<li class="task-list-item"><input type="checkbox" disabled>  limiter les formats des images, notamment pour les grands formats</li>
<li class="task-list-item"><input type="checkbox" disabled>  réduire le poids des images et utiliser webp si possible</li>
<li class="task-list-item"><input type="checkbox" disabled>  utiliser loading sur les images pour différer le chargement</li>
</ul>
<h3>Fonts</h3>
<ul>
<li class="task-list-item"><input type="checkbox" disabled>  limiter et optimiser les polices</li>
<li class="task-list-item"><input type="checkbox" disabled>  utiliser "font-display: swap" et avoir des polices de fallback</li>
</ul>
<h3>Scripts tiers</h3>
<ul>
<li class="task-list-item"><input type="checkbox" disabled>  limiter les scripts tiers (GA, etc..)</li>
</ul>
<h3>optimisations</h3>
<ul>
<li class="task-list-item"><input type="checkbox" disabled>  réduire le poids des fichiers JS</li>
<li class="task-list-item"><input type="checkbox" disabled>  réduire le poids des fichiers CSS</li>
<li class="task-list-item"><input type="checkbox" disabled>  supprimer le CSS inutilisé</li>
<li class="task-list-item"><input type="checkbox" disabled>  utiliser la technique du critical CSS</li>
<li class="task-list-item"><input type="checkbox" disabled>  defer chargement du CSS si possible. Pour les éléments non visibles.</li>
</ul>
<pre><code>for(...)
var link = document.createElement('link');
link.href = ...
link.type = "text/css"
...
document.getElementsByTagName('head')[0].appendChild(link)
</code></pre>
<ul>
<li class="task-list-item"><input type="checkbox" disabled>  async ou defer sur les scripts non nécessaires au chargement</li>
</ul>
<h3>Bonus</h3>
<ul>
<li class="task-list-item"><input type="checkbox" disabled>  utiliser les preconnect</li>
<li class="task-list-item"><input type="checkbox" disabled>  preload les éléments importants (image hero, fonts)</li>
</ul>
<h2>2 - First Input Delay (FID)</h2>
<p>Le temps pour que la page soit utilisable (clique sur un lien ou un bouton par exemple)
Principale coupable, les fichiers JS. Le poids et le temps de parsing.</p>
<ul>
<li class="task-list-item"><input type="checkbox" disabled>  réduire la taille des fichiers JS</li>
</ul>
<p>Pour limiter le temps de parsing des fichiers.</p>
<ul>
<li class="task-list-item"><input type="checkbox" disabled>  limiter les scripts tiers (GA, etc..)</li>
</ul>
<p>Pour limiter les requêtes et le temps de parsing des fichiers.</p>
<h2>3 - Cumulative Layout Shift (CLS)</h2>
<p>Dev Tools (chrome) > Performance (run) > Dans timeline "experience", trouver le bloc "Layout Shift"</p>
<p>Stabilité des éléments dans la page. Insertions de pub, de bannière ou une hydratation qui est longue peut décaler le contenu. Attention aux images qui peuvent décaler le contenu une fois chargé.</p>
<ul>
<li class="task-list-item"><input type="checkbox" disabled>  définir la taille des images et des vidéos. (16:9, height * 16/9)</li>
</ul>
<pre><code>&#x3C;style>
  img {
    width: 100%;
    height: auto;
    // aspect-ratio: 1/1;
    aspect-ratio: attr(width) / attr(height);
  }
&#x3C;/style>
&#x3C;img src="hero_image.jpg" alt="" width="500" height="500">
</code></pre>
<ul>
<li class="task-list-item"><input type="checkbox" disabled>  ne pas insérer des éléments entre d'autres éléments au chargement de la page (pub, banner)</li>
</ul>
<p>Réserver l'espace pour les éléments dynamiques, utiliser des skeletons pour les images (bloc bg gris par exemple)</p>
<ul>
<li class="task-list-item"><input type="checkbox" disabled>  définir la place pour les éléments "embed" (pub, vidéo, etc..)</li>
</ul>
<h3>Les liens de l'épisode :</h3>
<ul>
<li><a href="https://www.devisedlabs.com/blog/largest-contentful-paint-lcp-hack">Un hack plutôt efficace</a></li>
<li><a href="https://web.dev/vitals/">https://web.dev/vitals/</a></li>
<li><a href="https://developers.google.com/speed/pagespeed/insights/?hl=fr">PageSpeed Insights</a></li>
<li><a href="https://gtmetrix.com/">https://gtmetrix.com/</a></li>
<li><a href="https://developers.google.com/web/tools/lighthouse">Ligthouse</a></li>
</ul>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/core-web-vitals/</link><guid
        isPermaLink="false"
      >53da8f3c8d7ba2c6130e200960c65de3</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Wed, 02 Jun 2021 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_024_audit.mp3"
        length="64391552"
        type="audio/mpeg"
      /><itunes:title
      >Audit des Google core web vitals</itunes:title><itunes:subtitle
      >Comment faire un audit des core web vitals en 2021 et comment améliorer le score d’un site sur chaque critère.</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>24</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >En juin 2021, Google introduit de nouveaux indicateurs de performance pour les sites web. Ils annoncent qu&apos;ils sont désormais pris en compte dans les critères pour le classement dans le résultat de recherches. On constate une panique générale des propriétaires de site web alors que Google avait prévenu depuis un moment que la vitesse de chargement serait de plus en plus prise en compte. Si vous êtes propriétaire d&apos;un site WordPress créé avec un builder, vous pouvez vous inquiéter ! Mais attention, cela peut toucher tous les sites. N&apos;oubliez jamais, rien n&apos;est automatique et votre site sera rapide uniquement si vous faites en sorte qu&apos;il le soit ! Dans cet épisode, nous détaillons les 3 indicateurs et comment améliorer le score d’un site sur chaque critère : Largest Contentful Paint (LCP) First Input Delay (FID) Cumulative Layout Shift (CLS) 1 - Largest Contentful Paint (LCP) Moins de 2.5 secs pour charger le plus gros élément visible dans le viewport. Une image, une image dans un svg, une vidéo, élément avec background-image, élément avec du texte.
Pour la majorité des sites, c&apos;est une image (hero image) Pour trouver l&apos;élément, Dev Tools (chrome) &gt; Preformance (run) &gt; dans la timeline &quot;Timing&quot; trouver le bloc &quot;LCP&quot; Serveur  optimiser la réponse du serveur (cache, code..) Images  les images doivent être responsive (afficher différentes images en fonction de la largeur du device).  limiter les formats des images, notamment pour les grands formats  réduire le poids des images et utiliser webp si possible  utiliser loading sur les images pour différer le chargement Fonts  limiter et optimiser les polices  utiliser &quot;font-display: swap&quot; et avoir des polices de fallback Scripts tiers  limiter les scripts tiers (GA, etc..) optimisations  réduire le poids des fichiers JS  réduire le poids des fichiers CSS  supprimer le CSS inutilisé  utiliser la technique du critical CSS  defer chargement du CSS si possible. Pour les éléments non visibles.  async ou defer sur les scripts non nécessaires au chargement Bonus  utiliser les preconnect  preload les éléments importants (image hero, fonts) 2 - First Input Delay (FID) Le temps pour que la page soit utilisable (clique sur un lien ou un bouton par exemple)
Principale coupable, les fichiers JS. Le poids et le temps de parsing.  réduire la taille des fichiers JS Pour limiter le temps de parsing des fichiers.  limiter les scripts tiers (GA, etc..) Pour limiter les requêtes et le temps de parsing des fichiers. 3 - Cumulative Layout Shift (CLS) Dev Tools (chrome) &gt; Performance (run) &gt; Dans timeline &quot;experience&quot;, trouver le bloc &quot;Layout Shift&quot; Stabilité des éléments dans la page. Insertions de pub, de bannière ou une hydratation qui est longue peut décaler le contenu. Attention aux images qui peuvent décaler le contenu une fois chargé.  définir la taille des images et des vidéos. (16:9, height * 16/9)  ne pas insérer des éléments entre d&apos;autres éléments au chargement de la page (pub, banner) Réserver l&apos;espace pour les éléments dynamiques, utiliser des skeletons pour les images (bloc bg gris par exemple)  définir la place pour les éléments &quot;embed&quot; (pub, vidéo, etc..) Les liens de l&apos;épisode : Un hack plutôt efficace https://web.dev/vitals/ PageSpeed Insights https://gtmetrix.com/ Ligthouse Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >En juin 2021, Google introduit de nouveaux indicateurs de performance pour les sites web. Ils annoncent qu&apos;ils sont désormais pris en compte dans les critères pour le classement dans le résultat de recherches. On constate une panique générale des propriétaires de site web alors que Google avait prévenu depuis un moment que la vitesse de chargement serait de plus en plus prise en compte. Si vous êtes propriétaire d&apos;un site WordPress créé avec un builder, vous pouvez vous inquiéter ! Mais attention, cela peut toucher tous les sites. N&apos;oubliez jamais, rien n&apos;est automatique et votre site sera rapide uniquement si vous faites en sorte qu&apos;il le soit ! Dans cet épisode, nous détaillons les 3 indicateurs et comment améliorer le score d’un site sur chaque critère : Largest Contentful Paint (LCP) First Input Delay (FID) Cumulative Layout Shift (CLS) 1 - Largest Contentful Paint (LCP) Moins de 2.5 secs pour charger le plus gros élément visible dans le viewport. Une image, une image dans un svg, une vidéo, élément avec background-image, élément avec du texte.
Pour la majorité des sites, c&apos;est une image (hero image) Pour trouver l&apos;élément, Dev Tools (chrome) &gt; Preformance (run) &gt; dans la timeline &quot;Timing&quot; trouver le bloc &quot;LCP&quot; Serveur  optimiser la réponse du serveur (cache, code..) Images  les images doivent être responsive (afficher différentes images en fonction de la largeur du device).  limiter les formats des images, notamment pour les grands formats  réduire le poids des images et utiliser webp si possible  utiliser loading sur les images pour différer le chargement Fonts  limiter et optimiser les polices  utiliser &quot;font-display: swap&quot; et avoir des polices de fallback Scripts tiers  limiter les scripts tiers (GA, etc..) optimisations  réduire le poids des fichiers JS  réduire le poids des fichiers CSS  supprimer le CSS inutilisé  utiliser la technique du critical CSS  defer chargement du CSS si possible. Pour les éléments non visibles.  async ou defer sur les scripts non nécessaires au chargement Bonus  utiliser les preconnect  preload les éléments importants (image hero, fonts) 2 - First Input Delay (FID) Le temps pour que la page soit utilisable (clique sur un lien ou un bouton par exemple)
Principale coupable, les fichiers JS. Le poids et le temps de parsing.  réduire la taille des fichiers JS Pour limiter le temps de parsing des fichiers.  limiter les scripts tiers (GA, etc..) Pour limiter les requêtes et le temps de parsing des fichiers. 3 - Cumulative Layout Shift (CLS) Dev Tools (chrome) &gt; Performance (run) &gt; Dans timeline &quot;experience&quot;, trouver le bloc &quot;Layout Shift&quot; Stabilité des éléments dans la page. Insertions de pub, de bannière ou une hydratation qui est longue peut décaler le contenu. Attention aux images qui peuvent décaler le contenu une fois chargé.  définir la taille des images et des vidéos. (16:9, height * 16/9)  ne pas insérer des éléments entre d&apos;autres éléments au chargement de la page (pub, banner) Réserver l&apos;espace pour les éléments dynamiques, utiliser des skeletons pour les images (bloc bg gris par exemple)  définir la place pour les éléments &quot;embed&quot; (pub, vidéo, etc..) Les liens de l&apos;épisode : Un hack plutôt efficace https://web.dev/vitals/ PageSpeed Insights https://gtmetrix.com/ Ligthouse Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >2681</itunes:duration></item><item><title
      ><![CDATA[Les plateformes e-commerce en 2020 avec Aurélien Lavorel]]></title><description
      ><![CDATA[<p>Dans ce nouvel épisode, nous allons faire un état des lieux des différentes plateformes et solutions e-commerce en 2020. Faut-il encore utiliser les CMS les plus connus (Magento, Prestashop, WooCommerce) ou passer sur des solutions SASS (Shopify..).
Notre invité, Aurélien Lavorel, est un expert e-commerce. Il nous donne ses avis sur les plateformes disponibles, vers quelle forme de plateforme va se diriger le e-commerce et des conseils pour lancer un e-commerce en 2020.</p>
<p>Aurélien Lavorel : <a href="https://lumao.eu/">https://lumao.eu/</a> et <a href="https://twitter.com/LavoWeb">@LavoWeb</a>
<strong>Développeur certifié #Magento et dirigant de <a href="https://twitter.com/LumaoSAS">@LumaoSAS</a></strong></p>
<h2>Les plateformes historiques</h2>
<ul>
<li><a href="https://magento.com/">https://magento.com/</a></li>
<li><a href="https://www.prestashop.com/fr">https://www.prestashop.com/fr</a></li>
<li><a href="https://woocommerce.com/">https://woocommerce.com/</a></li>
</ul>
<h2>Les nouveaux acteurs</h2>
<ul>
<li><a href="https://sylius.com/">https://sylius.com/</a></li>
<li><a href="https://www.salesforce.com/fr/products/commerce-cloud/overview/">https://www.salesforce.com/fr/products/commerce-cloud/overview/</a></li>
</ul>
<h2>Les solutions SASS</h2>
<ul>
<li><a href="https://www.shopify.fr/">https://www.shopify.fr/</a></li>
<li><a href="https://snipcart.com/fr">https://snipcart.com/fr</a></li>
<li><a href="https://swell.store/">https://swell.store/</a></li>
<li><a href="https://commercejs.com/">https://commercejs.com/</a></li>
</ul>
<h2>Les solutions Front Web App</h2>
<ul>
<li><a href="https://www.vuestorefront.io/">https://www.vuestorefront.io/</a></li>
<li><a href="https://www.front-commerce.com/">https://www.front-commerce.com/</a></li>
</ul>
<h2>Autres liens</h2>
<ul>
<li>React hook Stripe <a href="https://useshoppingcart.com/">https://useshoppingcart.com/</a></li>
<li>Liste de solutions e-commerce headless <a href="https://headlesscommerce.org/">https://headlesscommerce.org/</a></li>
<li>Exemple d'une solution GatsbyJS/Sylius <a href="https://github.com/Gatsbylius/Gatsbylius">https://github.com/Gatsbylius/Gatsbylius</a></li>
<li>Solution de tracking de livraison <a href="https://www.shipup.co/">https://www.shipup.co/</a></li>
</ul>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/e-commerce-state-2020/</link><guid
        isPermaLink="false"
      >3dff15e6db69929b871c5393172a91d8</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Wed, 21 Oct 2020 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_014_ecommerce2020.mp3"
        length="103436719"
        type="audio/mpeg"
      /><itunes:title
      >Les plateformes e-commerce en 2020 avec Aurélien Lavorel</itunes:title><itunes:subtitle
      >État des lieux des différentes plateformes et solutions e-commerce en 2020. Faut-il encore utiliser les CMS les plus connus (Magento, Prestashop, WooCommerce) ou passer sur des solutions SASS (Shopify..).</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>14</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Dans ce nouvel épisode, nous allons faire un état des lieux des différentes plateformes et solutions e-commerce en 2020. Faut-il encore utiliser les CMS les plus connus (Magento, Prestashop, WooCommerce) ou passer sur des solutions SASS (Shopify..).
Notre invité, Aurélien Lavorel, est un expert e-commerce. Il nous donne ses avis sur les plateformes disponibles, vers quelle forme de plateforme va se diriger le e-commerce et des conseils pour lancer un e-commerce en 2020. Aurélien Lavorel : https://lumao.eu/ et @LavoWeb
Développeur certifié #Magento et dirigant de @LumaoSAS Les plateformes historiques https://magento.com/ https://www.prestashop.com/fr https://woocommerce.com/ Les nouveaux acteurs https://sylius.com/ https://www.salesforce.com/fr/products/commerce-cloud/overview/ Les solutions SASS https://www.shopify.fr/ https://snipcart.com/fr https://swell.store/ https://commercejs.com/ Les solutions Front Web App https://www.vuestorefront.io/ https://www.front-commerce.com/ Autres liens React hook Stripe https://useshoppingcart.com/ Liste de solutions e-commerce headless https://headlesscommerce.org/ Exemple d&apos;une solution GatsbyJS/Sylius https://github.com/Gatsbylius/Gatsbylius Solution de tracking de livraison https://www.shipup.co/ Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Dans ce nouvel épisode, nous allons faire un état des lieux des différentes plateformes et solutions e-commerce en 2020. Faut-il encore utiliser les CMS les plus connus (Magento, Prestashop, WooCommerce) ou passer sur des solutions SASS (Shopify..).
Notre invité, Aurélien Lavorel, est un expert e-commerce. Il nous donne ses avis sur les plateformes disponibles, vers quelle forme de plateforme va se diriger le e-commerce et des conseils pour lancer un e-commerce en 2020. Aurélien Lavorel : https://lumao.eu/ et @LavoWeb
Développeur certifié #Magento et dirigant de @LumaoSAS Les plateformes historiques https://magento.com/ https://www.prestashop.com/fr https://woocommerce.com/ Les nouveaux acteurs https://sylius.com/ https://www.salesforce.com/fr/products/commerce-cloud/overview/ Les solutions SASS https://www.shopify.fr/ https://snipcart.com/fr https://swell.store/ https://commercejs.com/ Les solutions Front Web App https://www.vuestorefront.io/ https://www.front-commerce.com/ Autres liens React hook Stripe https://useshoppingcart.com/ Liste de solutions e-commerce headless https://headlesscommerce.org/ Exemple d&apos;une solution GatsbyJS/Sylius https://github.com/Gatsbylius/Gatsbylius Solution de tracking de livraison https://www.shipup.co/ Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >4302</itunes:duration></item><item><title
      ><![CDATA[Snipcart avec François Lanthier Nadeau]]></title><description
      ><![CDATA[<p>Dans cet épisode, nous allons parler d'un service ecommerce qui vous permet de mettre en place rapidement une boutique en ligne sur n'importe quel système. Snipcart est une solution qui se place entre les systèmes monolithiques du type Prestashop ou Magento et les services API First du type Commerce JS ou Swell.</p>
<p>Lancé il y a environ 7 ans, Snipcart en est à sa troisième version. Cette troisième version lancée début 2020 offre une solution complète pour mettre en place rapidement une solution ecommerce.</p>
<p>Il vous suffit d'inclure le script Javascript sur votre site. D'implémenter les bons attributs sur votre élément html (button) pour ajouter un produit dans le panier Snipcart. Et vous êtes prêt pour vendre.</p>
<p>Mais Snipcart offre beaucoup d'autres avantages :</p>
<ul>
<li>personnalisation des éléments (panier, page de check out)</li>
<li>une API pour brancher d'autres services</li>
<li>personnalisation des expéditions</li>
<li>webhooks</li>
<li>etc..</li>
</ul>
<p>Nous vous laissons découvrir le service plus en détail en écoutant l'épisode numéro 17 avec notre invité:</p>
<ul>
<li>
<p>François Lanthier Nadeau, <strong>CEO de Snipcart</strong></p>
<ul>
<li><a href="https://twitter.com/the_fln">@the_fln</a></li>
<li><a href="https://twitter.com/snipcart">@snipcart</a></li>
</ul>
</li>
</ul>
<h2>Un article sur les acteurs de la JAMStack indépendants</h2>
<p>Dans l'épisode, nous discutons avec François du monde de la JAMStack, des sociétés qui font des levées de fond et de l'état d'esprit de Snipcart. François a fait un article sur le sujet.</p>
<ul>
<li><a href="https://snipcart.com/blog/bootstrap-jamstack">The Bootstrap Jamstack: How Independent Players Compete
(en)</a></li>
</ul>
<h2>Les liens de l'épisode :</h2>
<ul>
<li><a href="https://snipcart.com/">Snipcart</a></li>
<li><a href="https://docs.snipcart.com/v3/">Documentation Snipcart</a></li>
<li><a href="https://snipcart.com/blog">Blog Snipcart</a></li>
<li><a href="https://www.mercredibiscuiterie.com/">Un exemple de site</a></li>
</ul>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/e-commerce-snipcart/</link><guid
        isPermaLink="false"
      >314ab0a29bfe296e6123d984df41c97b</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Fri, 25 Dec 2020 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_017_snipcart.mp3"
        length="78691253"
        type="audio/mpeg"
      /><itunes:title
      >Snipcart avec François Lanthier Nadeau</itunes:title><itunes:subtitle
      >Snipcart est une solution qui vous permet de mettre en place rapidement une boutique en ligne sur n&apos;importe quel système</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>17</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Dans cet épisode, nous allons parler d&apos;un service ecommerce qui vous permet de mettre en place rapidement une boutique en ligne sur n&apos;importe quel système. Snipcart est une solution qui se place entre les systèmes monolithiques du type Prestashop ou Magento et les services API First du type Commerce JS ou Swell. Lancé il y a environ 7 ans, Snipcart en est à sa troisième version. Cette troisième version lancée début 2020 offre une solution complète pour mettre en place rapidement une solution ecommerce. Il vous suffit d&apos;inclure le script Javascript sur votre site. D&apos;implémenter les bons attributs sur votre élément html (button) pour ajouter un produit dans le panier Snipcart. Et vous êtes prêt pour vendre. Mais Snipcart offre beaucoup d&apos;autres avantages : personnalisation des éléments (panier, page de check out) une API pour brancher d&apos;autres services personnalisation des expéditions webhooks etc.. Nous vous laissons découvrir le service plus en détail en écoutant l&apos;épisode numéro 17 avec notre invité: François Lanthier Nadeau, CEO de Snipcart @the_fln @snipcart Un article sur les acteurs de la JAMStack indépendants Dans l&apos;épisode, nous discutons avec François du monde de la JAMStack, des sociétés qui font des levées de fond et de l&apos;état d&apos;esprit de Snipcart. François a fait un article sur le sujet. The Bootstrap Jamstack: How Independent Players Compete
(en) Les liens de l&apos;épisode : Snipcart Documentation Snipcart Blog Snipcart Un exemple de site Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Dans cet épisode, nous allons parler d&apos;un service ecommerce qui vous permet de mettre en place rapidement une boutique en ligne sur n&apos;importe quel système. Snipcart est une solution qui se place entre les systèmes monolithiques du type Prestashop ou Magento et les services API First du type Commerce JS ou Swell. Lancé il y a environ 7 ans, Snipcart en est à sa troisième version. Cette troisième version lancée début 2020 offre une solution complète pour mettre en place rapidement une solution ecommerce. Il vous suffit d&apos;inclure le script Javascript sur votre site. D&apos;implémenter les bons attributs sur votre élément html (button) pour ajouter un produit dans le panier Snipcart. Et vous êtes prêt pour vendre. Mais Snipcart offre beaucoup d&apos;autres avantages : personnalisation des éléments (panier, page de check out) une API pour brancher d&apos;autres services personnalisation des expéditions webhooks etc.. Nous vous laissons découvrir le service plus en détail en écoutant l&apos;épisode numéro 17 avec notre invité: François Lanthier Nadeau, CEO de Snipcart @the_fln @snipcart Un article sur les acteurs de la JAMStack indépendants Dans l&apos;épisode, nous discutons avec François du monde de la JAMStack, des sociétés qui font des levées de fond et de l&apos;état d&apos;esprit de Snipcart. François a fait un article sur le sujet. The Bootstrap Jamstack: How Independent Players Compete
(en) Les liens de l&apos;épisode : Snipcart Documentation Snipcart Blog Snipcart Un exemple de site Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >3277</itunes:duration></item><item><title
      ><![CDATA[Écoconception et écologie]]></title><description
      ><![CDATA[<p>Dans ce podcast, nous parlons de l'impact de notre utilisation du numérique sur le  réchauffement climatique et d'écoconception.</p>
<p>Podcast présenté par :</p>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">https://twitter.com/xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">https://twitter.com/PatrickFaramaz</a></li>
</ul>
<p>Invité dans ce podcast :</p>
<ul>
<li>François Colin <a href="https://www.linkedin.com/in/francois-colin/">https://www.linkedin.com/in/francois-colin/</a>
Consultant indépendant sur la transformation numérique et la transition énergie-climat.</li>
</ul>
<p>Liens utiles sur l'écologie :</p>
<ul>
<li><a href="https://theshiftproject.org/">https://theshiftproject.org/</a></li>
</ul>
<p>Liens utiles sur l'écoconception :</p>
<ul>
<li>Tester un site : <a href="http://www.ecoindex.fr/">http://www.ecoindex.fr/</a></li>
<li>Formation en écoconception : <a href="https://www.greenit.fr/">https://www.greenit.fr/</a></li>
<li>Impact des plus gros services en ligne (par Greenpeace) : <a href="http://www.clickclean.org/france/fr/">http://www.clickclean.org/france/fr/</a></li>
</ul>
<p>Livres :</p>
<ul>
<li><a href="https://www.greenit.fr/2019/09/10/sobriete-numerique-les-cles-pour-agir/">https://www.greenit.fr/2019/09/10/sobriete-numerique-les-cles-pour-agir/</a></li>
<li><a href="https://www.greenit.fr/2019/05/07/ecoconception-web-les-115-bonnes-pratiques-3eme-edition/">https://www.greenit.fr/2019/05/07/ecoconception-web-les-115-bonnes-pratiques-3eme-edition/</a></li>
</ul>
<p>Vidéos :</p>
<ul>
<li>"Combattre la complexité" - Rémi Guyot <a href="https://www.youtube.com/watch?v=4lfW48_oDxo">https://www.youtube.com/watch?v=4lfW48_oDxo</a></li>
<li>Ecologie et numérique: <a href="https://www.youtube.com/watch?v=zmE0X2KKRjc&#x26;list=PL4piaFbHOpRc6jtB450EOo-6cc91sUzzz&#x26;index=2&#x26;t=0s">https://www.youtube.com/watch?v=zmE0X2KKRjc&#x26;list=PL4piaFbHOpRc6jtB450EOo-6cc91sUzzz&#x26;index=2&#x26;t=0s</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/ecoconception/</link><guid
        isPermaLink="false"
      >466f44b0c90f560262f2bde17a2f405a</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double slash]]></dc:creator><pubDate
      >Tue, 21 Apr 2020 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.digitaloceanspaces.com/DS_002_eco_conception.mp3"
        length="99733209"
        type="audio/mpeg"
      /><itunes:title>Écoconception et écologie</itunes:title><itunes:subtitle
      >Un point de l&apos;impact de notre utilisation du numérique sur le réchauffement climatique et de l&apos;écoconception</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>3</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Dans ce podcast, nous parlons de l&apos;impact de notre utilisation du numérique sur le  réchauffement climatique et d&apos;écoconception. Podcast présenté par : Alexandre Duval https://twitter.com/xlanex6 Patrick Faramaz https://twitter.com/PatrickFaramaz Invité dans ce podcast : François Colin https://www.linkedin.com/in/francois-colin/
Consultant indépendant sur la transformation numérique et la transition énergie-climat. Liens utiles sur l&apos;écologie : https://theshiftproject.org/ Liens utiles sur l&apos;écoconception : Tester un site : http://www.ecoindex.fr/ Formation en écoconception : https://www.greenit.fr/ Impact des plus gros services en ligne (par Greenpeace) : http://www.clickclean.org/france/fr/ Livres : https://www.greenit.fr/2019/09/10/sobriete-numerique-les-cles-pour-agir/ https://www.greenit.fr/2019/05/07/ecoconception-web-les-115-bonnes-pratiques-3eme-edition/ Vidéos : &quot;Combattre la complexité&quot; - Rémi Guyot https://www.youtube.com/watch?v=4lfW48_oDxo Ecologie et numérique: https://www.youtube.com/watch?v=zmE0X2KKRjc&amp;list=PL4piaFbHOpRc6jtB450EOo-6cc91sUzzz&amp;index=2&amp;t=0s</itunes:summary><itunes:author
      >Double slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Dans ce podcast, nous parlons de l&apos;impact de notre utilisation du numérique sur le  réchauffement climatique et d&apos;écoconception. Podcast présenté par : Alexandre Duval https://twitter.com/xlanex6 Patrick Faramaz https://twitter.com/PatrickFaramaz Invité dans ce podcast : François Colin https://www.linkedin.com/in/francois-colin/
Consultant indépendant sur la transformation numérique et la transition énergie-climat. Liens utiles sur l&apos;écologie : https://theshiftproject.org/ Liens utiles sur l&apos;écoconception : Tester un site : http://www.ecoindex.fr/ Formation en écoconception : https://www.greenit.fr/ Impact des plus gros services en ligne (par Greenpeace) : http://www.clickclean.org/france/fr/ Livres : https://www.greenit.fr/2019/09/10/sobriete-numerique-les-cles-pour-agir/ https://www.greenit.fr/2019/05/07/ecoconception-web-les-115-bonnes-pratiques-3eme-edition/ Vidéos : &quot;Combattre la complexité&quot; - Rémi Guyot https://www.youtube.com/watch?v=4lfW48_oDxo Ecologie et numérique: https://www.youtube.com/watch?v=zmE0X2KKRjc&amp;list=PL4piaFbHOpRc6jtB450EOo-6cc91sUzzz&amp;index=2&amp;t=0s</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >4161</itunes:duration></item><item><title
      ><![CDATA[Ecommerce statique]]></title><description
      ><![CDATA[<p>Dans ce podcast, nous parlons d'un retour d'expérience sur la création d'un site ecommerce avec SnipCart et Gatsby JS.</p>
<p>Avec le confinement, les commerçants ont dû fermer leurs portes subitement mi-mars. Avec le confinement qui traîne en longueur, certaines boutiques essayent de s’adapter et de rebondir en tentant le commerce en ligne.
Retour sur un site ecommerce statique développé pour une boutique/Salon de thé de Lyon.</p>
<p>Podcast présenté par :  </p>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">https://twitter.com/xlanex6</a>	</li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">https://twitter.com/PatrickFaramaz</a></li>
</ul>
<p><a href="https://snipcart.com/">SnipCart</a></p>
<p>Article complémentaire :
<a href="https://www.goodmotion.fr/blog/un-site-e-commerce-statique-developpe-avec-gatsby-js-et-snipcart">https://www.goodmotion.fr/blog/un-site-e-commerce-statique-developpe-avec-gatsby-js-et-snipcart</a></p>
<p>Service d'hébergement JAMStack:</p>
<p><a href="https://www.netlify.com/">Netlify</a></p>]]></description><link
      >https://slash-podcast.fr/podcasts/ecommerce-statique/</link><guid
        isPermaLink="false"
      >d7c3aec02d1fd799875c4cc1143a1f68</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double slash]]></dc:creator><pubDate
      >Mon, 11 May 2020 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.digitaloceanspaces.com/DS_004_ecommerce_statique.mp3"
        length="93164234"
        type="audio/mpeg"
      /><itunes:title>Ecommerce statique</itunes:title><itunes:subtitle
      >Retour sur la création d&apos;un site ecommerce avec SnipCart et Gatsby JS</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>4</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Dans ce podcast, nous parlons d&apos;un retour d&apos;expérience sur la création d&apos;un site ecommerce avec SnipCart et Gatsby JS. Avec le confinement, les commerçants ont dû fermer leurs portes subitement mi-mars. Avec le confinement qui traîne en longueur, certaines boutiques essayent de s’adapter et de rebondir en tentant le commerce en ligne.
Retour sur un site ecommerce statique développé pour une boutique/Salon de thé de Lyon. Podcast présenté par :   Alexandre Duval https://twitter.com/xlanex6	 Patrick Faramaz https://twitter.com/PatrickFaramaz SnipCart Article complémentaire :
https://www.goodmotion.fr/blog/un-site-e-commerce-statique-developpe-avec-gatsby-js-et-snipcart Service d&apos;hébergement JAMStack: Netlify</itunes:summary><itunes:author
      >Double slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Dans ce podcast, nous parlons d&apos;un retour d&apos;expérience sur la création d&apos;un site ecommerce avec SnipCart et Gatsby JS. Avec le confinement, les commerçants ont dû fermer leurs portes subitement mi-mars. Avec le confinement qui traîne en longueur, certaines boutiques essayent de s’adapter et de rebondir en tentant le commerce en ligne.
Retour sur un site ecommerce statique développé pour une boutique/Salon de thé de Lyon. Podcast présenté par :   Alexandre Duval https://twitter.com/xlanex6	 Patrick Faramaz https://twitter.com/PatrickFaramaz SnipCart Article complémentaire :
https://www.goodmotion.fr/blog/un-site-e-commerce-statique-developpe-avec-gatsby-js-et-snipcart Service d&apos;hébergement JAMStack: Netlify</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >3880</itunes:duration></item><item><title
      ><![CDATA[Fastify, le framework rapide pour Node JS avec Vincent Le Goff]]></title><description
      ><![CDATA[<h2>Un épisode avec notre invité Vincent Le Goff qui contribue activement au projet Fastify. Un framework pour Node JS orienté vitesse et légèreté</h2>
<p><a href="https://www.fastify.io/">Fastify</a> est un framework pour Node JS qui est principalement orienté sur la légèreté et la rapidité.
Il offre une très bonne expérience développeur et un système de plugin puissant.
Inspiré par Hapi et Express, il offre de très bonnes performances pour des grosses montées en charge.</p>
<p>Nous vous laissons découvrir le framework plus en détail en écoutant l'épisode numéro 20 avec notre invité:</p>
<ul>
<li>
<p>Vincent Le Goff,</p>
<ul>
<li><a href="https://github.com/zekth">https://github.com/zekth</a></li>
</ul>
</li>
</ul>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/fastify-node-js-open-source/</link><guid
        isPermaLink="false"
      >c0ab9fa68657a38131e5007e376d1b09</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Wed, 24 Feb 2021 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.digitaloceanspaces.com/DS_020_fastify.mp3"
        length="72354747"
        type="audio/mpeg"
      /><itunes:title
      >Fastify, le framework rapide pour Node JS avec Vincent Le Goff</itunes:title><itunes:subtitle
      >Un épisode avec notre invité Vincent Le Goff qui contribue activement au projet Fastify. Un framework pour Node JS orienté vitesse et légèreté</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>20</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Un épisode avec notre invité Vincent Le Goff qui contribue activement au projet Fastify. Un framework pour Node JS orienté vitesse et légèreté Fastify est un framework pour Node JS qui est principalement orienté sur la légèreté et la rapidité.
Il offre une très bonne expérience développeur et un système de plugin puissant.
Inspiré par Hapi et Express, il offre de très bonnes performances pour des grosses montées en charge. Nous vous laissons découvrir le framework plus en détail en écoutant l&apos;épisode numéro 20 avec notre invité: Vincent Le Goff, https://github.com/zekth Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Un épisode avec notre invité Vincent Le Goff qui contribue activement au projet Fastify. Un framework pour Node JS orienté vitesse et légèreté Fastify est un framework pour Node JS qui est principalement orienté sur la légèreté et la rapidité.
Il offre une très bonne expérience développeur et un système de plugin puissant.
Inspiré par Hapi et Express, il offre de très bonnes performances pour des grosses montées en charge. Nous vous laissons découvrir le framework plus en détail en écoutant l&apos;épisode numéro 20 avec notre invité: Vincent Le Goff, https://github.com/zekth Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >3013</itunes:duration></item><item><title
      ><![CDATA[GitHub Ninja]]></title><description
      ><![CDATA[<p>Petit retour sur la conférence annuelle de GitHub, les nouvelles fonctionnalités et autres outils liés à GitHub.</p>
<h3>GitHub Satellite</h3>
<p>Vidéos en ligne <a href="https://githubsatellite.com/">GITHUB SATELLITE</a></p>
<h3>Nouvelle version de la  CLI</h3>
<p><a href="https://cli.github.com/">https://cli.github.com/</a></p>
<pre><code class="language-bash">gh issue [status, list, view, create]
gh pr [status, list, view, checkout, create]
gh repo [clone, create, fork, view]
gh config [get, set]
</code></pre>
<h3>Github Actions</h3>
<p><a href="https://github.com/features/actions">https://github.com/features/actions</a></p>
<h3>Extensions</h3>
<ul>
<li><a href="https://www.octotree.io/">octoTree</a></li>
<li><a href="https://chrome.google.com/webstore/detail/enhanced-github/anlikcnbgdeidpacdbdljnabclhahhmd/related?hl=en">Enhanced GitHub</a></li>
</ul>
<h3>Sur le site du repo</h3>
<ul>
<li><code>t</code> pour faire une recherche , nom , extension de fichier</li>
<li><code>y</code> pour transformer l'URL en permalink</li>
<li><code>b</code> pour trouver qui blamer, git blame !</li>
</ul>
<p>Podcast présenté par :</p>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/github-ninja/</link><guid
        isPermaLink="false"
      >3bec175544dbf2be451962b6645868df</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double slash]]></dc:creator><pubDate
      >Tue, 19 May 2020 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_005_gituhub_ninja.mp3"
        length="70045505"
        type="audio/mpeg"
      /><itunes:title>GitHub Ninja</itunes:title><itunes:subtitle
      >Mieux utiliser les outils de GitHub dans notre quotidien</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>5</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Petit retour sur la conférence annuelle de GitHub, les nouvelles fonctionnalités et autres outils liés à GitHub. GitHub Satellite Vidéos en ligne GITHUB SATELLITE Nouvelle version de la  CLI https://cli.github.com/ Github Actions https://github.com/features/actions Extensions octoTree Enhanced GitHub Sur le site du repo t pour faire une recherche , nom , extension de fichier y pour transformer l&apos;URL en permalink b pour trouver qui blamer, git blame ! Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Petit retour sur la conférence annuelle de GitHub, les nouvelles fonctionnalités et autres outils liés à GitHub. GitHub Satellite Vidéos en ligne GITHUB SATELLITE Nouvelle version de la  CLI https://cli.github.com/ Github Actions https://github.com/features/actions Extensions octoTree Enhanced GitHub Sur le site du repo t pour faire une recherche , nom , extension de fichier y pour transformer l&apos;URL en permalink b pour trouver qui blamer, git blame ! Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >2917</itunes:duration></item><item><title
      ><![CDATA[Utiliser le Github README comme Portfolio]]></title><description
      ><![CDATA[<p>Dans cet épisode, nous allons parler d'une fonctionnalité sur github.com qui permet d'améliorer sa page d'accueil GitHub.
En créant un repository avec le même nom que votre profil et en y ajoutant un fichier README, vous pouvez améliorer votre profil GitHub.
Mais vous pouvez aller encore plus loin avec l'automatisation. C'est ce que l'on vous explique dans cet épisode.</p>
<h2>Exemples de Readme Portfolio avec automatisation</h2>
<ul>
<li><a href="https://github.com/xlanex6">Github d'alex</a>, avec le code source et les workflows consultables.</li>
</ul>
<h3>Liens</h3>
<ul>
<li><a href="https://simpleicons.org/">Icons</a></li>
<li><a href="https://shields.io/">Badges</a></li>
</ul>
<p>Pour l'automatisation:</p>
<ul>
<li><a href="https://github.com/anuraghazra/github-readme-stats">GitHub Readme Stats</a></li>
<li><a href="https://pipedream.com/">Pipedream</a></li>
</ul>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/github-readme/</link><guid
        isPermaLink="false"
      >d938da08dcb61e54ab6ae1c9706c80e2</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Sat, 19 Sep 2020 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_012_github_readme.mp3"
        length="40812030"
        type="audio/mpeg"
      /><itunes:title
      >Utiliser le Github README comme Portfolio</itunes:title><itunes:subtitle
      >Comment créer un portfolio automatiquement avec la nouvelle fonctionnalité de GitHub pour améliorer votre profil</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>12</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Dans cet épisode, nous allons parler d&apos;une fonctionnalité sur github.com qui permet d&apos;améliorer sa page d&apos;accueil GitHub.
En créant un repository avec le même nom que votre profil et en y ajoutant un fichier README, vous pouvez améliorer votre profil GitHub.
Mais vous pouvez aller encore plus loin avec l&apos;automatisation. C&apos;est ce que l&apos;on vous explique dans cet épisode. Exemples de Readme Portfolio avec automatisation Github d&apos;alex, avec le code source et les workflows consultables. Liens Icons Badges Pour l&apos;automatisation: GitHub Readme Stats Pipedream Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Dans cet épisode, nous allons parler d&apos;une fonctionnalité sur github.com qui permet d&apos;améliorer sa page d&apos;accueil GitHub.
En créant un repository avec le même nom que votre profil et en y ajoutant un fichier README, vous pouvez améliorer votre profil GitHub.
Mais vous pouvez aller encore plus loin avec l&apos;automatisation. C&apos;est ce que l&apos;on vous explique dans cet épisode. Exemples de Readme Portfolio avec automatisation Github d&apos;alex, avec le code source et les workflows consultables. Liens Icons Badges Pour l&apos;automatisation: GitHub Readme Stats Pipedream Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >1699</itunes:duration></item><item><title
      ><![CDATA[GraphQL, Hype ou Révolution]]></title><description
      ><![CDATA[<p>Dans cet épisode, nous allons parler de GraphQL et de REST.
GraphQL est un langage de requête basé sur le protocole HTTP qui a été pensé pour une utilisation adapté aux usages actuels.
Pourquoi avons-nous besoin d'utiliser graphQL dans nos projets, quels sont les avantages et inconvénients par rapport à REST.</p>
<h3>Solutions connues</h3>
<ul>
<li>SOAP est un protocole qui retourne des données en XML</li>
<li>REST est une norme basée sur le protocole HTTP créée en 2000</li>
<li>GraphQL est un langage de requête basé sur le protocole HTTP</li>
</ul>
<h3>Quelques API publiques REST et GraphQL</h3>
<ul>
<li><a href="https://api.got.show/doc/">https://api.got.show/doc/</a></li>
<li><a href="https://jsonplaceholder.typicode.com/">https://jsonplaceholder.typicode.com/</a></li>
<li><a href="https://swapi.dev/">https://swapi.dev/</a></li>
<li><a href="http://graphql.org/swapi-graphql">http://graphql.org/swapi-graphql</a></li>
</ul>
<h3>Liens</h3>
<ul>
<li><a href="https://graphql.org/">GraphQL Org</a></li>
<li><a href="https://github.com/chentsulin/awesome-graphql">Awesome GraphQL</a></li>
<li><a href="https://hasura.io/">Hasura</a></li>
<li><a href="https://www.prisma.io/">Prisma</a></li>
<li><a href="https://github.com/apollographql">Apollo GraphQL</a></li>
</ul>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/graphql-hype-or-revolution/</link><guid
        isPermaLink="false"
      >e52e7d625a9a2113b1163230a11925d6</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Mon, 05 Oct 2020 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_013_graphql.mp3"
        length="83058173"
        type="audio/mpeg"
      /><itunes:title>GraphQL, Hype ou Révolution</itunes:title><itunes:subtitle
      >GraphQL est un langage de requête basé sur le protocole HTTP qui a été pensé pour une utilisation adapté aux usages actuels</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>13</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Dans cet épisode, nous allons parler de GraphQL et de REST.
GraphQL est un langage de requête basé sur le protocole HTTP qui a été pensé pour une utilisation adapté aux usages actuels.
Pourquoi avons-nous besoin d&apos;utiliser graphQL dans nos projets, quels sont les avantages et inconvénients par rapport à REST. Solutions connues SOAP est un protocole qui retourne des données en XML REST est une norme basée sur le protocole HTTP créée en 2000 GraphQL est un langage de requête basé sur le protocole HTTP Quelques API publiques REST et GraphQL https://api.got.show/doc/ https://jsonplaceholder.typicode.com/ https://swapi.dev/ http://graphql.org/swapi-graphql Liens GraphQL Org Awesome GraphQL Hasura Prisma Apollo GraphQL Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Dans cet épisode, nous allons parler de GraphQL et de REST.
GraphQL est un langage de requête basé sur le protocole HTTP qui a été pensé pour une utilisation adapté aux usages actuels.
Pourquoi avons-nous besoin d&apos;utiliser graphQL dans nos projets, quels sont les avantages et inconvénients par rapport à REST. Solutions connues SOAP est un protocole qui retourne des données en XML REST est une norme basée sur le protocole HTTP créée en 2000 GraphQL est un langage de requête basé sur le protocole HTTP Quelques API publiques REST et GraphQL https://api.got.show/doc/ https://jsonplaceholder.typicode.com/ https://swapi.dev/ http://graphql.org/swapi-graphql Liens GraphQL Org Awesome GraphQL Hasura Prisma Apollo GraphQL Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >3464</itunes:duration></item><item><title
      ><![CDATA[Hasura, une API GraphQL qui assure !]]></title><description
      ><![CDATA[<h2>Support de l'épisode</h2>
<p>Indy, la comptabilité des indépendants tout simplement. Synchronisation bancaire sécurisée, déclarations fiscales préremplies et télétransmises, support client avec réponse sous 4 minutes.</p>
<p>Obtenez 2 mois gratuits avec notre code sponsor. <a href="https://bit.ly/3dojgDo">Cliquez sur ici pour profiter du code</a></p>
<h2>Alex nous parle d'Hasura, un service qui permet de monter une API GraphQL à partir d'une base de données.</h2>
<h3>Retrouvez la vidéo de l'enregistrement sur <a href="https://youtu.be/0fK57NRHqPY">YouTube</a></h3>
<p><a href="https://hasura.io/">Hasura</a> est un système qui vous permet de monter un API GraphQL facilement à partir d'une base de données.  </p>
<p>Le code est open source. Vous pouvez l'autohéberger sur un serveur ou l'utiliser via le service cloud proposé par la société éditrice. Dans le dernier cas, il faudra payer en fonction de votre forfait.</p>
<p>Une fois installé, vous connectez votre base de données et Hasura génère les schemas qui correspondent à vos data. Il génère également les resolvers et toute la partie CRUD (create, read, update, delete).</p>
<p>Vous n'avez plus qu'a consommer la data à travers une route API et vous concentrer sur votre application.</p>
<p>Il gère aussi la partie autorisation en donnant accès à tel ou tel data.
Mais attention, de base, tout est ouvert. Vous devez donc utiliser un système d'authentification pour sécuriser vos data.</p>
<p>Nous vous laissons écouter l'épisode pour en savoir plus sur Hasura.</p>
<p>Bonne écoute.</p>
<h2>Les liens de l'épisode</h2>
<ul>
<li><a href="https://hasura.io/">https://hasura.io/</a></li>
<li><a href="https://www.nhost.io/">https://www.nhost.io/</a></li>
</ul>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>
<BlocBorder>
  <strong>Support de l'épisode</strong><br /><br />
  Indy, la comptabilité des indépendants tout simplement. Synchronisation bancaire sécurisée, déclarations fiscales préremplies et télétransmises, support client avec réponse sous 4 minutes.<br /><br />
  Obtenez 2 mois gratuits avec notre code sponsor. <a href="https://bit.ly/3dojgDo" target="_blank">Cliquez sur ici pour profiter du code</a>
</BlocBorder>]]></description><link
      >https://slash-podcast.fr/podcasts/hasura/</link><guid
        isPermaLink="false"
      >232290c1a57fb93aac34811ec55f41ca</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Thu, 20 Jan 2022 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_032_hasura.mp3"
        length="65428213"
        type="audio/mpeg"
      /><itunes:title
      >Hasura, une API GraphQL qui assure !</itunes:title><itunes:subtitle
      >Alex nous fait découvrir Hasura, un service qui permet de monter une API GraphQL à partir d&apos;une base de données.</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>32</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Support de l&apos;épisode Indy, la comptabilité des indépendants tout simplement. Synchronisation bancaire sécurisée, déclarations fiscales préremplies et télétransmises, support client avec réponse sous 4 minutes. Obtenez 2 mois gratuits avec notre code sponsor. Cliquez sur ici pour profiter du code Alex nous parle d&apos;Hasura, un service qui permet de monter une API GraphQL à partir d&apos;une base de données. Retrouvez la vidéo de l&apos;enregistrement sur YouTube Hasura est un système qui vous permet de monter un API GraphQL facilement à partir d&apos;une base de données.   Le code est open source. Vous pouvez l&apos;autohéberger sur un serveur ou l&apos;utiliser via le service cloud proposé par la société éditrice. Dans le dernier cas, il faudra payer en fonction de votre forfait. Une fois installé, vous connectez votre base de données et Hasura génère les schemas qui correspondent à vos data. Il génère également les resolvers et toute la partie CRUD (create, read, update, delete). Vous n&apos;avez plus qu&apos;a consommer la data à travers une route API et vous concentrer sur votre application. Il gère aussi la partie autorisation en donnant accès à tel ou tel data.
Mais attention, de base, tout est ouvert. Vous devez donc utiliser un système d&apos;authentification pour sécuriser vos data. Nous vous laissons écouter l&apos;épisode pour en savoir plus sur Hasura. Bonne écoute. Les liens de l&apos;épisode https://hasura.io/ https://www.nhost.io/ Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Support de l&apos;épisode Indy, la comptabilité des indépendants tout simplement. Synchronisation bancaire sécurisée, déclarations fiscales préremplies et télétransmises, support client avec réponse sous 4 minutes. Obtenez 2 mois gratuits avec notre code sponsor. Cliquez sur ici pour profiter du code Alex nous parle d&apos;Hasura, un service qui permet de monter une API GraphQL à partir d&apos;une base de données. Retrouvez la vidéo de l&apos;enregistrement sur YouTube Hasura est un système qui vous permet de monter un API GraphQL facilement à partir d&apos;une base de données.   Le code est open source. Vous pouvez l&apos;autohéberger sur un serveur ou l&apos;utiliser via le service cloud proposé par la société éditrice. Dans le dernier cas, il faudra payer en fonction de votre forfait. Une fois installé, vous connectez votre base de données et Hasura génère les schemas qui correspondent à vos data. Il génère également les resolvers et toute la partie CRUD (create, read, update, delete). Vous n&apos;avez plus qu&apos;a consommer la data à travers une route API et vous concentrer sur votre application. Il gère aussi la partie autorisation en donnant accès à tel ou tel data.
Mais attention, de base, tout est ouvert. Vous devez donc utiliser un système d&apos;authentification pour sécuriser vos data. Nous vous laissons écouter l&apos;épisode pour en savoir plus sur Hasura. Bonne écoute. Les liens de l&apos;épisode https://hasura.io/ https://www.nhost.io/ Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >2725</itunes:duration></item><item><title
      ><![CDATA[JAMstack CONF. London]]></title><description
      ><![CDATA[<h1>JAMStack Conf London 27 mai 2020</h1>
<p>Cette année, la conférence JAMStack de Londres est passée complètement online du à la crise du COVID-19.
Nous avons assisté à la conférence le 27 mai 2020 et nous vous faisons un petit résumé sur l’événement et les annonces des acteurs présents.</p>
<p>Site de la Conférence :</p>
<p><a href="https://app.hopin.to/events/jamstack-conf-virtual/reception">Lien pour le LIVE</a></p>
<p><a href="https://www.youtube.com/playlist?list=PL58Wk5g77lF8jzqp_1cViDf-WilJsAvqT">REPLAY sur Youtube</a></p>
<h3>Strapi</h3>
<p><a href="https://strapi.io/">https://strapi.io/</a></p>
<p>Annonce : enfin une version stable !</p>
<p>[Edit] Complément d'infos par <a href="https://twitter.com/laurie_jim?s=20">Jim Laurie</a>, co-fondateur et CTO de Strapi : <a href="https://twitter.com/laurie_jim/status/1268457168862412801">https://twitter.com/laurie_jim/status/1268457168862412801</a></p>
<ul>
<li>Strapi utilise Koa.js et pas hapi.js pour la couche framework Node.js</li>
<li>En effet on est community driven, les features que l'on sort sont votés par la communauté.</li>
<li>Pour la monétisation, c'est un system de plugin. Du coup des features free et payante. Avec des systems de limitation aussi sur certaine features.
Avec un peu de support possible aussi si besoin.</li>
</ul>
<h3>Prismic</h3>
<p><a href="https://prismic.io/">https://prismic.io/</a></p>
<p>Annonce : La Slice Machine</p>
<p>Slice Machine, système pour gérer les slices (blocks) entre le repository Prismic et le site. Ligne de commande pour générer des slices. Automatiquement lié au repo via la ligne de commande. Seulement sur Nuxt pour le moment. D'autres librairies sont en cours de dev.</p>
<p><a href="https://github.com/prismicio/slice-machine">https://github.com/prismicio/slice-machine</a></p>
<h3>Netlify</h3>
<ul>
<li>Edge Handlers</li>
<li>build plugins</li>
</ul>
<h3>Commerce Layer</h3>
<p><a href="https://commercelayer.io/">https://commercelayer.io/</a>
Le site est en anglais.</p>
<ul>
<li>Solution ecommerce headless.</li>
</ul>
<h3>Imgix</h3>
<p><a href="https://www.imgix.com/">https://www.imgix.com/</a></p>
<ul>
<li>Service de transformation d'image à la volée</li>
</ul>
<h3>Kentico Kontent</h3>
<p><a href="https://kontent.ai/">https://kontent.ai/</a></p>
<ul>
<li>Content Manager</li>
</ul>
<h3>Magnolia</h3>
<p><a href="https://hd.magnolia-cms.com/">https://hd.magnolia-cms.com/</a></p>
<ul>
<li>CMS avec visual editor block</li>
</ul>
<h3>Mux</h3>
<p><a href="https://mux.com/">https://mux.com/</a></p>
<ul>
<li>Video CMS + livestream avec OBS</li>
</ul>
<h3>RedwoodJS</h3>
<p><a href="https://redwoodjs.com/">https://redwoodjs.com/</a></p>
<p>React, GraphQL and Prisma pour faire le Ruby on Rails du JS.</p>
<p>Podcast présenté par :</p>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/jamstack-conf/</link><guid
        isPermaLink="false"
      >b96116a9e855f7620515c606f1464738</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double slash]]></dc:creator><pubDate
      >Mon, 01 Jun 2020 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_006_janstack_conf.mp3"
        length="107628784"
        type="audio/mpeg"
      /><itunes:title>JAMstack CONF. London</itunes:title><itunes:subtitle
      >Retour de la JAMstack Conf. de Londres 27 - 28 Mai 2020</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>6</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >JAMStack Conf London 27 mai 2020 Cette année, la conférence JAMStack de Londres est passée complètement online du à la crise du COVID-19.
Nous avons assisté à la conférence le 27 mai 2020 et nous vous faisons un petit résumé sur l’événement et les annonces des acteurs présents. Site de la Conférence : Lien pour le LIVE REPLAY sur Youtube Strapi https://strapi.io/ Annonce : enfin une version stable ! Edit Complément d&apos;infos par Jim Laurie, co-fondateur et CTO de Strapi : https://twitter.com/laurie_jim/status/1268457168862412801 Strapi utilise Koa.js et pas hapi.js pour la couche framework Node.js En effet on est community driven, les features que l&apos;on sort sont votés par la communauté. Pour la monétisation, c&apos;est un system de plugin. Du coup des features free et payante. Avec des systems de limitation aussi sur certaine features.
Avec un peu de support possible aussi si besoin. Prismic https://prismic.io/ Annonce : La Slice Machine Slice Machine, système pour gérer les slices (blocks) entre le repository Prismic et le site. Ligne de commande pour générer des slices. Automatiquement lié au repo via la ligne de commande. Seulement sur Nuxt pour le moment. D&apos;autres librairies sont en cours de dev. https://github.com/prismicio/slice-machine Netlify Edge Handlers build plugins Commerce Layer https://commercelayer.io/
Le site est en anglais. Solution ecommerce headless. Imgix https://www.imgix.com/ Service de transformation d&apos;image à la volée Kentico Kontent https://kontent.ai/ Content Manager Magnolia https://hd.magnolia-cms.com/ CMS avec visual editor block Mux https://mux.com/ Video CMS + livestream avec OBS RedwoodJS https://redwoodjs.com/ React, GraphQL and Prisma pour faire le Ruby on Rails du JS. Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >JAMStack Conf London 27 mai 2020 Cette année, la conférence JAMStack de Londres est passée complètement online du à la crise du COVID-19.
Nous avons assisté à la conférence le 27 mai 2020 et nous vous faisons un petit résumé sur l’événement et les annonces des acteurs présents. Site de la Conférence : Lien pour le LIVE REPLAY sur Youtube Strapi https://strapi.io/ Annonce : enfin une version stable ! Edit Complément d&apos;infos par Jim Laurie, co-fondateur et CTO de Strapi : https://twitter.com/laurie_jim/status/1268457168862412801 Strapi utilise Koa.js et pas hapi.js pour la couche framework Node.js En effet on est community driven, les features que l&apos;on sort sont votés par la communauté. Pour la monétisation, c&apos;est un system de plugin. Du coup des features free et payante. Avec des systems de limitation aussi sur certaine features.
Avec un peu de support possible aussi si besoin. Prismic https://prismic.io/ Annonce : La Slice Machine Slice Machine, système pour gérer les slices (blocks) entre le repository Prismic et le site. Ligne de commande pour générer des slices. Automatiquement lié au repo via la ligne de commande. Seulement sur Nuxt pour le moment. D&apos;autres librairies sont en cours de dev. https://github.com/prismicio/slice-machine Netlify Edge Handlers build plugins Commerce Layer https://commercelayer.io/
Le site est en anglais. Solution ecommerce headless. Imgix https://www.imgix.com/ Service de transformation d&apos;image à la volée Kentico Kontent https://kontent.ai/ Content Manager Magnolia https://hd.magnolia-cms.com/ CMS avec visual editor block Mux https://mux.com/ Video CMS + livestream avec OBS RedwoodJS https://redwoodjs.com/ React, GraphQL and Prisma pour faire le Ruby on Rails du JS. Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >4483</itunes:duration></item><item><title
      ><![CDATA[Présentation de la JAMStack]]></title><description
      ><![CDATA[<p>Dans ce podcast, nous parlons de la JAMStack.</p>
<p>Comment la JAMStack fonctionne, quelle est la différence avec les sites dynamiques du type PHP/WordPress. Quelles sont les limites et quels sont les avantages.</p>
<p><a href="https://jamstack.org/">https://jamstack.org/</a></p>
<p>Podcast présenté par :</p>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">https://twitter.com/xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">https://twitter.com/PatrickFaramaz</a></li>
</ul>
<p>Service d'hébergement JAMStack:</p>
<p><a href="https://www.netlify.com/">Netlify</a>
<a href="https://vercel.com/">Vercel(now)</a></p>
<p>Liste de liens vers les services autour de la JAMStack :</p>
<ul>
<li><a href="https://github.com/automata/awesome-jamstack">https://github.com/automata/awesome-jamstack</a></li>
</ul>
<p>Outils pour développer un site statique :</p>
<ul>
<li>React JS : <a href="https://www.gatsbyjs.org/">https://www.gatsbyjs.org/</a></li>
<li>Vue JS : <a href="https://gridsome.org/">https://gridsome.org/</a></li>
<li>Pure HTML : <a href="https://www.11ty.dev/">https://www.11ty.dev/</a></li>
<li>GO : <a href="https://gohugo.io/">https://gohugo.io/</a></li>
</ul>
<p>Événement autour de la JAMStack</p>
<ul>
<li><a href="https://jamstackconf.com/">https://jamstackconf.com/</a></li>
</ul>
<p>Entre temps, Gatsby a annoncé l'incremental builds :</p>
<p><a href="https://www.gatsbyjs.com/docs/incremental-builds/">https://www.gatsbyjs.com/docs/incremental-builds/</a></p>
<p>Communauté JAMStack française :</p>
<ul>
<li>site web (billets originaux et traductions) : <a href="https://jamstatic.fr/">https://jamstatic.fr/</a></li>
<li>Slack avec beaucoup de sujets abordés et une communauté active (et accueillante) : <a href="https://jamstatic.fr/slack/">https://jamstatic.fr/slack/</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/jamstack/</link><guid
        isPermaLink="false"
      >72b1aeca6ea293f3fa30d4003404be07</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double slash]]></dc:creator><pubDate
      >Thu, 09 Apr 2020 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.digitaloceanspaces.com/DS_001_jamstack.mp3"
        length="115827689"
        type="audio/mpeg"
      /><itunes:title>Présentation de la JAMStack</itunes:title><itunes:subtitle
      >Présentation de la JAMStack, avantages et concepts</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>2</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Dans ce podcast, nous parlons de la JAMStack. Comment la JAMStack fonctionne, quelle est la différence avec les sites dynamiques du type PHP/WordPress. Quelles sont les limites et quels sont les avantages. https://jamstack.org/ Podcast présenté par : Alexandre Duval https://twitter.com/xlanex6 Patrick Faramaz https://twitter.com/PatrickFaramaz Service d&apos;hébergement JAMStack: Netlify
Vercel(now) Liste de liens vers les services autour de la JAMStack : https://github.com/automata/awesome-jamstack Outils pour développer un site statique : React JS : https://www.gatsbyjs.org/ Vue JS : https://gridsome.org/ Pure HTML : https://www.11ty.dev/ GO : https://gohugo.io/ Événement autour de la JAMStack https://jamstackconf.com/ Entre temps, Gatsby a annoncé l&apos;incremental builds : https://www.gatsbyjs.com/docs/incremental-builds/ Communauté JAMStack française : site web (billets originaux et traductions) : https://jamstatic.fr/ Slack avec beaucoup de sujets abordés et une communauté active (et accueillante) : https://jamstatic.fr/slack/</itunes:summary><itunes:author
      >Double slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Dans ce podcast, nous parlons de la JAMStack. Comment la JAMStack fonctionne, quelle est la différence avec les sites dynamiques du type PHP/WordPress. Quelles sont les limites et quels sont les avantages. https://jamstack.org/ Podcast présenté par : Alexandre Duval https://twitter.com/xlanex6 Patrick Faramaz https://twitter.com/PatrickFaramaz Service d&apos;hébergement JAMStack: Netlify
Vercel(now) Liste de liens vers les services autour de la JAMStack : https://github.com/automata/awesome-jamstack Outils pour développer un site statique : React JS : https://www.gatsbyjs.org/ Vue JS : https://gridsome.org/ Pure HTML : https://www.11ty.dev/ GO : https://gohugo.io/ Événement autour de la JAMStack https://jamstackconf.com/ Entre temps, Gatsby a annoncé l&apos;incremental builds : https://www.gatsbyjs.com/docs/incremental-builds/ Communauté JAMStack française : site web (billets originaux et traductions) : https://jamstatic.fr/ Slack avec beaucoup de sujets abordés et une communauté active (et accueillante) : https://jamstatic.fr/slack/</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >4825</itunes:duration></item><item><title
      ><![CDATA[Jamstatic fr, Forestry.io et Tina CMS avec Frank Taillandier]]></title><description
      ><![CDATA[<h2>Dans le première partie, nous allons parler de la communauté "Jamstatic FR"</h2>
<p>Une communauté qui souhaite réunir les personnes pour échanger autour des sites statiques, des services et des outils.
Sur le site, vous pouvez suivre l'actualité de la JAMStack et du statique. Sur le slack, vous pouvez échanger avec d'autres acteurs de la communauté pour avoir des avis, des retours d'expériences.
Vous pouvez également contribuer en écrivant des articles pour le site en ouvrant une PR sur le Github.</p>
<p><strong>La communauté "Jamstatic FR" accueillante se retrouve sur différents canaux :</strong></p>
<ul>
<li>Le site internet : <a href="https://jamstatic.fr/">https://jamstatic.fr/</a></li>
<li>Le compte Twitter : <a href="https://twitter.com/jamstatic_fr">@jamstatic_fr</a></li>
<li>Le slack : <a href="https://jamstatic.herokuapp.com/">https://jamstatic.herokuapp.com/</a></li>
<li>Le github : <a href="https://github.com/jamstatic">https://github.com/jamstatic</a></li>
<li>Le podcast : <a href="https://anchor.fm/jamstatic/">https://anchor.fm/jamstatic/</a></li>
</ul>
<h2>Dans la deuxième partie, nous abordons Forestry.io et Tina CMS</h2>
<p><a href="https://forestry.io/">Forestry</a> est un cms basé sur Git. Il se connecte à des services type Github, Gitlab pour éditer directement les fichiers dans le repository. Rien n'est stocké chez Forestry, dès que vous sauvez des valeurs dans l'administration Forestry, il effectue un commit sur le repository.</p>
<p>L'administration de Forestry est assez claire et assez configurable. Tout est configuré sur un fichier stocké sur votre projet.</p>
<p><a href="https://tina.io/">Tina CMS</a> est un système qui permet d'avoir une édition visuelle de votre contenu et directement sur votre site/app. Pour le moment, il est principalement orienté React JS mais il est prévu d'ouvrir à d'autre framework.
Forestry croit beaucoup au projet Tina CMS et investit de plus en plus sur le projet.</p>
<p>Nous vous laissons découvrir le service plus en détail en écoutant l'épisode numéro 19 avec notre invité:</p>
<ul>
<li>
<p>Frank Taillandier,</p>
<ul>
<li><a href="https://twitter.com/FrankTLDR">https://twitter.com/FrankTLDR</a></li>
<li><a href="https://github.com/DirtyF">https://github.com/DirtyF</a></li>
</ul>
</li>
</ul>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/jamstatic-fr-forestry/</link><guid
        isPermaLink="false"
      >e920b97fca291002903e32ea3aefff46</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Fri, 29 Jan 2021 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_019_jamstatic.mp3"
        length="108790453"
        type="audio/mpeg"
      /><itunes:title
      >Jamstatic fr, Forestry.io et Tina CMS avec Frank Taillandier</itunes:title><itunes:subtitle
      >Un épisode avec notre invité Frank Taillandier qui a créé la communauté Jamstatic FR et qui travaille pour Forestry.io. Un épisode orienté statique !</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>19</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Dans le première partie, nous allons parler de la communauté &quot;Jamstatic FR&quot; Une communauté qui souhaite réunir les personnes pour échanger autour des sites statiques, des services et des outils.
Sur le site, vous pouvez suivre l&apos;actualité de la JAMStack et du statique. Sur le slack, vous pouvez échanger avec d&apos;autres acteurs de la communauté pour avoir des avis, des retours d&apos;expériences.
Vous pouvez également contribuer en écrivant des articles pour le site en ouvrant une PR sur le Github. La communauté &quot;Jamstatic FR&quot; accueillante se retrouve sur différents canaux : Le site internet : https://jamstatic.fr/ Le compte Twitter : @jamstatic_fr Le slack : https://jamstatic.herokuapp.com/ Le github : https://github.com/jamstatic Le podcast : https://anchor.fm/jamstatic/ Dans la deuxième partie, nous abordons Forestry.io et Tina CMS Forestry est un cms basé sur Git. Il se connecte à des services type Github, Gitlab pour éditer directement les fichiers dans le repository. Rien n&apos;est stocké chez Forestry, dès que vous sauvez des valeurs dans l&apos;administration Forestry, il effectue un commit sur le repository. L&apos;administration de Forestry est assez claire et assez configurable. Tout est configuré sur un fichier stocké sur votre projet. Tina CMS est un système qui permet d&apos;avoir une édition visuelle de votre contenu et directement sur votre site/app. Pour le moment, il est principalement orienté React JS mais il est prévu d&apos;ouvrir à d&apos;autre framework.
Forestry croit beaucoup au projet Tina CMS et investit de plus en plus sur le projet. Nous vous laissons découvrir le service plus en détail en écoutant l&apos;épisode numéro 19 avec notre invité: Frank Taillandier, https://twitter.com/FrankTLDR https://github.com/DirtyF Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Dans le première partie, nous allons parler de la communauté &quot;Jamstatic FR&quot; Une communauté qui souhaite réunir les personnes pour échanger autour des sites statiques, des services et des outils.
Sur le site, vous pouvez suivre l&apos;actualité de la JAMStack et du statique. Sur le slack, vous pouvez échanger avec d&apos;autres acteurs de la communauté pour avoir des avis, des retours d&apos;expériences.
Vous pouvez également contribuer en écrivant des articles pour le site en ouvrant une PR sur le Github. La communauté &quot;Jamstatic FR&quot; accueillante se retrouve sur différents canaux : Le site internet : https://jamstatic.fr/ Le compte Twitter : @jamstatic_fr Le slack : https://jamstatic.herokuapp.com/ Le github : https://github.com/jamstatic Le podcast : https://anchor.fm/jamstatic/ Dans la deuxième partie, nous abordons Forestry.io et Tina CMS Forestry est un cms basé sur Git. Il se connecte à des services type Github, Gitlab pour éditer directement les fichiers dans le repository. Rien n&apos;est stocké chez Forestry, dès que vous sauvez des valeurs dans l&apos;administration Forestry, il effectue un commit sur le repository. L&apos;administration de Forestry est assez claire et assez configurable. Tout est configuré sur un fichier stocké sur votre projet. Tina CMS est un système qui permet d&apos;avoir une édition visuelle de votre contenu et directement sur votre site/app. Pour le moment, il est principalement orienté React JS mais il est prévu d&apos;ouvrir à d&apos;autre framework.
Forestry croit beaucoup au projet Tina CMS et investit de plus en plus sur le projet. Nous vous laissons découvrir le service plus en détail en écoutant l&apos;épisode numéro 19 avec notre invité: Frank Taillandier, https://twitter.com/FrankTLDR https://github.com/DirtyF Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >4531</itunes:duration></item><item><title
      ><![CDATA[jQuery en 2020]]></title><description
      ><![CDATA[<p>Faut-il encore utiliser jQuery en 2020 ? Pas de réponse absolue et tranchée. On pèse le pour et le contre, puis on vous livre notre avis.</p>
<p>Avec l’évolution des navigateurs, l’uniformisation et la standardisation de JavaScript. Est ce qu’il est encore vraiment nécessaire d’embarquer et d’utiliser jQuery sur nos sites web ?</p>
<p><strong>Correction</strong> : Wordpress ne charge pas jQuery par défaut. Il est disponible, mais il faut l'ajouter dans le code du thème pour l'utiliser en front.</p>
<p><a href="https://developer.wordpress.org/reference/functions/wp_enqueue_script/#default-scripts-and-js-libraries-included-and-registered-by-wordpress">listes des scripts par défaut dans wordpress</a></p>
<p><strong>Les principales Librairies créées entre 2004 et 2010</strong></p>
<p><a href="https://fr.wikipedia.org/wiki/Dojo_Toolkit">Dojo</a> : 2004
<a href="http://prototypejs.org/">Prototype</a> : 2005
<a href="https://jquery.com/">jQuery</a> : 2006
<a href="https://mootools.net/">MooTools</a> : 2006
<a href="http://script.aculo.us/">script.aculo.us</a> : 2010</p>
<p><strong>Supprimer jQuery sur un code existant</strong></p>
<p>Un article de github sur la suppression de JQUERY sur GitHub en 2018.
<a href="https://github.blog/2018-09-06-removing-jquery-from-github-frontend/">https://github.blog/2018-09-06-removing-jquery-from-github-frontend/</a></p>
<p><strong>Remplacer jQuery par une autre librarie (joke)</strong></p>
<p><a href="http://vanilla-js.com/">http://vanilla-js.com/</a></p>
<h2>Réponse de la communauté</h2>
<p>Les réponses de la question posée sur <a href="https://www.linkedin.com/posts/alexduval71_jquery-et-2020-ami-ou-ennemi-perso-si-activity-6688330120941314048-JB8a">Linkedin</a> :</p>
<ul>
<li>Dépendance à Wordpress. Sachant que wp utilise encore la version 1</li>
<li>Dépendance à bootstrap</li>
<li>Utilisé par habitude</li>
<li>Toujours enseigné dans certaines formations</li>
<li>Encore bien utilisé dans certaine entreprise</li>
</ul>
<p>Notes perso :</p>
<ul>
<li>Dans l'idéal, utiliser un mix de vanilla et de jQuery si il est chargé par défaut (WP)</li>
<li>JQuery est plus lent que vanilla JS</li>
<li>En règle générale, il faut éviter les manipulations du DOM. Utiliser une lib type Vue JS ou React qui change uniquement les éléments qui ont changé.</li>
<li>Éviter les animations en JS.</li>
</ul>
<p>Petit sondage sur <a href="https://mobile.twitter.com/PatrickFaramaz/status/1281517173396189184">Twitter</a> :</p>
<p>jQuery, est-ce que vous en avez encore besoin dans vos projets en 2020 ?
27 votes :</p>
<ul>
<li>oui 15%</li>
<li>non 66%</li>
<li>ça dépend 18%</li>
</ul>
<h2>Liste de Liens:</h2>
<p><strong>Comparaison entre méthodes jQuery et pure JS :</strong></p>
<ul>
<li><a href="http://youmightnotneedjquery.com/">http://youmightnotneedjquery.com/</a></li>
<li><a href="https://github.com/pablorgarcia/vanilla-js-vs-jquery">https://github.com/pablorgarcia/vanilla-js-vs-jquery</a></li>
</ul>
<p><strong>Article sur la fragmentation des version de jQuery :</strong></p>
<ul>
<li><a href="https://love2dev.com/blog/jquery-obsolete/">https://love2dev.com/blog/jquery-obsolete/</a></li>
</ul>
<p><strong>Stats sur jQuery et Bootstrap :</strong></p>
<ul>
<li><a href="https://w3techs.com/technologies/comparison/js-bootstrap,js-jquery">https://w3techs.com/technologies/comparison/js-bootstrap,js-jquery</a></li>
</ul>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/jquery/</link><guid
        isPermaLink="false"
      >ebbc144f9bbbd6e5a36925b7d2359da6</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Sat, 01 Aug 2020 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_009_jquery.mp3"
        length="86090341"
        type="audio/mpeg"
      /><itunes:title>jQuery en 2020</itunes:title><itunes:subtitle
      >Faut-il encore utiliser jQuery en 2020 ? Pas de réponse absolue et tranchée. On pèse le pour et le contre, puis on vous livre notre avis.</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>9</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Faut-il encore utiliser jQuery en 2020 ? Pas de réponse absolue et tranchée. On pèse le pour et le contre, puis on vous livre notre avis. Avec l’évolution des navigateurs, l’uniformisation et la standardisation de JavaScript. Est ce qu’il est encore vraiment nécessaire d’embarquer et d’utiliser jQuery sur nos sites web ? Correction : Wordpress ne charge pas jQuery par défaut. Il est disponible, mais il faut l&apos;ajouter dans le code du thème pour l&apos;utiliser en front. listes des scripts par défaut dans wordpress Les principales Librairies créées entre 2004 et 2010 Dojo : 2004
Prototype : 2005
jQuery : 2006
MooTools : 2006
script.aculo.us : 2010 Supprimer jQuery sur un code existant Un article de github sur la suppression de JQUERY sur GitHub en 2018.
https://github.blog/2018-09-06-removing-jquery-from-github-frontend/ Remplacer jQuery par une autre librarie (joke) http://vanilla-js.com/ Réponse de la communauté Les réponses de la question posée sur Linkedin : Dépendance à Wordpress. Sachant que wp utilise encore la version 1 Dépendance à bootstrap Utilisé par habitude Toujours enseigné dans certaines formations Encore bien utilisé dans certaine entreprise Notes perso : Dans l&apos;idéal, utiliser un mix de vanilla et de jQuery si il est chargé par défaut (WP) JQuery est plus lent que vanilla JS En règle générale, il faut éviter les manipulations du DOM. Utiliser une lib type Vue JS ou React qui change uniquement les éléments qui ont changé. Éviter les animations en JS. Petit sondage sur Twitter : jQuery, est-ce que vous en avez encore besoin dans vos projets en 2020 ?
27 votes : oui 15% non 66% ça dépend 18% Liste de Liens: Comparaison entre méthodes jQuery et pure JS : http://youmightnotneedjquery.com/ https://github.com/pablorgarcia/vanilla-js-vs-jquery Article sur la fragmentation des version de jQuery : https://love2dev.com/blog/jquery-obsolete/ Stats sur jQuery et Bootstrap : https://w3techs.com/technologies/comparison/js-bootstrap,js-jquery Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Faut-il encore utiliser jQuery en 2020 ? Pas de réponse absolue et tranchée. On pèse le pour et le contre, puis on vous livre notre avis. Avec l’évolution des navigateurs, l’uniformisation et la standardisation de JavaScript. Est ce qu’il est encore vraiment nécessaire d’embarquer et d’utiliser jQuery sur nos sites web ? Correction : Wordpress ne charge pas jQuery par défaut. Il est disponible, mais il faut l&apos;ajouter dans le code du thème pour l&apos;utiliser en front. listes des scripts par défaut dans wordpress Les principales Librairies créées entre 2004 et 2010 Dojo : 2004
Prototype : 2005
jQuery : 2006
MooTools : 2006
script.aculo.us : 2010 Supprimer jQuery sur un code existant Un article de github sur la suppression de JQUERY sur GitHub en 2018.
https://github.blog/2018-09-06-removing-jquery-from-github-frontend/ Remplacer jQuery par une autre librarie (joke) http://vanilla-js.com/ Réponse de la communauté Les réponses de la question posée sur Linkedin : Dépendance à Wordpress. Sachant que wp utilise encore la version 1 Dépendance à bootstrap Utilisé par habitude Toujours enseigné dans certaines formations Encore bien utilisé dans certaine entreprise Notes perso : Dans l&apos;idéal, utiliser un mix de vanilla et de jQuery si il est chargé par défaut (WP) JQuery est plus lent que vanilla JS En règle générale, il faut éviter les manipulations du DOM. Utiliser une lib type Vue JS ou React qui change uniquement les éléments qui ont changé. Éviter les animations en JS. Petit sondage sur Twitter : jQuery, est-ce que vous en avez encore besoin dans vos projets en 2020 ?
27 votes : oui 15% non 66% ça dépend 18% Liste de Liens: Comparaison entre méthodes jQuery et pure JS : http://youmightnotneedjquery.com/ https://github.com/pablorgarcia/vanilla-js-vs-jquery Article sur la fragmentation des version de jQuery : https://love2dev.com/blog/jquery-obsolete/ Stats sur jQuery et Bootstrap : https://w3techs.com/technologies/comparison/js-bootstrap,js-jquery Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >3611</itunes:duration></item><item><title
      ><![CDATA[Alpine JS, petit mais costaud !]]></title><description
      ><![CDATA[<p>Dans cet épisode, nous allons parler d'un framework innovant qui apporte un peu de nouveauté dans le monde des frameworks Javascript.
Alpine JS est un framework léger (moins de 9kb) qui vient se placer entre les frameworks/libraries complets type Vue JS et jQuery/Vanilla JS.</p>
<p>On peut l'utiliser facilement en insérant le script Javascript dans la page ou en installant le package npm.
Il utilise une syntaxe qui s'inspire de Tailwind CSS et permet de créer des composants dynamiques facilement.</p>
<p>Il est plutôt destiné à être utilisé sur des sites classiques. Un peu moins pour créer des applications complètes comme on peut le faire avec React ou Vue JS.</p>
<p>Nous vous laissons découvrir Alpine JS plus en détail en écoutant l'épisode numéro 18.</p>
<h2>Les liens de l'épisode :</h2>
<ul>
<li><a href="https://github.com/alpinejs/alpine">Repo github Alpine JS</a></li>
<li><a href="https://pixenjoy.com/notes/le-framework-alpinejs/">Article sur Alpine JS</a></li>
</ul>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/javascript-alpine-js/</link><guid
        isPermaLink="false"
      >7de0a7e693b772b0615747c7c5e3a0f8</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Mon, 11 Jan 2021 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_018_alpinejs.mp3"
        length="53302566"
        type="audio/mpeg"
      /><itunes:title
      >Alpine JS, petit mais costaud !</itunes:title><itunes:subtitle
      >Alpine JS est un framework léger (moins de 9kb) qui vient se placer entre les FW complets type Vue JS et jQuery/Vanilla JS.</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>18</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Dans cet épisode, nous allons parler d&apos;un framework innovant qui apporte un peu de nouveauté dans le monde des frameworks Javascript.
Alpine JS est un framework léger (moins de 9kb) qui vient se placer entre les frameworks/libraries complets type Vue JS et jQuery/Vanilla JS. On peut l&apos;utiliser facilement en insérant le script Javascript dans la page ou en installant le package npm.
Il utilise une syntaxe qui s&apos;inspire de Tailwind CSS et permet de créer des composants dynamiques facilement. Il est plutôt destiné à être utilisé sur des sites classiques. Un peu moins pour créer des applications complètes comme on peut le faire avec React ou Vue JS. Nous vous laissons découvrir Alpine JS plus en détail en écoutant l&apos;épisode numéro 18. Les liens de l&apos;épisode : Repo github Alpine JS Article sur Alpine JS Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Dans cet épisode, nous allons parler d&apos;un framework innovant qui apporte un peu de nouveauté dans le monde des frameworks Javascript.
Alpine JS est un framework léger (moins de 9kb) qui vient se placer entre les frameworks/libraries complets type Vue JS et jQuery/Vanilla JS. On peut l&apos;utiliser facilement en insérant le script Javascript dans la page ou en installant le package npm.
Il utilise une syntaxe qui s&apos;inspire de Tailwind CSS et permet de créer des composants dynamiques facilement. Il est plutôt destiné à être utilisé sur des sites classiques. Un peu moins pour créer des applications complètes comme on peut le faire avec React ou Vue JS. Nous vous laissons découvrir Alpine JS plus en détail en écoutant l&apos;épisode numéro 18. Les liens de l&apos;épisode : Repo github Alpine JS Article sur Alpine JS Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >2220</itunes:duration></item><item><title
      ><![CDATA[MeiliSearch, rustique à la française !]]></title><description
      ><![CDATA[<h2>Un épisode avec 2 invités : Thomas cofondateur et Marin développeur Core de MeiliSearch. Nous allons parler de ce moteur de recherche open source et du langage Rust.</h2>
<p><a href="https://www.meilisearch.com/">MeiliSearch</a> est un moteur de recherche open source.
Développé sur le langage Rust pour la partie Core, il est possible de le connecter à de multiples autres langages pour l'utiliser sur votre projet. Sans avoir besoin de coder en Rust, vous pouvez alimenter le moteur avec vos data et effectuer des recherches pour les afficher sur votre site.
Vous pouvez installer un serveur facilement via des services comme Digital Ocean par exemple. Ainsi vos données vous appartiennent et vous gérez vous-même votre service de recherche. Vous avez également un coût mensuel maitrisé.</p>
<h3>Historique :</h3>
<p>C'est lors d'un stage chez un gros acteur du e-commerce français qu'ils sont confrontés à la difficulté d'implémenter un moteur de recherche. Ils réalisent une première version lors du stage avec le langage GO.
Plus tard, vers fin 2018, l'aventure continue avec une nouvelle version basée sur Rust.</p>
<h2>Rust</h2>
<p>Dans l'épisode, nous parlons aussi du langage Rust. Petit retour d’expérience de nos deux invités qui utilisent le langage au quotidien pour en savoir un peu plus sur Rust.</p>
<p>Nous vous laissons découvrir MeiliSearch et Rust plus en détail en écoutant l'épisode numéro 23 avec nos invités:</p>
<ul>
<li>Thomas,<a href="https://twitter.com/totolapaille">@totolapaille</a></li>
<li>Marin, <a href="https://twitter.com/Marinpostma">@Marinpostma</a></li>
</ul>
<h3>Les liens de l'épisode :</h3>
<ul>
<li><a href="https://www.meilisearch.com/">MeiliSearch</a></li>
<li><a href="https://docs.meilisearch.com/">Doc</a></li>
<li><a href="https://slack.meilisearch.com">Le slack</a></li>
<li><a href="https://github.com/meilisearch/meilisearch">Le github</a></li>
<li><a href="https://docs.meilisearch.com/learn/getting_started/quick_start.html#download-and-launch">Getting started</a></li>
<li><a href="https://twitter.com/meilisearch">twitter</a></li>
</ul>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/meilisearch/</link><guid
        isPermaLink="false"
      >e514d4fc0073c9bb7ad8625d7a190e9a</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Fri, 14 May 2021 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_023_meillisearch.mp3"
        length="70557992"
        type="audio/mpeg"
      /><itunes:title
      >MeiliSearch, rustique à la française !</itunes:title><itunes:subtitle
      >Un épisode avec 2 invités : Thomas cofondateur et Marin développeur Core de MeiliSearch. Nous allons parler de ce moteur de recherche open source et du langage Rust</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>23</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Un épisode avec 2 invités : Thomas cofondateur et Marin développeur Core de MeiliSearch. Nous allons parler de ce moteur de recherche open source et du langage Rust. MeiliSearch est un moteur de recherche open source.
Développé sur le langage Rust pour la partie Core, il est possible de le connecter à de multiples autres langages pour l&apos;utiliser sur votre projet. Sans avoir besoin de coder en Rust, vous pouvez alimenter le moteur avec vos data et effectuer des recherches pour les afficher sur votre site.
Vous pouvez installer un serveur facilement via des services comme Digital Ocean par exemple. Ainsi vos données vous appartiennent et vous gérez vous-même votre service de recherche. Vous avez également un coût mensuel maitrisé. Historique : C&apos;est lors d&apos;un stage chez un gros acteur du e-commerce français qu&apos;ils sont confrontés à la difficulté d&apos;implémenter un moteur de recherche. Ils réalisent une première version lors du stage avec le langage GO.
Plus tard, vers fin 2018, l&apos;aventure continue avec une nouvelle version basée sur Rust. Rust Dans l&apos;épisode, nous parlons aussi du langage Rust. Petit retour d’expérience de nos deux invités qui utilisent le langage au quotidien pour en savoir un peu plus sur Rust. Nous vous laissons découvrir MeiliSearch et Rust plus en détail en écoutant l&apos;épisode numéro 23 avec nos invités: Thomas,@totolapaille Marin, @Marinpostma Les liens de l&apos;épisode : MeiliSearch Doc Le slack Le github Getting started twitter Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Un épisode avec 2 invités : Thomas cofondateur et Marin développeur Core de MeiliSearch. Nous allons parler de ce moteur de recherche open source et du langage Rust. MeiliSearch est un moteur de recherche open source.
Développé sur le langage Rust pour la partie Core, il est possible de le connecter à de multiples autres langages pour l&apos;utiliser sur votre projet. Sans avoir besoin de coder en Rust, vous pouvez alimenter le moteur avec vos data et effectuer des recherches pour les afficher sur votre site.
Vous pouvez installer un serveur facilement via des services comme Digital Ocean par exemple. Ainsi vos données vous appartiennent et vous gérez vous-même votre service de recherche. Vous avez également un coût mensuel maitrisé. Historique : C&apos;est lors d&apos;un stage chez un gros acteur du e-commerce français qu&apos;ils sont confrontés à la difficulté d&apos;implémenter un moteur de recherche. Ils réalisent une première version lors du stage avec le langage GO.
Plus tard, vers fin 2018, l&apos;aventure continue avec une nouvelle version basée sur Rust. Rust Dans l&apos;épisode, nous parlons aussi du langage Rust. Petit retour d’expérience de nos deux invités qui utilisent le langage au quotidien pour en savoir un peu plus sur Rust. Nous vous laissons découvrir MeiliSearch et Rust plus en détail en écoutant l&apos;épisode numéro 23 avec nos invités: Thomas,@totolapaille Marin, @Marinpostma Les liens de l&apos;épisode : MeiliSearch Doc Le slack Le github Getting started twitter Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >2939</itunes:duration></item><item><title
      ><![CDATA[Épisode spécial news avec React 17, Webpack 5, Next JS 10, Gatsby...]]></title><description
      ><![CDATA[<p>Un épisode spécial news. Nous allons revenir sur les dernières sorties. Sur le passage de la documentation web MDN en mode JAMStack. Puis parler d'un article comparatif sur les générateurs de site statique : Hugo, Eleventy, Jekyll, Gatsby, Next, Nuxt.</p>
<h2>Webpack 5</h2>
<ul>
<li><a href="https://medium.com/frontend-digest/whats-new-in-webpack-5-ef619bb74fae">Whats new in webpack 5</a></li>
<li><a href="https://webpack.js.org/migrate/5/">Doc migration 4 to 5</a></li>
</ul>
<h2>React 17</h2>
<ul>
<li><a href="https://reactjs.org/blog/2020/10/20/react-v17.html">Annonce de la version 17</a></li>
</ul>
<h2>Next JS 10</h2>
<ul>
<li><a href="https://medium.com/frontend-digest/whats-new-in-nextjs-10-218d84145fea">Whats new in Next JS 10</a></li>
<li><a href="https://nextjs.org/blog/next-10">Annonce de Next JS 10</a></li>
<li><a href="https://vercel.com/docs/next.js/analytics">Next JS analytics</a></li>
<li><a href="https://nextjs.org/commerce">Next JS Commerce</a></li>
</ul>
<h2>Gatsby</h2>
<ul>
<li><a href="https://www.gatsbyjs.com/docs/file-system-page-creation/">File system Route API</a></li>
<li><a href="https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-admin/README.md">Gatsby Admin</a></li>
<li><a href="https://github.com/gatsbyjs/gatsby/discussions/27667">Gatsby Function</a></li>
<li><a href="https://github.com/gatsbyjs/gatsby/discussions/27668">New Gatsby Image API</a></li>
</ul>
<h2>Angular</h2>
<ul>
<li><a href="https://scully.io/">Scully</a></li>
</ul>
<h2>MDN en mode JAMStack</h2>
<ul>
<li><a href="https://hacks.mozilla.org/2020/10/mdn-web-docs-evolves-lowdown-on-the-upcoming-new-platform/">article</a></li>
</ul>
<h2>Article: "comparaison des temps de compilation des GSS"</h2>
<ul>
<li><a href="https://jamstatic.fr/2020/10/31/comparatif-performance-generateurs-de-site-statique/">article fr</a></li>
<li><a href="https://css-tricks.com/comparing-static-site-generator-build-times/">article original</a></li>
</ul>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/news-octobre-2020/</link><guid
        isPermaLink="false"
      >085209868df93d54ab3b514a48b426d8</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Thu, 05 Nov 2020 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_015_newsOCT.mp3"
        length="72316189"
        type="audio/mpeg"
      /><itunes:title
      >Épisode spécial news avec React 17, Webpack 5, Next JS 10, Gatsby...</itunes:title><itunes:subtitle
      >Nous allons revenir sur les dernières sorties. Sur le passage de la documentation web MDN en mode JAMStack. Puis parler d&apos;un article comparatif sur les générateurs de site statique.</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>15</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Un épisode spécial news. Nous allons revenir sur les dernières sorties. Sur le passage de la documentation web MDN en mode JAMStack. Puis parler d&apos;un article comparatif sur les générateurs de site statique : Hugo, Eleventy, Jekyll, Gatsby, Next, Nuxt. Webpack 5 Whats new in webpack 5 Doc migration 4 to 5 React 17 Annonce de la version 17 Next JS 10 Whats new in Next JS 10 Annonce de Next JS 10 Next JS analytics Next JS Commerce Gatsby File system Route API Gatsby Admin Gatsby Function New Gatsby Image API Angular Scully MDN en mode JAMStack article Article: &quot;comparaison des temps de compilation des GSS&quot; article fr article original Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Un épisode spécial news. Nous allons revenir sur les dernières sorties. Sur le passage de la documentation web MDN en mode JAMStack. Puis parler d&apos;un article comparatif sur les générateurs de site statique : Hugo, Eleventy, Jekyll, Gatsby, Next, Nuxt. Webpack 5 Whats new in webpack 5 Doc migration 4 to 5 React 17 Annonce de la version 17 Next JS 10 Whats new in Next JS 10 Annonce de Next JS 10 Next JS analytics Next JS Commerce Gatsby File system Route API Gatsby Admin Gatsby Function New Gatsby Image API Angular Scully MDN en mode JAMStack article Article: &quot;comparaison des temps de compilation des GSS&quot; article fr article original Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >3012</itunes:duration></item><item><title
      ><![CDATA[Nuxt.JS avec Sébastien Chopin]]></title><description
      ><![CDATA[<h2>Dans cet épisode, nous avons le plaisir de recevoir Sébastien Chopin pour parler du framework Nuxt.JS qui arrive dans sa 3e version prochainement</h2>
<p>Sébastien Chopin est le cocréateur de Nuxt.JS (l'autre personne est son frère ;)).
Avec lui, nous revenons sur l’histoire de la création de <strong>Nuxt.JS</strong>. Comment, pourquoi il a été créé et l’évolution du framework.
Comment aujourd’hui, la société <strong>NuxtLab</strong>, qui est derrière le projet open source, réussit à se financer pour continuer à développer et promouvoir <strong>Nuxt.JS</strong>.
Nous revenons également sur les principales fonctionnalités de <strong>Nuxt.JS</strong> 3.</p>
<p>Un épisode très intéressant qui nous l’espérons va vous plaire.</p>
<ul>
<li>Sébastien Chopin : <a href="https://twitter.com/Atinux">@Atinux</a></li>
</ul>
<h2>L'histoire de Nuxt.JS</h2>
<p>Sébastien Chopin poussa son premier commit pour le projet <strong>Nuxt.js</strong> le <strong>26 octobre 2016</strong>. L'idée de <strong>Nuxt.JS</strong> est née après la refonte d'un site e-commerce basé des technologies web open source moderne : Vue 2, Node.js et Webpack.
À la création de <strong>Nuxt.JS</strong>, le rendu côté serveur des applications <strong>Vue.js</strong> relevait plus du hacking que d'une méthode officielle et le seul exemple disponible était publié par <strong>Evan You</strong> (Créateur de Vue.js) sur Hacker New.
Malgré cela, les 2 frères Chopin relevèrent le challenge et <strong>Nuxt.JS</strong> était bien née !</p>
<h2>Nuxt.JS</h2>
<p><strong>Nuxt.JS</strong> est un framework open source. Il permet de développer des applications robustes et structurées grâce à une surcouche au-dessus de la librairie <strong>Vue.JS</strong>.
Il permet de supprimer toute la partie configuration et de se concentrer sur la partie métier de votre application.
<strong>Nuxt.JS</strong> permet également différents rendus de votre application :</p>
<ul>
<li>rendu serveur</li>
<li>rendu uniquement client</li>
<li>rendu complètement statique</li>
</ul>
<p>La version 3 est une grosse refonte du framework qui nécessite un gros travail de la part de l'équipe et de la communauté. Pour le moment, la version bêta a été rendue publique le 12 octobre 2021.</p>
<h2>Liens de l'épisode</h2>
<ul>
<li><a href="https://nuxtjs.org/">Nuxt.JS</a></li>
<li><a href="https://nuxtlabs.com/">NuxtLabs</a></li>
<li><a href="https://github.com/nuxt">GitHub Nuxt</a></li>
<li><a href="https://github.com/nuxtlabs">GitHub NuxtLabs</a></li>
</ul>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/nuxt-sebastien-chopin/</link><guid
        isPermaLink="false"
      >24879b619ab1bc5eb3a7aabe2bbeb354</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Thu, 11 Nov 2021 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_029_nuxt.mp3"
        length="93272026"
        type="audio/mpeg"
      /><itunes:title
      >Nuxt.JS avec Sébastien Chopin</itunes:title><itunes:subtitle
      >Dans cet épisode, nous avons le plaisir de recevoir Sébastien Chopin pour parler du framework Nuxt.JS qui arrive dans sa 3e version prochainement.</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>29</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Dans cet épisode, nous avons le plaisir de recevoir Sébastien Chopin pour parler du framework Nuxt.JS qui arrive dans sa 3e version prochainement Sébastien Chopin est le cocréateur de Nuxt.JS (l&apos;autre personne est son frère ;)).
Avec lui, nous revenons sur l’histoire de la création de Nuxt.JS. Comment, pourquoi il a été créé et l’évolution du framework.
Comment aujourd’hui, la société NuxtLab, qui est derrière le projet open source, réussit à se financer pour continuer à développer et promouvoir Nuxt.JS.
Nous revenons également sur les principales fonctionnalités de Nuxt.JS 3. Un épisode très intéressant qui nous l’espérons va vous plaire. Sébastien Chopin : @Atinux L&apos;histoire de Nuxt.JS Sébastien Chopin poussa son premier commit pour le projet Nuxt.js le 26 octobre 2016. L&apos;idée de Nuxt.JS est née après la refonte d&apos;un site e-commerce basé des technologies web open source moderne : Vue 2, Node.js et Webpack.
À la création de Nuxt.JS, le rendu côté serveur des applications Vue.js relevait plus du hacking que d&apos;une méthode officielle et le seul exemple disponible était publié par Evan You (Créateur de Vue.js) sur Hacker New.
Malgré cela, les 2 frères Chopin relevèrent le challenge et Nuxt.JS était bien née ! Nuxt.JS Nuxt.JS est un framework open source. Il permet de développer des applications robustes et structurées grâce à une surcouche au-dessus de la librairie Vue.JS.
Il permet de supprimer toute la partie configuration et de se concentrer sur la partie métier de votre application.
Nuxt.JS permet également différents rendus de votre application : rendu serveur rendu uniquement client rendu complètement statique La version 3 est une grosse refonte du framework qui nécessite un gros travail de la part de l&apos;équipe et de la communauté. Pour le moment, la version bêta a été rendue publique le 12 octobre 2021. Liens de l&apos;épisode Nuxt.JS NuxtLabs GitHub Nuxt GitHub NuxtLabs Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Dans cet épisode, nous avons le plaisir de recevoir Sébastien Chopin pour parler du framework Nuxt.JS qui arrive dans sa 3e version prochainement Sébastien Chopin est le cocréateur de Nuxt.JS (l&apos;autre personne est son frère ;)).
Avec lui, nous revenons sur l’histoire de la création de Nuxt.JS. Comment, pourquoi il a été créé et l’évolution du framework.
Comment aujourd’hui, la société NuxtLab, qui est derrière le projet open source, réussit à se financer pour continuer à développer et promouvoir Nuxt.JS.
Nous revenons également sur les principales fonctionnalités de Nuxt.JS 3. Un épisode très intéressant qui nous l’espérons va vous plaire. Sébastien Chopin : @Atinux L&apos;histoire de Nuxt.JS Sébastien Chopin poussa son premier commit pour le projet Nuxt.js le 26 octobre 2016. L&apos;idée de Nuxt.JS est née après la refonte d&apos;un site e-commerce basé des technologies web open source moderne : Vue 2, Node.js et Webpack.
À la création de Nuxt.JS, le rendu côté serveur des applications Vue.js relevait plus du hacking que d&apos;une méthode officielle et le seul exemple disponible était publié par Evan You (Créateur de Vue.js) sur Hacker New.
Malgré cela, les 2 frères Chopin relevèrent le challenge et Nuxt.JS était bien née ! Nuxt.JS Nuxt.JS est un framework open source. Il permet de développer des applications robustes et structurées grâce à une surcouche au-dessus de la librairie Vue.JS.
Il permet de supprimer toute la partie configuration et de se concentrer sur la partie métier de votre application.
Nuxt.JS permet également différents rendus de votre application : rendu serveur rendu uniquement client rendu complètement statique La version 3 est une grosse refonte du framework qui nécessite un gros travail de la part de l&apos;équipe et de la communauté. Pour le moment, la version bêta a été rendue publique le 12 octobre 2021. Liens de l&apos;épisode Nuxt.JS NuxtLabs GitHub Nuxt GitHub NuxtLabs Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >3885</itunes:duration></item><item><title
      ><![CDATA[Prisma ORM]]></title><description
      ><![CDATA[<h2>Un épisode "explore" dans lequel Alex nous présente l'ORM Prisma</h2>
<ul>
<li>Le son de Patrick est pas terrible, toutes nos escuses pour ça. Nous allons améliorer ça dans les prochains épisodes.</li>
</ul>
<h2>Prisma ORM</h2>
<blockquote>
<p><strong>"V2, j’oublie la V1 et je reprends depuis le début !"</strong></p>
</blockquote>
<p><strong>Prisma</strong> est un ORM (object-relational mapping) open source écrit en <strong>Rust</strong>. Il est compatible <strong>JavaScript/TypeScript</strong> et <strong>Go</strong>.</p>
<p>Au départ, <a href="https://www.prisma.io/">Prisma</a> dans sa version 1, était une sorte de générateur d'API. Vous lui donniez une DB et il vous donnait accès à des routes et une API graphQL pour récupérer les data.
Après un virage à 180 degrés, la V2 n'a plus rien a voir avec la V1. Pour la V2, <strong>Prisma</strong> est désormais un ORM.</p>
<p>Un <strong>ORM</strong> est un système qui vous permet de gérer les data d'une base de données en manipulant des objets. Les objets représentent les data et vous n'écrivez normalement jamais de query vers la base. Par exemple, pour une table "user", vous avez accès à un objet <code>User</code> et vous interrogez la base via cet objet.</p>
<p>Il gère plusieurs systèmes de base de données : Postgres / Mysql / SQlite / SQLServer / MongoDB</p>
<p><strong>Prisma</strong> est présenté sou 4 modules : CLIENT / MIGRATE / STUDIO / DATA PLATFORM ( early stage )</p>
<h3>Client</h3>
<p>Cette partie gère:</p>
<ul>
<li>la connexion avec les DB.</li>
<li>le schéma des modèles</li>
<li>la récupération des data et des queries</li>
</ul>
<h3>Migrate</h3>
<p>Cette partie gère les migrations. Pour mettre à jour une DB en prod quand vous modifiez les modèles en développement.</p>
<h3>Studio</h3>
<p>Cette partie offre une interface de visualisation dans le style PHPMyAdmin, mais en beaucoup mieux !</p>
<h3>Data Platform</h3>
<p>Un service en early stage pour gérer un DB via une interface cloud.</p>
<h2>Outil recommandé</h2>
<ul>
<li><a href="https://syncinc.so">syncinc.so</a></li>
</ul>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/prisma-orm/</link><guid
        isPermaLink="false"
      >e5cc08fb14a96639f9b6a98f199d47f8</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Tue, 19 Oct 2021 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_028_prisma.mp3"
        length="82965444"
        type="audio/mpeg"
      /><itunes:title>Prisma ORM</itunes:title><itunes:subtitle
      >Un épisode &quot;explore&quot; dans lequel Alex nous présente l&apos;ORM Prisma.</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>28</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Un épisode &quot;explore&quot; dans lequel Alex nous présente l&apos;ORM Prisma Le son de Patrick est pas terrible, toutes nos escuses pour ça. Nous allons améliorer ça dans les prochains épisodes. Prisma ORM &quot;V2, j’oublie la V1 et je reprends depuis le début !&quot; Prisma est un ORM (object-relational mapping) open source écrit en Rust. Il est compatible JavaScript/TypeScript et Go. Au départ, Prisma dans sa version 1, était une sorte de générateur d&apos;API. Vous lui donniez une DB et il vous donnait accès à des routes et une API graphQL pour récupérer les data.
Après un virage à 180 degrés, la V2 n&apos;a plus rien a voir avec la V1. Pour la V2, Prisma est désormais un ORM. Un ORM est un système qui vous permet de gérer les data d&apos;une base de données en manipulant des objets. Les objets représentent les data et vous n&apos;écrivez normalement jamais de query vers la base. Par exemple, pour une table &quot;user&quot;, vous avez accès à un objet User et vous interrogez la base via cet objet. Il gère plusieurs systèmes de base de données : Postgres / Mysql / SQlite / SQLServer / MongoDB Prisma est présenté sou 4 modules : CLIENT / MIGRATE / STUDIO / DATA PLATFORM ( early stage ) Client Cette partie gère: la connexion avec les DB. le schéma des modèles la récupération des data et des queries Migrate Cette partie gère les migrations. Pour mettre à jour une DB en prod quand vous modifiez les modèles en développement. Studio Cette partie offre une interface de visualisation dans le style PHPMyAdmin, mais en beaucoup mieux ! Data Platform Un service en early stage pour gérer un DB via une interface cloud. Outil recommandé syncinc.so Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Un épisode &quot;explore&quot; dans lequel Alex nous présente l&apos;ORM Prisma Le son de Patrick est pas terrible, toutes nos escuses pour ça. Nous allons améliorer ça dans les prochains épisodes. Prisma ORM &quot;V2, j’oublie la V1 et je reprends depuis le début !&quot; Prisma est un ORM (object-relational mapping) open source écrit en Rust. Il est compatible JavaScript/TypeScript et Go. Au départ, Prisma dans sa version 1, était une sorte de générateur d&apos;API. Vous lui donniez une DB et il vous donnait accès à des routes et une API graphQL pour récupérer les data.
Après un virage à 180 degrés, la V2 n&apos;a plus rien a voir avec la V1. Pour la V2, Prisma est désormais un ORM. Un ORM est un système qui vous permet de gérer les data d&apos;une base de données en manipulant des objets. Les objets représentent les data et vous n&apos;écrivez normalement jamais de query vers la base. Par exemple, pour une table &quot;user&quot;, vous avez accès à un objet User et vous interrogez la base via cet objet. Il gère plusieurs systèmes de base de données : Postgres / Mysql / SQlite / SQLServer / MongoDB Prisma est présenté sou 4 modules : CLIENT / MIGRATE / STUDIO / DATA PLATFORM ( early stage ) Client Cette partie gère: la connexion avec les DB. le schéma des modèles la récupération des data et des queries Migrate Cette partie gère les migrations. Pour mettre à jour une DB en prod quand vous modifiez les modèles en développement. Studio Cette partie offre une interface de visualisation dans le style PHPMyAdmin, mais en beaucoup mieux ! Data Platform Un service en early stage pour gérer un DB via une interface cloud. Outil recommandé syncinc.so Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >3456</itunes:duration></item><item><title
      ><![CDATA[Live Share pour Visual Studio Code et des news]]></title><description
      ><![CDATA[<p>Dans cet épisode, nous faisons un retour sur l'utilisation de l'extension Live Share pour Visual Studio Code. Une extension qui permet de faire du pair programming à distance.
Nous revenons sur quelques actualités concernant les outils web diffusés durant l'été. Notamment la sortie de WordPress 5.5, les évolutions de Next et Nuxt sur la génération de site statique. Petite découverte également, avec Stormkit, un service d'hébergement équivalent à Netlify.</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare-pack">Live Share Extension Pack</a> pour Visual Studio Code.</p>
<h2>Les news de l'épisode</h2>
<h3>Worpress passe en version 5.5 :</h3>
<ul>
<li>Mise à jour automatique des plugins et des thèmes</li>
<li>plan de site XML en natif</li>
<li>lazy loading des images</li>
<li>Améliorations de gutenberg (A11y)</li>
<li>Block Directory. Installer et trouver facilement un bloc pour gutenberg.</li>
</ul>
<p>En tout, 165 améliorations, 310 correctifs de bugs.</p>
<h3>Incremental build pour Nuxt et Next :</h3>
<h4>Nuxt</h4>
<p>Avec la version 2.14 sortie fin juillet, la commande <code>nuxt generate</code> ne lance pas de build webpack si le code n'a pas changé, mais génère juste les nouvelles pages statiques. Un gros gain de vitesse pour générer un site statique.</p>
<p>Article de blog de <a href="https://nuxtjs.org/blog/nuxt-static-improvements">Nuxt version 2.14</a></p>
<h4>Next</h4>
<p>Next propose également l'Incremental Static Generation. Comme nuxt, il ajoute une page de contenu sans faire un build complet si le code n'a pas changé.
Mais avec la version 9.5, next propose l'Incremental Static Re-generation.
Une mise à jour du contenu lors du rendu via un paramètre (revalidate: 1). Plus besoin de regénérer le site. Supporté uniquement par Vercel pour le moment.</p>
<p><a href="https://nextjs.org/blog/next-9-5#stable-incremental-static-regeneration">Next version 9.5</a></p>
<h4>StormKit</h4>
<p>Un service équivalent à Netlify pour déployer vos sites statique ou SPA automatiquement. Par contre, c'est un service européen (Suisse). Ils utilisent AWS avec des serveurs à Francfort.</p>
<p><a href="https://www.stormkit.io/">Stormkit</a></p>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/pair-coding/</link><guid
        isPermaLink="false"
      >4a41f9e18d40f062964c77e641140c76</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Fri, 21 Aug 2020 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_010_pair_coding.mp3"
        length="62333031"
        type="audio/mpeg"
      /><itunes:title
      >Live Share pour Visual Studio Code et des news</itunes:title><itunes:subtitle
      >Un retour sur l&apos;utilisation de l&apos;extension Live Share pour Visual Studio Code. Une extension qui permet de faire du pair programming à distance. Nous revenons sur quelques actualités concernant les outils web diffusés durant l&apos;été.</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>10</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Dans cet épisode, nous faisons un retour sur l&apos;utilisation de l&apos;extension Live Share pour Visual Studio Code. Une extension qui permet de faire du pair programming à distance.
Nous revenons sur quelques actualités concernant les outils web diffusés durant l&apos;été. Notamment la sortie de WordPress 5.5, les évolutions de Next et Nuxt sur la génération de site statique. Petite découverte également, avec Stormkit, un service d&apos;hébergement équivalent à Netlify. Live Share Extension Pack pour Visual Studio Code. Les news de l&apos;épisode Worpress passe en version 5.5 : Mise à jour automatique des plugins et des thèmes plan de site XML en natif lazy loading des images Améliorations de gutenberg (A11y) Block Directory. Installer et trouver facilement un bloc pour gutenberg. En tout, 165 améliorations, 310 correctifs de bugs. Incremental build pour Nuxt et Next : Nuxt Avec la version 2.14 sortie fin juillet, la commande nuxt generate ne lance pas de build webpack si le code n&apos;a pas changé, mais génère juste les nouvelles pages statiques. Un gros gain de vitesse pour générer un site statique. Article de blog de Nuxt version 2.14 Next Next propose également l&apos;Incremental Static Generation. Comme nuxt, il ajoute une page de contenu sans faire un build complet si le code n&apos;a pas changé.
Mais avec la version 9.5, next propose l&apos;Incremental Static Re-generation.
Une mise à jour du contenu lors du rendu via un paramètre (revalidate: 1). Plus besoin de regénérer le site. Supporté uniquement par Vercel pour le moment. Next version 9.5 StormKit Un service équivalent à Netlify pour déployer vos sites statique ou SPA automatiquement. Par contre, c&apos;est un service européen (Suisse). Ils utilisent AWS avec des serveurs à Francfort. Stormkit Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Dans cet épisode, nous faisons un retour sur l&apos;utilisation de l&apos;extension Live Share pour Visual Studio Code. Une extension qui permet de faire du pair programming à distance.
Nous revenons sur quelques actualités concernant les outils web diffusés durant l&apos;été. Notamment la sortie de WordPress 5.5, les évolutions de Next et Nuxt sur la génération de site statique. Petite découverte également, avec Stormkit, un service d&apos;hébergement équivalent à Netlify. Live Share Extension Pack pour Visual Studio Code. Les news de l&apos;épisode Worpress passe en version 5.5 : Mise à jour automatique des plugins et des thèmes plan de site XML en natif lazy loading des images Améliorations de gutenberg (A11y) Block Directory. Installer et trouver facilement un bloc pour gutenberg. En tout, 165 améliorations, 310 correctifs de bugs. Incremental build pour Nuxt et Next : Nuxt Avec la version 2.14 sortie fin juillet, la commande nuxt generate ne lance pas de build webpack si le code n&apos;a pas changé, mais génère juste les nouvelles pages statiques. Un gros gain de vitesse pour générer un site statique. Article de blog de Nuxt version 2.14 Next Next propose également l&apos;Incremental Static Generation. Comme nuxt, il ajoute une page de contenu sans faire un build complet si le code n&apos;a pas changé.
Mais avec la version 9.5, next propose l&apos;Incremental Static Re-generation.
Une mise à jour du contenu lors du rendu via un paramètre (revalidate: 1). Plus besoin de regénérer le site. Supporté uniquement par Vercel pour le moment. Next version 9.5 StormKit Un service équivalent à Netlify pour déployer vos sites statique ou SPA automatiquement. Par contre, c&apos;est un service européen (Suisse). Ils utilisent AWS avec des serveurs à Francfort. Stormkit Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >2600</itunes:duration></item><item><title
      ><![CDATA[Le prologue]]></title><description
      ><![CDATA[<p>Le premier épidode double slash, l'épisode "Pilote", qui présente l'équipe et le podcast.
Pourquoi un podcast, quels sujets allons-nous développer et les thèmes principaux du podcast.</p>
<p>Podcast présenté par :</p>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">https://twitter.com/xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">https://twitter.com/PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/prologue/</link><guid
        isPermaLink="false"
      >d6d49d9bf21bc895cc67e4af72016743</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double slash]]></dc:creator><pubDate
      >Wed, 01 Apr 2020 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.digitaloceanspaces.com/DS_000_prologue.mp3"
        length="13283732"
        type="audio/mpeg"
      /><itunes:title>Le prologue</itunes:title><itunes:subtitle
      >Présentation du podcast et de l&apos;équipe</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>1</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Le premier épidode double slash, l&apos;épisode &quot;Pilote&quot;, qui présente l&apos;équipe et le podcast.
Pourquoi un podcast, quels sujets allons-nous développer et les thèmes principaux du podcast. Podcast présenté par : Alexandre Duval https://twitter.com/xlanex6 Patrick Faramaz https://twitter.com/PatrickFaramaz</itunes:summary><itunes:author
      >Double slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Le premier épidode double slash, l&apos;épisode &quot;Pilote&quot;, qui présente l&apos;équipe et le podcast.
Pourquoi un podcast, quels sujets allons-nous développer et les thèmes principaux du podcast. Podcast présenté par : Alexandre Duval https://twitter.com/xlanex6 Patrick Faramaz https://twitter.com/PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >553</itunes:duration></item><item><title
      ><![CDATA[Les Progressive Web Apps avec Stéphanie Alix]]></title><description
      ><![CDATA[<p>Dans cet épisode assez technique, nous allons faire le point sur les Progressive Web App en 2020. Définir ce qu'est une PWA, les principales features d'une PWA. Puis, pourquoi choisir une PWA au lieu d'une application native. Et enfin, revenir sur les blocages de Safari par rapport aux PWA.</p>
<p>Notre invitée pour l'épisode :<br>
Stéphanie Alix : <a href="https://stephaniealix.com/">https://stephaniealix.com/</a> et <a href="https://twitter.com/StephanieAlix95">@StephanieAlix95</a><br>
<strong>Développeuse Web et spécialisée dans les PWA</strong></p>
<h2>Principales fonctionnalités d'une PWA :</h2>
<ul>
<li>webmanifest pour l'apparence (icônes, couleurs, nom..)</li>
<li>ajout d'un raccourci avec "icône" dans les apps du device</li>
<li>fonctionnement dans une fenêtre dédiée (fullscreen, stand-alone, minimal-ui) comme une application native.</li>
<li>Auto-update: juste rafraichir la page après un déploiement</li>
<li>Notifications push (application ouverte et fermée)</li>
<li>service worker (gestion du cache, etc..)</li>
<li>Cache/offline</li>
<li>Background sync</li>
</ul>
<h3>Minimum pour être une PWA :</h3>
<ul>
<li>Être en HTTPS</li>
<li>Avoir un Service worker</li>
<li>Avoir web manifest avec au moins les icônes</li>
<li>iOS >= 11.3 et Chrome >= 71 / 11.3 mars 2018 et chrome 71 décembre 2018</li>
</ul>
<h3>Prise en charge des fonctionnalités par les navigateurs :</h3>
<ul>
<li>Service workers browser : <a href="https://caniuse.com/#search=service%20workers">https://caniuse.com/#search=service workers</a> </li>
<li>Web App Manifest : <a href="https://caniuse.com/#search=Web%20App%20Manifest">https://caniuse.com/#search=Web App Manifest</a></li>
<li>Web Notification : <a href="https://caniuse.com/#search=web%20notification">https://caniuse.com/#search=web notification</a></li>
</ul>
<h2>Pourquoi une PWA et pas une app native ?</h2>
<ul>
<li>Plus léger qu'une application mobile</li>
<li>Plus accessibles en mauvaise connection grâce aux services workers</li>
<li>Pas besoin de passer par l'App Store et pas obligé de l'installer</li>
<li>Multiplateforme: 1 seul code pour toutes les plateformes</li>
<li>Peut être indexée par Google</li>
<li>Features natives de plus en plus disponibles: Web Share API, camera access. Voir le <a href="https://web.dev/fugu-status/">Projet Fugu</a> pour ajouter des fonctionnalités natives pour chromium</li>
<li>Possibilité de remplacer/intégré dans des applications natives si besoin (web view, pwabuilder, TWA)</li>
<li>Augmentation du nombre de pages vues, d'utilisateurs qui reviennent (prouvé avec des PWA connues: Pinterest, Starbucks, Twitter..)</li>
<li>PWA et app natives peuvent aussi être complémentaires</li>
</ul>
<h2>PWA VS Safari</h2>
<p>Les blocages de la part de safari :</p>
<ul>
<li>Notifications (obligé de passer par le système Apple)</li>
<li>Prompt "add to Home" (obligé de passer par le menu "Sur l'écran d'accueil")</li>
<li>WebManifest icônes (pas bloquant)</li>
<li>cache capacity 50MB (pas bloquant)</li>
<li>Background sync </li>
<li>IOS purge le cache (indexDB, localstorage) et maintenant iOS <a href="https://tracedock.com/blog/2019/11/29/24hours-cookies-impact/">purge aussi les cookies</a> après un jour ou une semaine selon la version webkit..</li>
</ul>
<p><strong>Note spécifique sur IOS :</strong>
Apple interdit de développer un navigateur pour IOS avec un moteur de rendu différent de WebKit. Donc les navigateurs disponibles sur IOS sont en réalité des applications composées de WebViews WebKit.
Ils n'ont donc pas les fonctionnalités PWA (ex: impossible d'ajouter la PWA à l'écran d'accueil via iOS chrome ou d'utiliser les Services Workers)</p>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/progressive-web-app/</link><guid
        isPermaLink="false"
      >505f20a07aab6d5fdfa9e3bdd41ec676</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Mon, 31 Aug 2020 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_011_pwa.mp3"
        length="105435565"
        type="audio/mpeg"
      /><itunes:title
      >Les Progressive Web Apps avec Stéphanie Alix</itunes:title><itunes:subtitle
      >Dans cet épisode, nous allons faire le point sur les Progressive Web App en 2020. Définir ce qu&apos;est une PWA, les principales features d&apos;une PWA. Pourquoi choisir une PWA au lieu d&apos;une application native. Et revenir sur les blocages de Safari par rapport aux PWA.</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>11</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Dans cet épisode assez technique, nous allons faire le point sur les Progressive Web App en 2020. Définir ce qu&apos;est une PWA, les principales features d&apos;une PWA. Puis, pourquoi choisir une PWA au lieu d&apos;une application native. Et enfin, revenir sur les blocages de Safari par rapport aux PWA. Notre invitée pour l&apos;épisode :   Stéphanie Alix : https://stephaniealix.com/ et @StephanieAlix95 Développeuse Web et spécialisée dans les PWA Principales fonctionnalités d&apos;une PWA : webmanifest pour l&apos;apparence (icônes, couleurs, nom..) ajout d&apos;un raccourci avec &quot;icône&quot; dans les apps du device fonctionnement dans une fenêtre dédiée (fullscreen, stand-alone, minimal-ui) comme une application native. Auto-update: juste rafraichir la page après un déploiement Notifications push (application ouverte et fermée) service worker (gestion du cache, etc..) Cache/offline Background sync Minimum pour être une PWA : Être en HTTPS Avoir un Service worker Avoir web manifest avec au moins les icônes iOS &gt;= 11.3 et Chrome &gt;= 71 / 11.3 mars 2018 et chrome 71 décembre 2018 Prise en charge des fonctionnalités par les navigateurs : Service workers browser : https://caniuse.com/#search=service workers  Web App Manifest : https://caniuse.com/#search=Web App Manifest Web Notification : https://caniuse.com/#search=web notification Pourquoi une PWA et pas une app native ? Plus léger qu&apos;une application mobile Plus accessibles en mauvaise connection grâce aux services workers Pas besoin de passer par l&apos;App Store et pas obligé de l&apos;installer Multiplateforme: 1 seul code pour toutes les plateformes Peut être indexée par Google Features natives de plus en plus disponibles: Web Share API, camera access. Voir le Projet Fugu pour ajouter des fonctionnalités natives pour chromium Possibilité de remplacer/intégré dans des applications natives si besoin (web view, pwabuilder, TWA) Augmentation du nombre de pages vues, d&apos;utilisateurs qui reviennent (prouvé avec des PWA connues: Pinterest, Starbucks, Twitter..) PWA et app natives peuvent aussi être complémentaires PWA VS Safari Les blocages de la part de safari : Notifications (obligé de passer par le système Apple) Prompt &quot;add to Home&quot; (obligé de passer par le menu &quot;Sur l&apos;écran d&apos;accueil&quot;) WebManifest icônes (pas bloquant) cache capacity 50MB (pas bloquant) Background sync  IOS purge le cache (indexDB, localstorage) et maintenant iOS purge aussi les cookies après un jour ou une semaine selon la version webkit.. Note spécifique sur IOS :
Apple interdit de développer un navigateur pour IOS avec un moteur de rendu différent de WebKit. Donc les navigateurs disponibles sur IOS sont en réalité des applications composées de WebViews WebKit.
Ils n&apos;ont donc pas les fonctionnalités PWA (ex: impossible d&apos;ajouter la PWA à l&apos;écran d&apos;accueil via iOS chrome ou d&apos;utiliser les Services Workers) Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Dans cet épisode assez technique, nous allons faire le point sur les Progressive Web App en 2020. Définir ce qu&apos;est une PWA, les principales features d&apos;une PWA. Puis, pourquoi choisir une PWA au lieu d&apos;une application native. Et enfin, revenir sur les blocages de Safari par rapport aux PWA. Notre invitée pour l&apos;épisode :   Stéphanie Alix : https://stephaniealix.com/ et @StephanieAlix95 Développeuse Web et spécialisée dans les PWA Principales fonctionnalités d&apos;une PWA : webmanifest pour l&apos;apparence (icônes, couleurs, nom..) ajout d&apos;un raccourci avec &quot;icône&quot; dans les apps du device fonctionnement dans une fenêtre dédiée (fullscreen, stand-alone, minimal-ui) comme une application native. Auto-update: juste rafraichir la page après un déploiement Notifications push (application ouverte et fermée) service worker (gestion du cache, etc..) Cache/offline Background sync Minimum pour être une PWA : Être en HTTPS Avoir un Service worker Avoir web manifest avec au moins les icônes iOS &gt;= 11.3 et Chrome &gt;= 71 / 11.3 mars 2018 et chrome 71 décembre 2018 Prise en charge des fonctionnalités par les navigateurs : Service workers browser : https://caniuse.com/#search=service workers  Web App Manifest : https://caniuse.com/#search=Web App Manifest Web Notification : https://caniuse.com/#search=web notification Pourquoi une PWA et pas une app native ? Plus léger qu&apos;une application mobile Plus accessibles en mauvaise connection grâce aux services workers Pas besoin de passer par l&apos;App Store et pas obligé de l&apos;installer Multiplateforme: 1 seul code pour toutes les plateformes Peut être indexée par Google Features natives de plus en plus disponibles: Web Share API, camera access. Voir le Projet Fugu pour ajouter des fonctionnalités natives pour chromium Possibilité de remplacer/intégré dans des applications natives si besoin (web view, pwabuilder, TWA) Augmentation du nombre de pages vues, d&apos;utilisateurs qui reviennent (prouvé avec des PWA connues: Pinterest, Starbucks, Twitter..) PWA et app natives peuvent aussi être complémentaires PWA VS Safari Les blocages de la part de safari : Notifications (obligé de passer par le système Apple) Prompt &quot;add to Home&quot; (obligé de passer par le menu &quot;Sur l&apos;écran d&apos;accueil&quot;) WebManifest icônes (pas bloquant) cache capacity 50MB (pas bloquant) Background sync  IOS purge le cache (indexDB, localstorage) et maintenant iOS purge aussi les cookies après un jour ou une semaine selon la version webkit.. Note spécifique sur IOS :
Apple interdit de développer un navigateur pour IOS avec un moteur de rendu différent de WebKit. Donc les navigateurs disponibles sur IOS sont en réalité des applications composées de WebViews WebKit.
Ils n&apos;ont donc pas les fonctionnalités PWA (ex: impossible d&apos;ajouter la PWA à l&apos;écran d&apos;accueil via iOS chrome ou d&apos;utiliser les Services Workers) Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >4392</itunes:duration></item><item><title
      ><![CDATA[RedwoodJS avec Simon Gagnon]]></title><description
      ><![CDATA[<h2>Support de l'épisode</h2>
<p>Indy, la comptabilité des indépendants tout simplement. Synchronisation bancaire sécurisée, déclarations fiscales préremplies et télétransmises, support client avec réponse sous 4 minutes.</p>
<p>Obtenez 2 mois gratuits avec notre code sponsor. <a href="https://bit.ly/3dojgDo">Cliquez sur ici pour profiter du code</a></p>
<h2>Dans cet épisode, nous avons le plaisir de recevoir Simon Gagnon en direct de Montréal (Canada) pour parler de RedwoodJS.</h2>
<h3>Retrouvez la vidéo de l'enregistrement sur <a href="https://www.youtube.com/watch?v=eEY03v7RBy0">YouTube</a></h3>
<p><a href="https://redwoodjs.com/">Redwoodjs</a> est un framework basé sur les meilleurs outils autours de la librairie ReactJS.
Vous avez à disposition des outils préconfigurés tel que :</p>
<ul>
<li>webpack</li>
<li>Prisma</li>
<li>Storybook</li>
<li>Jest</li>
<li>Fastify</li>
<li>Pino</li>
</ul>
<p>Vous pouvez démarrer un projet ultra rapidement sans aucune configuration.
Avec des lignes de commandes disponible dans votre console, vous pouvez créer facilement des éléments dans votre projet, tel que des formulaires, sections, services ou pages.</p>
<p>Par exemple, avec la commande :</p>
<pre><code class="language-shell">yarn redwood generate page home
</code></pre>
<p>Vous allez générer une page home et "Redwoodjs" va vous générer automatiquement la route, le template et la storie qui va avec.</p>
<p>Redwood est un framework développé autour de la philosophie <a href="https://rubyonrails.org/">Ruby on Rails</a> et tout est pensé pour vous faciliter et optimiser le développement. Cela vous permet de vous concentrer sur votre application au lieu de perdre votre temps à configurer, à choisir les outils ou à structurer votre projet.</p>
<p>Bonne écoute :)</p>
<h2>Pour retrouver notre invité</h2>
<ul>
<li>Simon Gagnon : <a href="https://twitter.com/SimonCrypta">@SimonCrypta</a></li>
<li>Simoncrypta : <a href="https://simoncrypta.dev/">https://simoncrypta.dev/</a></li>
<li>GitHub de Simon : <a href="https://github.com/simoncrypta">https://github.com/simoncrypta</a></li>
</ul>
<h2>Les liens de l'épisode</h2>
<ul>
<li><a href="https://redwoodjs.com/">https://redwoodjs.com/</a></li>
<li><a href="https://twitter.com/redwoodjs">@redwoodjs</a></li>
<li><a href="https://github.com/redwoodjs/redwood">Github redwoodjs</a></li>
<li><a href="https://discord.com/invite/jjSYEQd">Discord redwoodjs</a></li>
<li><a href="https://learn.redwoodjs.com/docs/tutorial/welcome-to-redwood/">Tutorial redwoodjs</a></li>
</ul>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>
<BlocBorder>
  <strong>Support de l'épisode</strong><br /><br />
  Indy, la comptabilité des indépendants tout simplement. Synchronisation bancaire sécurisée, déclarations fiscales préremplies et télétransmises, support client avec réponse sous 4 minutes.<br /><br />
  Obtenez 2 mois gratuits avec notre code sponsor. <a href="https://bit.ly/3dojgDo" target="_blank">Cliquez sur ici pour profiter du code</a>
</BlocBorder>]]></description><link
      >https://slash-podcast.fr/podcasts/redwood-js/</link><guid
        isPermaLink="false"
      >22904a35fe6a2350abd743a6d02b743b</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Tue, 28 Dec 2021 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_031_redwood.mp3"
        length="66661379"
        type="audio/mpeg"
      /><itunes:title>RedwoodJS avec Simon Gagnon</itunes:title><itunes:subtitle
      >Dans cet épisode, nous avons le plaisir de recevoir Simon Gagnon en direct de Montréal (Canada) pour parler de RedwoodJS.</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>31</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Support de l&apos;épisode Indy, la comptabilité des indépendants tout simplement. Synchronisation bancaire sécurisée, déclarations fiscales préremplies et télétransmises, support client avec réponse sous 4 minutes. Obtenez 2 mois gratuits avec notre code sponsor. Cliquez sur ici pour profiter du code Dans cet épisode, nous avons le plaisir de recevoir Simon Gagnon en direct de Montréal (Canada) pour parler de RedwoodJS. Retrouvez la vidéo de l&apos;enregistrement sur YouTube Redwoodjs est un framework basé sur les meilleurs outils autours de la librairie ReactJS.
Vous avez à disposition des outils préconfigurés tel que : webpack Prisma Storybook Jest Fastify Pino Vous pouvez démarrer un projet ultra rapidement sans aucune configuration.
Avec des lignes de commandes disponible dans votre console, vous pouvez créer facilement des éléments dans votre projet, tel que des formulaires, sections, services ou pages. Par exemple, avec la commande : Vous allez générer une page home et &quot;Redwoodjs&quot; va vous générer automatiquement la route, le template et la storie qui va avec. Redwood est un framework développé autour de la philosophie Ruby on Rails et tout est pensé pour vous faciliter et optimiser le développement. Cela vous permet de vous concentrer sur votre application au lieu de perdre votre temps à configurer, à choisir les outils ou à structurer votre projet. Bonne écoute :) Pour retrouver notre invité Simon Gagnon : @SimonCrypta Simoncrypta : https://simoncrypta.dev/ GitHub de Simon : https://github.com/simoncrypta Les liens de l&apos;épisode https://redwoodjs.com/ @redwoodjs Github redwoodjs Discord redwoodjs Tutorial redwoodjs Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Support de l&apos;épisode Indy, la comptabilité des indépendants tout simplement. Synchronisation bancaire sécurisée, déclarations fiscales préremplies et télétransmises, support client avec réponse sous 4 minutes. Obtenez 2 mois gratuits avec notre code sponsor. Cliquez sur ici pour profiter du code Dans cet épisode, nous avons le plaisir de recevoir Simon Gagnon en direct de Montréal (Canada) pour parler de RedwoodJS. Retrouvez la vidéo de l&apos;enregistrement sur YouTube Redwoodjs est un framework basé sur les meilleurs outils autours de la librairie ReactJS.
Vous avez à disposition des outils préconfigurés tel que : webpack Prisma Storybook Jest Fastify Pino Vous pouvez démarrer un projet ultra rapidement sans aucune configuration.
Avec des lignes de commandes disponible dans votre console, vous pouvez créer facilement des éléments dans votre projet, tel que des formulaires, sections, services ou pages. Par exemple, avec la commande : Vous allez générer une page home et &quot;Redwoodjs&quot; va vous générer automatiquement la route, le template et la storie qui va avec. Redwood est un framework développé autour de la philosophie Ruby on Rails et tout est pensé pour vous faciliter et optimiser le développement. Cela vous permet de vous concentrer sur votre application au lieu de perdre votre temps à configurer, à choisir les outils ou à structurer votre projet. Bonne écoute :) Pour retrouver notre invité Simon Gagnon : @SimonCrypta Simoncrypta : https://simoncrypta.dev/ GitHub de Simon : https://github.com/simoncrypta Les liens de l&apos;épisode https://redwoodjs.com/ @redwoodjs Github redwoodjs Discord redwoodjs Tutorial redwoodjs Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >2776</itunes:duration></item><item><title
      ><![CDATA[TailwindCSS - Évolution ou Révolution ?]]></title><description
      ><![CDATA[<p>Dans cet épisode, on retrouve Patrick et Alex qui échange sur le framework CSS <strong>Tailwind</strong>. Quels sont les avantages à utiliser encore un framework CSS ? Quel est le fonctionnement de <strong>Tailwind</strong> ?
Tailwind est différent des frameworks CSS existants et Alex va vous expliquer pourquoi.</p>
<p>Voici les liens donnés dans l'épisode :</p>
<ul>
<li>Le site de <a href="https://tailwindcss.com/">TailwindCSS</a>.</li>
<li>Plus d'infos sur <a href="https://postcss.org/">Post CSS</a></li>
<li>Le livre Best Practices Design <a href="https://refactoringui.com/book">Refactoring UI</a>.</li>
<li>Le repo <a href="https://github.com/aniftyco/awesome-tailwindcss">AWESOME TailwindCSS</a>.</li>
<li>Le <a href="https://javisperez.github.io/tailwindcolorshades/#/">Color shade generator</a>.</li>
</ul>
<p>Podcast présenté par :</p>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/tailwindcss/</link><guid
        isPermaLink="false"
      >eab1b245f897d185b62b958e12ecee0b</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double slash]]></dc:creator><pubDate
      >Fri, 19 Jun 2020 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_007_tailwindcss.mp3"
        length="93655087"
        type="audio/mpeg"
      /><itunes:title
      >TailwindCSS - Évolution ou Révolution ?</itunes:title><itunes:subtitle
      >On retrouve Patrick et Alex qui échange sur le framework CSS Tailwind, son fonctionnement et son paradigme.</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>7</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Dans cet épisode, on retrouve Patrick et Alex qui échange sur le framework CSS Tailwind. Quels sont les avantages à utiliser encore un framework CSS ? Quel est le fonctionnement de Tailwind ?
Tailwind est différent des frameworks CSS existants et Alex va vous expliquer pourquoi. Voici les liens donnés dans l&apos;épisode : Le site de TailwindCSS. Plus d&apos;infos sur Post CSS Le livre Best Practices Design Refactoring UI. Le repo AWESOME TailwindCSS. Le Color shade generator. Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Dans cet épisode, on retrouve Patrick et Alex qui échange sur le framework CSS Tailwind. Quels sont les avantages à utiliser encore un framework CSS ? Quel est le fonctionnement de Tailwind ?
Tailwind est différent des frameworks CSS existants et Alex va vous expliquer pourquoi. Voici les liens donnés dans l&apos;épisode : Le site de TailwindCSS. Plus d&apos;infos sur Post CSS Le livre Best Practices Design Refactoring UI. Le repo AWESOME TailwindCSS. Le Color shade generator. Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >3907</itunes:duration></item><item><title
      ><![CDATA[Un site statique de 11000 pages]]></title><description
      ><![CDATA[<p>Dans cet épisode, nous allons parler d'un retour d'expérience sur un projet de site statique qui doit comporter un grand nombre de pages.</p>
<h2>Le context</h2>
<p>Sur le papier, les sites statiques c'est l'idéal pour avoir un site rapide et sécurisé. Mais quand est-il pour un site avec beaucoup, beaucoup de pages ?</p>
<p>Un site de média publie un grand nombre d'articles au quotidien et les articles ne sont plus retouchés par la suite. Des pages statiques sont donc l'idéale pour ce type de site.
Est-il possible de gérer un processus de publication et de déploiement utilisable. Comment se passe le déploiement d'un site avec beaucoup de page. Plusieurs questions en suspens avant la réalisation d'un prototype fait en début d'année 2021.</p>
<p>Cet épisode fait suite à un article publié sur le site <a href="https://jamstatic.fr/2021/03/09/11000-pages-statiques/">jamstatic.fr</a></p>
<h2>Les liens de l'épisode :</h2>
<ul>
<li><a href="https://craftcms.com/">https://craftcms.com/</a></li>
<li><a href="https://nextjs.org/">https://nextjs.org/</a></li>
<li><a href="https://nuxtjs.org/">https://nuxtjs.org/</a></li>
</ul>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/site-statique-10000-pages/</link><guid
        isPermaLink="false"
      >2cd0208a7d3c92a5b087e46c77caf5f8</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Mon, 21 Jun 2021 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_025_static10k.mp3"
        length="56164636"
        type="audio/mpeg"
      /><itunes:title
      >Un site statique de 11000 pages</itunes:title><itunes:subtitle
      >Un retour d&apos;expérience sur un projet de site statique qui doit comporter un grand nombre de pages.</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>25</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Dans cet épisode, nous allons parler d&apos;un retour d&apos;expérience sur un projet de site statique qui doit comporter un grand nombre de pages. Le context Sur le papier, les sites statiques c&apos;est l&apos;idéal pour avoir un site rapide et sécurisé. Mais quand est-il pour un site avec beaucoup, beaucoup de pages ? Un site de média publie un grand nombre d&apos;articles au quotidien et les articles ne sont plus retouchés par la suite. Des pages statiques sont donc l&apos;idéale pour ce type de site.
Est-il possible de gérer un processus de publication et de déploiement utilisable. Comment se passe le déploiement d&apos;un site avec beaucoup de page. Plusieurs questions en suspens avant la réalisation d&apos;un prototype fait en début d&apos;année 2021. Cet épisode fait suite à un article publié sur le site jamstatic.fr Les liens de l&apos;épisode : https://craftcms.com/ https://nextjs.org/ https://nuxtjs.org/ Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Dans cet épisode, nous allons parler d&apos;un retour d&apos;expérience sur un projet de site statique qui doit comporter un grand nombre de pages. Le context Sur le papier, les sites statiques c&apos;est l&apos;idéal pour avoir un site rapide et sécurisé. Mais quand est-il pour un site avec beaucoup, beaucoup de pages ? Un site de média publie un grand nombre d&apos;articles au quotidien et les articles ne sont plus retouchés par la suite. Des pages statiques sont donc l&apos;idéale pour ce type de site.
Est-il possible de gérer un processus de publication et de déploiement utilisable. Comment se passe le déploiement d&apos;un site avec beaucoup de page. Plusieurs questions en suspens avant la réalisation d&apos;un prototype fait en début d&apos;année 2021. Cet épisode fait suite à un article publié sur le site jamstatic.fr Les liens de l&apos;épisode : https://craftcms.com/ https://nextjs.org/ https://nuxtjs.org/ Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >2339</itunes:duration></item><item><title
      ><![CDATA[Strapi, le CMS headless open source 100% JavaScript avec Jim Laurie]]></title><description
      ><![CDATA[<h2>Un épisode avec notre invité Jim Laurie, cocréateur et cofondateur de Strapi, un CMS open source 100% JavaScript</h2>
<p><a href="https://strapi.io/">Strapi</a> est un CMS open source créé il y a environ 7 ans par 3 personnes lors de leurs études. Créé pour des besoins clients à la base, le projet a rapidement vu sa communauté augmentée et suscité un réel intérêt. Ce qui a poussé les créateurs a tenté l'aventure et continué le projet à la fin de leurs études.
7 ans plus tard, le CMS est a sa version 3.5, a réalisé 3 levées de fond. Plus de 30 personnes travaillent désormais chez Strapi et le projet est robuste.</p>
<p>Basé 100% sur JavaScript, il tourne sur Node JS (koa) pour la partie back et utilise React JS pour la partie administration.
Il vous permet de modeler votre API en fonction de votre besoin. De base, vous avez une API Rest disponible avec la gestion des accès. Vous pouvez également utiliser GraphQL pour appeler votre API.
Bref, Strapi vous permet de monter rapidement et facilement une API.</p>
<p>Nous vous laissons découvrir le CMS Strapi plus en détail en écoutant l'épisode numéro 21 avec notre invité:</p>
<ul>
<li>
<p>Jim Laurie,</p>
<ul>
<li><a href="https://twitter.com/laurie_jim">@laurie_jim</a></li>
</ul>
</li>
</ul>
<h3>Les liens de l'épisode :</h3>
<ul>
<li><a href="https://www.strapi.io/strapi-conf-2021">La Strapi Conf du 22 avril 2021</a></li>
<li><a href="https://portal.productboard.com/strapi/1-roadmap/tabs/2-under-consideration">Roadmap</a></li>
<li><a href="https://slack.strapi.io/">Le slack</a></li>
<li><a href="https://github.com/strapi/">Le github</a></li>
<li><a href="https://forum.strapi.io/">Le forum</a></li>
<li></li>
</ul>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/strapi/</link><guid
        isPermaLink="false"
      >3e7174a89bd28661bfaa8bbb11022eb2</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Mon, 08 Mar 2021 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_021_strapi.mp3"
        length="106998212"
        type="audio/mpeg"
      /><itunes:title
      >Strapi, le CMS headless open source 100% JavaScript avec Jim Laurie</itunes:title><itunes:subtitle
      >Un épisode avec notre invité Jim Laurie, cocréateur et cofondateur de Strapi, un CMS open source 100% JavaScript</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>21</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Un épisode avec notre invité Jim Laurie, cocréateur et cofondateur de Strapi, un CMS open source 100% JavaScript Strapi est un CMS open source créé il y a environ 7 ans par 3 personnes lors de leurs études. Créé pour des besoins clients à la base, le projet a rapidement vu sa communauté augmentée et suscité un réel intérêt. Ce qui a poussé les créateurs a tenté l&apos;aventure et continué le projet à la fin de leurs études.
7 ans plus tard, le CMS est a sa version 3.5, a réalisé 3 levées de fond. Plus de 30 personnes travaillent désormais chez Strapi et le projet est robuste. Basé 100% sur JavaScript, il tourne sur Node JS (koa) pour la partie back et utilise React JS pour la partie administration.
Il vous permet de modeler votre API en fonction de votre besoin. De base, vous avez une API Rest disponible avec la gestion des accès. Vous pouvez également utiliser GraphQL pour appeler votre API.
Bref, Strapi vous permet de monter rapidement et facilement une API. Nous vous laissons découvrir le CMS Strapi plus en détail en écoutant l&apos;épisode numéro 21 avec notre invité: Jim Laurie, @laurie_jim Les liens de l&apos;épisode : La Strapi Conf du 22 avril 2021 Roadmap Le slack Le github Le forum Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Un épisode avec notre invité Jim Laurie, cocréateur et cofondateur de Strapi, un CMS open source 100% JavaScript Strapi est un CMS open source créé il y a environ 7 ans par 3 personnes lors de leurs études. Créé pour des besoins clients à la base, le projet a rapidement vu sa communauté augmentée et suscité un réel intérêt. Ce qui a poussé les créateurs a tenté l&apos;aventure et continué le projet à la fin de leurs études.
7 ans plus tard, le CMS est a sa version 3.5, a réalisé 3 levées de fond. Plus de 30 personnes travaillent désormais chez Strapi et le projet est robuste. Basé 100% sur JavaScript, il tourne sur Node JS (koa) pour la partie back et utilise React JS pour la partie administration.
Il vous permet de modeler votre API en fonction de votre besoin. De base, vous avez une API Rest disponible avec la gestion des accès. Vous pouvez également utiliser GraphQL pour appeler votre API.
Bref, Strapi vous permet de monter rapidement et facilement une API. Nous vous laissons découvrir le CMS Strapi plus en détail en écoutant l&apos;épisode numéro 21 avec notre invité: Jim Laurie, @laurie_jim Les liens de l&apos;épisode : La Strapi Conf du 22 avril 2021 Roadmap Le slack Le github Le forum Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >4457</itunes:duration></item><item><title
      ><![CDATA[Le SEO en 2020, avec Nicolas Baldi]]></title><description
      ><![CDATA[<p>Un épisode avec autour du SEO (Search Engine Optimisation).<br>
Le SEO en 2020, les méthodes, les outils, les bonnes pratiques. Comment penser le projet "SEO Friendly" dès sa construction.
Nous en discutons avec notre invité, expert SEO : <a href="https://www.linkedin.com/in/nicolasbaldi/">Nicolas Baldi</a></p>
<h2>Liste des outils évoqués durant l'épisode :</h2>
<h3>Outils pour le choix des mots clés :</h3>
<p>Pour savoir quels mots-clés choisir, on utilise des outils comme :</p>
<ul>
<li><a href="https://insight.yooda.com/">Yooda Insights</a> (39€/mois) </li>
<li><a href="https://www.keyword.io/">Keyword.io</a> (29€/mois) </li>
<li><a href="https://neilpatel.com/fr/ubersuggest/">Neil Patel / Ubersuggest</a> (29€/mois) </li>
<li><a href="https://kwfinder.com/">Keyword Finder</a> (29€/mois)</li>
</ul>
<h3>Les outils Google</h3>
<ul>
<li><a href="https://developers.google.com/speed/pagespeed/insights/?hl=fr">Google Page Speed Insights</a></li>
<li><a href="https://analytics.google.com/analytics/web/">Google Analytics</a></li>
<li><a href="https://search.google.com/search-console/about">Google Search Console</a></li>
</ul>
<h3>Les outils d'analyse :</h3>
<ul>
<li><a href="https://fr.semrush.com/">SEM Rush</a></li>
<li><a href="https://www.screamingfrog.co.uk/seo-spider/">Screaming Frog</a></li>
<li><a href="http://home.snafu.de/tilman/xenulink.html">Xenu</a></li>
<li><a href="https://seomofo.com/snippet-optimizer.html">Seo Mofo Snippet Optimizer</a></li>
</ul>
<h2>Podcast présenté par :</h2>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/seo/</link><guid
        isPermaLink="false"
      >5ee1320d8c992a324b83e8fc970de1e4</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double slash]]></dc:creator><pubDate
      >Fri, 10 Jul 2020 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_008_seo.mp3"
        length="169931770"
        type="audio/mpeg"
      /><itunes:title
      >Le SEO en 2020, avec Nicolas Baldi</itunes:title><itunes:subtitle
      >Le SEO en 2020, les méthodes, les outils, les bonnes pratiques. Comment penser le projet &quot;SEO Friendly&quot; dès sa construction.</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>8</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Un épisode avec autour du SEO (Search Engine Optimisation). Le SEO en 2020, les méthodes, les outils, les bonnes pratiques. Comment penser le projet &quot;SEO Friendly&quot; dès sa construction.
Nous en discutons avec notre invité, expert SEO : Nicolas Baldi Liste des outils évoqués durant l&apos;épisode : Outils pour le choix des mots clés : Pour savoir quels mots-clés choisir, on utilise des outils comme : Yooda Insights (39€/mois)  Keyword.io (29€/mois)  Neil Patel / Ubersuggest (29€/mois)  Keyword Finder (29€/mois) Les outils Google Google Page Speed Insights Google Analytics Google Search Console Les outils d&apos;analyse : SEM Rush Screaming Frog Xenu Seo Mofo Snippet Optimizer Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Un épisode avec autour du SEO (Search Engine Optimisation). Le SEO en 2020, les méthodes, les outils, les bonnes pratiques. Comment penser le projet &quot;SEO Friendly&quot; dès sa construction.
Nous en discutons avec notre invité, expert SEO : Nicolas Baldi Liste des outils évoqués durant l&apos;épisode : Outils pour le choix des mots clés : Pour savoir quels mots-clés choisir, on utilise des outils comme : Yooda Insights (39€/mois)  Keyword.io (29€/mois)  Neil Patel / Ubersuggest (29€/mois)  Keyword Finder (29€/mois) Les outils Google Google Page Speed Insights Google Analytics Google Search Console Les outils d&apos;analyse : SEM Rush Screaming Frog Xenu Seo Mofo Snippet Optimizer Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >7080</itunes:duration></item><item><title
      ><![CDATA[Vite.., un bundler !]]></title><description
      ><![CDATA[<p>Les bundlers (générateur de bundle), on les utilise au quotidien. Ils sont indispensables dans les outils des développeurs front et ils ont beaucoup évolué.
Nous passons en revue les principaux bundlers les plus utilisés et surtout nous parlons des nouvelles générations de bundler.</p>
<h2>Pourquoi on utilise des bundlers :</h2>
<ul>
<li>Limiter les requêtes, minifier et éviter de polluer le scope global (window).</li>
<li>Avoir un code plus propre découpé en module. </li>
<li>Et une réutilisation du code.</li>
</ul>
<p>Avant les bundlers:</p>
<ul>
<li>Immediately Invoked Function Expression (IIFE).</li>
</ul>
<pre><code class="language-js">(function foo() {
    return bar;
})();
</code></pre>
<ul>
<li>Plugin jQuery qui s'appelait à travers jQuery</li>
</ul>
<pre><code class="language-js">(function ( $ ) {

    $.fn.greenify = function() {
        this.css( "color", "green" );
        return this;
    };

}( jQuery ));
</code></pre>
<h2>Les principaux types de modules :</h2>
<ul>
<li>
<p>CommonJS: </p>
<pre><code class="language-js">require('..');
</code></pre>
</li>
</ul>
<p>module.exports = ...;</p>
<pre><code>- AMD (Asynchronous Module Definition):

```js
define(['dep1', 'dep2'], function (dep1, dep2) {
    //Define the module value by returning a value.
    return function () {};
});
</code></pre>
<ul>
<li>UMD (Universal Module Definition):</li>
</ul>
<pre><code class="language-js">(function (root, factory) {
    if (typeof define === "function" &#x26;&#x26; define.amd) {
        define(["jquery", "underscore"], factory);
    } else if (typeof exports === "object") {
        module.exports = factory(require("jquery"), require("underscore"));
    } else {
        root.Requester = factory(root.$, root._);
    }
}(this, function ($, _) {
    // this is where I defined my module implementation

    var Requester = { // ... };

    return Requester;
}));
</code></pre>
<ul>
<li>ESM (EcmaScript Modules): compatibilité 92% <a href="https://caniuse.com/es6-module">https://caniuse.com/es6-module</a></li>
</ul>
<pre><code class="language-js">import toto from ...;

export default ...;
</code></pre>
<ul>
<li>Browserify (js + plugin pour autre fichier) première release en 2011. Uniquement JS. Permettait de créer des modules avec require/module.exports: <a href="http://browserify.org/">http://browserify.org/</a></li>
<li>Brunch (js, css, etc..) simple, peu de config, skeleton: <a href="https://brunch.io/">https://brunch.io/</a></li>
<li>Webpack (js, css, ...): <a href="https://webpack.js.org/">https://webpack.js.org/</a></li>
<li>Rollup: Top pour faire des packages. Capable de compiler en differents types (CommonJs, AMD, IIFE) <a href="https://rollupjs.org/guide/en/">https://rollupjs.org/guide/en/</a></li>
</ul>
<h2>Nouvelle génération de bundler</h2>
<ul>
<li>Snowpack: En mode dev, pas de bundle. Recharge uniquement le fichier modifié. En production, par défaut, il fait une optimisation optionnelle, mais on est toujours sur du ESM. On peut ajouter des plugins (webpack, Rollup) pour faire un seul fichier. <a href="https://www.snowpack.dev/">https://www.snowpack.dev/</a></li>
<li>Rome: <a href="https://github.com/rome/tools">https://github.com/rome/tools</a></li>
<li>Vite: Fais beaucoup de choses "out of the box”. Le mode dev est en ESM. Divise en 2 modules: le code source de l'app et les dépendances. Il prébundle les dépendances, car elles changent peu lors du dev. Le code source est en ESM. Fais un bundle (sans ESBuild mais avec Rollup) pour la production pour le moment. <a href="https://vitejs.dev/">https://vitejs.dev/</a></li>
<li>ESBuild (Go) vraiment jeune pas encore prêt pour la production. Par contre extrêmement rapide et très prometteur. <a href="https://esbuild.github.io/">https://esbuild.github.io/</a></li>
<li>WMR: <a href="https://github.com/preactjs/wmr">https://github.com/preactjs/wmr</a></li>
</ul>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/vite-bundler/</link><guid
        isPermaLink="false"
      >b558c0c66f61e51ad282d0827fb11c3a</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Mon, 19 Apr 2021 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_022_bundler.mp3"
        length="67204865"
        type="audio/mpeg"
      /><itunes:title>Vite.., un bundler !</itunes:title><itunes:subtitle
      >Un épisode dédié aux bundlers. On passe en revue les différents bundlers utilisés et pourquoi les nouveaux comme Vite, changent les règles.</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>22</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Les bundlers (générateur de bundle), on les utilise au quotidien. Ils sont indispensables dans les outils des développeurs front et ils ont beaucoup évolué.
Nous passons en revue les principaux bundlers les plus utilisés et surtout nous parlons des nouvelles générations de bundler. Pourquoi on utilise des bundlers : Limiter les requêtes, minifier et éviter de polluer le scope global (window). Avoir un code plus propre découpé en module.  Et une réutilisation du code. Avant les bundlers: Immediately Invoked Function Expression (IIFE). Plugin jQuery qui s&apos;appelait à travers jQuery Les principaux types de modules : CommonJS:  module.exports = ...; UMD (Universal Module Definition): ESM (EcmaScript Modules): compatibilité 92% https://caniuse.com/es6-module Browserify (js + plugin pour autre fichier) première release en 2011. Uniquement JS. Permettait de créer des modules avec require/module.exports: http://browserify.org/ Brunch (js, css, etc..) simple, peu de config, skeleton: https://brunch.io/ Webpack (js, css, ...): https://webpack.js.org/ Rollup: Top pour faire des packages. Capable de compiler en differents types (CommonJs, AMD, IIFE) https://rollupjs.org/guide/en/ Nouvelle génération de bundler Snowpack: En mode dev, pas de bundle. Recharge uniquement le fichier modifié. En production, par défaut, il fait une optimisation optionnelle, mais on est toujours sur du ESM. On peut ajouter des plugins (webpack, Rollup) pour faire un seul fichier. https://www.snowpack.dev/ Rome: https://github.com/rome/tools Vite: Fais beaucoup de choses &quot;out of the box”. Le mode dev est en ESM. Divise en 2 modules: le code source de l&apos;app et les dépendances. Il prébundle les dépendances, car elles changent peu lors du dev. Le code source est en ESM. Fais un bundle (sans ESBuild mais avec Rollup) pour la production pour le moment. https://vitejs.dev/ ESBuild (Go) vraiment jeune pas encore prêt pour la production. Par contre extrêmement rapide et très prometteur. https://esbuild.github.io/ WMR: https://github.com/preactjs/wmr Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Les bundlers (générateur de bundle), on les utilise au quotidien. Ils sont indispensables dans les outils des développeurs front et ils ont beaucoup évolué.
Nous passons en revue les principaux bundlers les plus utilisés et surtout nous parlons des nouvelles générations de bundler. Pourquoi on utilise des bundlers : Limiter les requêtes, minifier et éviter de polluer le scope global (window). Avoir un code plus propre découpé en module.  Et une réutilisation du code. Avant les bundlers: Immediately Invoked Function Expression (IIFE). Plugin jQuery qui s&apos;appelait à travers jQuery Les principaux types de modules : CommonJS:  module.exports = ...; UMD (Universal Module Definition): ESM (EcmaScript Modules): compatibilité 92% https://caniuse.com/es6-module Browserify (js + plugin pour autre fichier) première release en 2011. Uniquement JS. Permettait de créer des modules avec require/module.exports: http://browserify.org/ Brunch (js, css, etc..) simple, peu de config, skeleton: https://brunch.io/ Webpack (js, css, ...): https://webpack.js.org/ Rollup: Top pour faire des packages. Capable de compiler en differents types (CommonJs, AMD, IIFE) https://rollupjs.org/guide/en/ Nouvelle génération de bundler Snowpack: En mode dev, pas de bundle. Recharge uniquement le fichier modifié. En production, par défaut, il fait une optimisation optionnelle, mais on est toujours sur du ESM. On peut ajouter des plugins (webpack, Rollup) pour faire un seul fichier. https://www.snowpack.dev/ Rome: https://github.com/rome/tools Vite: Fais beaucoup de choses &quot;out of the box”. Le mode dev est en ESM. Divise en 2 modules: le code source de l&apos;app et les dépendances. Il prébundle les dépendances, car elles changent peu lors du dev. Le code source est en ESM. Fais un bundle (sans ESBuild mais avec Rollup) pour la production pour le moment. https://vitejs.dev/ ESBuild (Go) vraiment jeune pas encore prêt pour la production. Par contre extrêmement rapide et très prometteur. https://esbuild.github.io/ WMR: https://github.com/preactjs/wmr Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >2799</itunes:duration></item><item><title
      ><![CDATA[What the WASM !]]></title><description
      ><![CDATA[<h2>Un épisode avec un invité, Ivan Enderlin, co-fondateur de Wasmer. Une runtime open-source pour executer Web Assembly coté serveur.</h2>
<p>WebAssembly est un type de code qui peut être exécuté dans un navigateur web. Langage de bas niveau, il est proche de l'assembleur et il permet d'atteindre des performances proches des applications natives (par exemple écrites en C/C++) tout en fonctionnant sur le Web. WebAssembly est pensé et conçu pour fonctionner en lien avec JavaScript.</p>
<p>Ivan Enderlin, nous explique comment Web Assembly fonctionne et pourquoi il faut s’intéresser à cette techno qui devient de plus en plus populaire.</p>
<ul>
<li>Ivan Enderlin : <a href="https://twitter.com/mnt_io">https://twitter.com/mnt_io</a> et <a href="https://twitter.com/wasmerio">https://twitter.com/wasmerio</a></li>
</ul>
<h3>Les liens de l'épisode :</h3>
<ul>
<li>WebAssembly, <a href="https://webassembly.org/">https://webassembly.org/</a></li>
<li>Wasmer, <a href="https://github.com/wasmerio/wasmer">https://github.com/wasmerio/wasmer</a></li>
<li>Yew Rust Web Framework, <a href="https://yew.rs/">https://yew.rs/</a></li>
<li>AssemblyScript, <a href="https://www.assemblyscript.org/">https://www.assemblyscript.org/</a></li>
<li>wasm-pack, <a href="https://github.com/rustwasm/wasm-pack/">https://github.com/rustwasm/wasm-pack/</a></li>
<li>wasm-bindgen, <a href="https://github.com/rustwasm/wasm-bindgen">https://github.com/rustwasm/wasm-bindgen</a></li>
<li>The Rust and WebAssembly book, <a href="https://rustwasm.github.io/docs/book/">https://rustwasm.github.io/docs/book/</a></li>
</ul>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/wasm/</link><guid
        isPermaLink="false"
      >23fe8555c6839d85bbcebb7cc21ff48b</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Mon, 12 Jul 2021 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_026_wasm.mp3"
        length="53933434"
        type="audio/mpeg"
      /><itunes:title>What the WASM !</itunes:title><itunes:subtitle
      >Découvrir WebAssembly avec Ivan Enderlin</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>26</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Un épisode avec un invité, Ivan Enderlin, co-fondateur de Wasmer. Une runtime open-source pour executer Web Assembly coté serveur. WebAssembly est un type de code qui peut être exécuté dans un navigateur web. Langage de bas niveau, il est proche de l&apos;assembleur et il permet d&apos;atteindre des performances proches des applications natives (par exemple écrites en C/C++) tout en fonctionnant sur le Web. WebAssembly est pensé et conçu pour fonctionner en lien avec JavaScript. Ivan Enderlin, nous explique comment Web Assembly fonctionne et pourquoi il faut s’intéresser à cette techno qui devient de plus en plus populaire. Ivan Enderlin : https://twitter.com/mnt_io et https://twitter.com/wasmerio Les liens de l&apos;épisode : WebAssembly, https://webassembly.org/ Wasmer, https://github.com/wasmerio/wasmer Yew Rust Web Framework, https://yew.rs/ AssemblyScript, https://www.assemblyscript.org/ wasm-pack, https://github.com/rustwasm/wasm-pack/ wasm-bindgen, https://github.com/rustwasm/wasm-bindgen The Rust and WebAssembly book, https://rustwasm.github.io/docs/book/ Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Un épisode avec un invité, Ivan Enderlin, co-fondateur de Wasmer. Une runtime open-source pour executer Web Assembly coté serveur. WebAssembly est un type de code qui peut être exécuté dans un navigateur web. Langage de bas niveau, il est proche de l&apos;assembleur et il permet d&apos;atteindre des performances proches des applications natives (par exemple écrites en C/C++) tout en fonctionnant sur le Web. WebAssembly est pensé et conçu pour fonctionner en lien avec JavaScript. Ivan Enderlin, nous explique comment Web Assembly fonctionne et pourquoi il faut s’intéresser à cette techno qui devient de plus en plus populaire. Ivan Enderlin : https://twitter.com/mnt_io et https://twitter.com/wasmerio Les liens de l&apos;épisode : WebAssembly, https://webassembly.org/ Wasmer, https://github.com/wasmerio/wasmer Yew Rust Web Framework, https://yew.rs/ AssemblyScript, https://www.assemblyscript.org/ wasm-pack, https://github.com/rustwasm/wasm-pack/ wasm-bindgen, https://github.com/rustwasm/wasm-bindgen The Rust and WebAssembly book, https://rustwasm.github.io/docs/book/ Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >2246</itunes:duration></item><item><title
      ><![CDATA[Web3, bullshit ou révolution ?]]></title><description
      ><![CDATA[<h2>Alex nous fait découvrir le Web3 et nous explique les fondamentaux de ce web décentralisé prometteur.</h2>
<h3>Retrouvez la vidéo de l'enregistrement sur <a href="https://youtu.be/A8yk7NT__HM">YouTube</a></h3>
<h2>Le WEB 3.0, Pourquoi ?</h2>
<p>En 2008, le bitcoin voyait le jour. Suite à la crise des subprimes, <strong>Satoshi Nakamoto</strong>, publia un livre blanc sur le fonctionnement d'une monnaie cryptographique. Une monnaie avec un fonctionnement décentralisé. Le concept avait comme moteur principal : une économie s'affranchissant de tout organisme tiers, tel que les institutions financières.</p>
<p>Aujourd'hui, le <strong>web3</strong> part d'une même idée. Le web, tel que nous le connaissons, et aujourd'hui principalement détenue par les grands groupes américains.
Le <strong>web3</strong> serait un web décentralisé à l'image des cryptomonnaies avec des mécanismes basés sur des blockchains qui pourrait améliorer la sécurité et la confidentialité des données</p>
<h2>Le WEB 3.0, comment ça marche ?</h2>
<p>Alex nous explique comment le web peut tendre vers plus de transparence, confiance et résilience avec les architectures décentralisées.
On parle de blockchain, et de toutes les technos sous-jacentes (NFT,...). Comment vont-elles jouer un rôle dans le futur de nos métiers de développeur.</p>
<p>Bonne écoute !</p>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/web3/</link><guid
        isPermaLink="false"
      >86f360be3ff581e2236173ba0ed482d3</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Wed, 09 Mar 2022 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_033_web3.mp3"
        length="78144872"
        type="audio/mpeg"
      /><itunes:title
      >Web3, bullshit ou révolution ?</itunes:title><itunes:subtitle
      >Alex nous fait découvrir le Web3 et nous explique les fondamentaux de ce web décentralisé prometteur.</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>33</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Alex nous fait découvrir le Web3 et nous explique les fondamentaux de ce web décentralisé prometteur. Retrouvez la vidéo de l&apos;enregistrement sur YouTube Le WEB 3.0, Pourquoi ? En 2008, le bitcoin voyait le jour. Suite à la crise des subprimes, Satoshi Nakamoto, publia un livre blanc sur le fonctionnement d&apos;une monnaie cryptographique. Une monnaie avec un fonctionnement décentralisé. Le concept avait comme moteur principal : une économie s&apos;affranchissant de tout organisme tiers, tel que les institutions financières. Aujourd&apos;hui, le web3 part d&apos;une même idée. Le web, tel que nous le connaissons, et aujourd&apos;hui principalement détenue par les grands groupes américains.
Le web3 serait un web décentralisé à l&apos;image des cryptomonnaies avec des mécanismes basés sur des blockchains qui pourrait améliorer la sécurité et la confidentialité des données Le WEB 3.0, comment ça marche ? Alex nous explique comment le web peut tendre vers plus de transparence, confiance et résilience avec les architectures décentralisées.
On parle de blockchain, et de toutes les technos sous-jacentes (NFT,...). Comment vont-elles jouer un rôle dans le futur de nos métiers de développeur. Bonne écoute ! Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Alex nous fait découvrir le Web3 et nous explique les fondamentaux de ce web décentralisé prometteur. Retrouvez la vidéo de l&apos;enregistrement sur YouTube Le WEB 3.0, Pourquoi ? En 2008, le bitcoin voyait le jour. Suite à la crise des subprimes, Satoshi Nakamoto, publia un livre blanc sur le fonctionnement d&apos;une monnaie cryptographique. Une monnaie avec un fonctionnement décentralisé. Le concept avait comme moteur principal : une économie s&apos;affranchissant de tout organisme tiers, tel que les institutions financières. Aujourd&apos;hui, le web3 part d&apos;une même idée. Le web, tel que nous le connaissons, et aujourd&apos;hui principalement détenue par les grands groupes américains.
Le web3 serait un web décentralisé à l&apos;image des cryptomonnaies avec des mécanismes basés sur des blockchains qui pourrait améliorer la sécurité et la confidentialité des données Le WEB 3.0, comment ça marche ? Alex nous explique comment le web peut tendre vers plus de transparence, confiance et résilience avec les architectures décentralisées.
On parle de blockchain, et de toutes les technos sous-jacentes (NFT,...). Comment vont-elles jouer un rôle dans le futur de nos métiers de développeur. Bonne écoute ! Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >3254</itunes:duration></item><item><title
      ><![CDATA[La chasse aux news - Avril 2022]]></title><description
      ><![CDATA[<h2>Un passage en revue des news et releases de nos outils et technologies de développement web des dernières semaines</h2>
<h3>Retrouvez la vidéo de l'enregistrement sur <a href="https://youtu.be/qH6m3WxUq9k">le Youtube de DoubleSlash</a></h3>
<h4>Les news évoquées durant l'épisode :</h4>
<ul>
<li>00:00 Intro et présentation</li>
<li>01:08 La version 1 Redwood JS lancée officiellement le 4 avril <a href="https://v1launchweek.redwoodjs.com/">https://v1launchweek.redwoodjs.com/</a></li>
<li>03:44 L’équipe d’Astro lancera la V1 le 8 juin 2022 <a href="https://astro.build/blog/astro-1-beta-release/">https://astro.build/blog/astro-1-beta-release/</a></li>
<li>08:10 Liberez vos threads avec Party Town <a href="https://partytown.builder.io/">https://partytown.builder.io/</a></li>
<li>11:34 React 18 disponible sur NPM <a href="https://reactjs.org/blog/2022/03/29/react-v18.html">https://reactjs.org/blog/2022/03/29/react-v18.html</a></li>
<li>23:42 "Heroku is too limiting and expensive. AWS is too complex.". Pilotez votre web app sur AWS avec Flight Control <a href="https://www.flightcontrol.dev/">https://www.flightcontrol.dev/</a></li>
<li>28:17 Blitz le framework fullstack React pivote pour devenir un toolkit framework agnostique. <a href="https://blitzjs.com/docs/blitz-pivot">https://blitzjs.com/docs/blitz-pivot</a></li>
<li>30:55 Faites vos tests unitaires avec vitest <a href="https://vitest.dev/">https://vitest.dev/</a></li>
<li>34:00 Nuxt 3 toujours en développement <a href="https://v3.nuxtjs.org/community/roadmap/">https://v3.nuxtjs.org/community/roadmap/</a></li>
<li>38:17 L'écosystème de Supabase s'étoffe pour devenir de plus en plus complet <a href="https://supabase.com/">https://supabase.com/</a></li>
<li>47:29 Un projet compatible Storybook mais version light <a href="https://www.ladle.dev/">https://www.ladle.dev/</a></li>
<li>49:12 Parcel v2.4.0 Nouveau parcer css (écrit en Rust) 100x plus rapides que CSSNano <a href="https://parceljs.org/blog/parcel-css/">https://parceljs.org/blog/parcel-css/</a></li>
<li>53:40 La roadmap de Tina CMS pour 2022 <a href="https://tina.io/blog/tinacms-2022/">https://tina.io/blog/tinacms-2022/</a></li>
<li>57:15 - Petit retour rapide sur le WordCamp Geneve 2022</li>
</ul>
<p>Bonne écoute !</p>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/news-avril-2022/</link><guid
        isPermaLink="false"
      >0479679fbfac701b8757a41fb3422d20</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Fri, 15 Apr 2022 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_034_news22.mp3"
        length="91348945"
        type="audio/mpeg"
      /><itunes:title
      >La chasse aux news - Avril 2022</itunes:title><itunes:subtitle
      >Un passage en revue des news et releases de nos outils et technologies de développement web des dernières semaines</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>34</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Un passage en revue des news et releases de nos outils et technologies de développement web des dernières semaines Retrouvez la vidéo de l&apos;enregistrement sur le Youtube de DoubleSlash Les news évoquées durant l&apos;épisode : 00:00 Intro et présentation 01:08 La version 1 Redwood JS lancée officiellement le 4 avril https://v1launchweek.redwoodjs.com/ 03:44 L’équipe d’Astro lancera la V1 le 8 juin 2022 https://astro.build/blog/astro-1-beta-release/ 08:10 Liberez vos threads avec Party Town https://partytown.builder.io/ 11:34 React 18 disponible sur NPM https://reactjs.org/blog/2022/03/29/react-v18.html 23:42 &quot;Heroku is too limiting and expensive. AWS is too complex.&quot;. Pilotez votre web app sur AWS avec Flight Control https://www.flightcontrol.dev/ 28:17 Blitz le framework fullstack React pivote pour devenir un toolkit framework agnostique. https://blitzjs.com/docs/blitz-pivot 30:55 Faites vos tests unitaires avec vitest https://vitest.dev/ 34:00 Nuxt 3 toujours en développement https://v3.nuxtjs.org/community/roadmap/ 38:17 L&apos;écosystème de Supabase s&apos;étoffe pour devenir de plus en plus complet https://supabase.com/ 47:29 Un projet compatible Storybook mais version light https://www.ladle.dev/ 49:12 Parcel v2.4.0 Nouveau parcer css (écrit en Rust) 100x plus rapides que CSSNano https://parceljs.org/blog/parcel-css/ 53:40 La roadmap de Tina CMS pour 2022 https://tina.io/blog/tinacms-2022/ 57:15 - Petit retour rapide sur le WordCamp Geneve 2022 Bonne écoute ! Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Un passage en revue des news et releases de nos outils et technologies de développement web des dernières semaines Retrouvez la vidéo de l&apos;enregistrement sur le Youtube de DoubleSlash Les news évoquées durant l&apos;épisode : 00:00 Intro et présentation 01:08 La version 1 Redwood JS lancée officiellement le 4 avril https://v1launchweek.redwoodjs.com/ 03:44 L’équipe d’Astro lancera la V1 le 8 juin 2022 https://astro.build/blog/astro-1-beta-release/ 08:10 Liberez vos threads avec Party Town https://partytown.builder.io/ 11:34 React 18 disponible sur NPM https://reactjs.org/blog/2022/03/29/react-v18.html 23:42 &quot;Heroku is too limiting and expensive. AWS is too complex.&quot;. Pilotez votre web app sur AWS avec Flight Control https://www.flightcontrol.dev/ 28:17 Blitz le framework fullstack React pivote pour devenir un toolkit framework agnostique. https://blitzjs.com/docs/blitz-pivot 30:55 Faites vos tests unitaires avec vitest https://vitest.dev/ 34:00 Nuxt 3 toujours en développement https://v3.nuxtjs.org/community/roadmap/ 38:17 L&apos;écosystème de Supabase s&apos;étoffe pour devenir de plus en plus complet https://supabase.com/ 47:29 Un projet compatible Storybook mais version light https://www.ladle.dev/ 49:12 Parcel v2.4.0 Nouveau parcer css (écrit en Rust) 100x plus rapides que CSSNano https://parceljs.org/blog/parcel-css/ 53:40 La roadmap de Tina CMS pour 2022 https://tina.io/blog/tinacms-2022/ 57:15 - Petit retour rapide sur le WordCamp Geneve 2022 Bonne écoute ! Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >3705</itunes:duration></item><item><title
      ><![CDATA[State of Front-end 2022]]></title><description
      ><![CDATA[<h2>On discute et on commente les résultats du questionnaire "State of Front-end"</h2>
<h3>Retrouvez la vidéo de l'enregistrement sur <a href="https://youtu.be/s8Ez-hvx8_o">le Youtube de DoubleSlash</a></h3>
<h2>Le state of Front-end 2022 vient d'être publié !</h2>
<p>Quels sont les Frameworks front les plus utilisés et quels sont les plus détestés ?
Les bonnes pratiques des developpeurs front-end.
Quel éditeur de code est le plus utilisé ?
Vous connaitrez les réponses en écoutant l'épisode.
Sinon, vous pouvez vous rendre directement sur le lien de la page dédiée aux résultats : <a href="https://tsh.io/state-of-frontend/">State of Front-end</a></p>
<p>Bonne écoute !</p>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/state-of-front-2022/</link><guid
        isPermaLink="false"
      >d7cce3e2e0ab3f01a96bdad2659cea05</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Wed, 27 Apr 2022 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_035_state-front-end-22.mp3"
        length="97674493"
        type="audio/mpeg"
      /><itunes:title>State of Front-end 2022</itunes:title><itunes:subtitle
      >Analyse du State of Front-end 2022</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>35</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >On discute et on commente les résultats du questionnaire &quot;State of Front-end&quot; Retrouvez la vidéo de l&apos;enregistrement sur le Youtube de DoubleSlash Le state of Front-end 2022 vient d&apos;être publié ! Quels sont les Frameworks front les plus utilisés et quels sont les plus détestés ?
Les bonnes pratiques des developpeurs front-end.
Quel éditeur de code est le plus utilisé ?
Vous connaitrez les réponses en écoutant l&apos;épisode.
Sinon, vous pouvez vous rendre directement sur le lien de la page dédiée aux résultats : State of Front-end Bonne écoute ! Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >On discute et on commente les résultats du questionnaire &quot;State of Front-end&quot; Retrouvez la vidéo de l&apos;enregistrement sur le Youtube de DoubleSlash Le state of Front-end 2022 vient d&apos;être publié ! Quels sont les Frameworks front les plus utilisés et quels sont les plus détestés ?
Les bonnes pratiques des developpeurs front-end.
Quel éditeur de code est le plus utilisé ?
Vous connaitrez les réponses en écoutant l&apos;épisode.
Sinon, vous pouvez vous rendre directement sur le lien de la page dédiée aux résultats : State of Front-end Bonne écoute ! Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >4068</itunes:duration></item><item><title
      ><![CDATA[Outils de web Analytics et Vie privée]]></title><description
      ><![CDATA[<h2>Dans cet épisode, nous avons le plaisir de recevoir François Best pour des outils de web Analytics et la protection de notre vie privée</h2>
<h3>Retrouvez la vidéo de l'enregistrement sur <a href="https://youtu.be/AjY6K2WFTD0">le Youtube de DoubleSlash</a></h3>
<h3>Notre invité</h3>
<ul>
<li>François Best <a href="https://francoisbest.com/">https://francoisbest.com/</a>, <a href="https://twitter.com/fortysevenfx">@fortysevenfx</a></li>
</ul>
<p>La solution analytics de notre invité : <a href="https://chiffre.io">https://chiffre.io</a></p>
<h3>Les autres solutions pour sortir ou remplacer Google Analytics</h3>
<h4>Open-source et possibilité d'auto hébergement :</h4>
<ul>
<li><a href="https://ackee.electerious.com/">https://ackee.electerious.com/</a></li>
<li><a href="https://plausible.io/">https://plausible.io/</a></li>
<li><a href="https://www.piratepx.com/">https://www.piratepx.com/</a></li>
<li><a href="https://umami.is/">https://umami.is/</a></li>
<li><a href="https://matomo.org/">https://matomo.org/</a></li>
<li><a href="https://posthog.com/">https://posthog.com/</a></li>
<li><a href="https://www.kokoanalytics.com/">https://www.kokoanalytics.com/</a> solution pour WordPress</li>
</ul>
<h4>Autres solutions</h4>
<ul>
<li><a href="https://usefathom.com/">https://usefathom.com/</a></li>
<li><a href="https://simpleanalytics.com/">https://simpleanalytics.com/</a></li>
</ul>
<h3>Repo qui liste plusieurs solutions</h3>
<p><a href="https://privacyfocusedanalytics.netlify.app/">https://privacyfocusedanalytics.netlify.app/</a></p>
<p>Bonne écoute !</p>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/analytics22/</link><guid
        isPermaLink="false"
      >a281e6f01ec88c6c24916751a843e0e9</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Tue, 10 May 2022 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_036_analytics_privacy.mp3"
        length="96070011"
        type="audio/mpeg"
      /><itunes:title
      >Outils de web Analytics et Vie privée</itunes:title><itunes:subtitle
      >Web Analytics, privacy et Open Source avec François Best</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>36</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Dans cet épisode, nous avons le plaisir de recevoir François Best pour des outils de web Analytics et la protection de notre vie privée Retrouvez la vidéo de l&apos;enregistrement sur le Youtube de DoubleSlash Notre invité François Best https://francoisbest.com/, @fortysevenfx La solution analytics de notre invité : https://chiffre.io Les autres solutions pour sortir ou remplacer Google Analytics Open-source et possibilité d&apos;auto hébergement : https://ackee.electerious.com/ https://plausible.io/ https://www.piratepx.com/ https://umami.is/ https://matomo.org/ https://posthog.com/ https://www.kokoanalytics.com/ solution pour WordPress Autres solutions https://usefathom.com/ https://simpleanalytics.com/ Repo qui liste plusieurs solutions https://privacyfocusedanalytics.netlify.app/ Bonne écoute ! Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Dans cet épisode, nous avons le plaisir de recevoir François Best pour des outils de web Analytics et la protection de notre vie privée Retrouvez la vidéo de l&apos;enregistrement sur le Youtube de DoubleSlash Notre invité François Best https://francoisbest.com/, @fortysevenfx La solution analytics de notre invité : https://chiffre.io Les autres solutions pour sortir ou remplacer Google Analytics Open-source et possibilité d&apos;auto hébergement : https://ackee.electerious.com/ https://plausible.io/ https://www.piratepx.com/ https://umami.is/ https://matomo.org/ https://posthog.com/ https://www.kokoanalytics.com/ solution pour WordPress Autres solutions https://usefathom.com/ https://simpleanalytics.com/ Repo qui liste plusieurs solutions https://privacyfocusedanalytics.netlify.app/ Bonne écoute ! Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >4002</itunes:duration></item><item><title
      ><![CDATA[Héberger une application web en 2022]]></title><description
      ><![CDATA[<h2>Dans cet épisode, nous évoquons les différentes solutions pour héberger une application web</h2>
<h3>Retrouvez la vidéo de l'enregistrement sur <a href="https://youtu.be/zmE7EZp4vDM">le Youtube de DoubleSlash</a></h3>
<h2>Les différentes solutions pour héberger une application web</h2>
<h2>Les offres Full Virtual Machine</h2>
<p>Dans cette offre, vous louez un serveur brut. Une machine virtuelle qui fait partie d’un serveur.</p>
<h3>Avantages</h3>
<ul>
<li>Permets d’aller très très loin dans les configs et les optimisations. Sans limite, sauf vos compétences.</li>
</ul>
<h3>Désavantages</h3>
<ul>
<li>Barrières à l’entrée assez élevée.</li>
<li>Demande de grosses compétences.</li>
</ul>
<h3>Utilisateurs</h3>
<p>Les grosses équipes avec un gros budget. Une équipe ou une personne dédiée à la gestion des machines.</p>
<h3>Quelques exemples de services</h3>
<p> • <a href="https://www.ovhcloud.com">OVH</a> (FR)
• Amazon Web Services / Google Cloud Platform / Microsoft AZURE / Digital ocean (US)
• <a href="https://www.infomaniak.com/fr/hebergement/public-cloud">Infomaniak</a> (CH)
• <a href="https://www.scaleway.com">Scaleway</a> (FR)</p>
<h2>Les offres PAAS (Platform as a service)</h2>
<h3>Avantages</h3>
<ul>
<li>Très simple à mettre en place, configurer.</li>
<li>Intégration continue facile avec github action, circleci, etc..</li>
<li>Déploiement automatique possible. Certains services proposent même le déploiement des Pull Request.</li>
<li>Capacité d’auto scale. Augmentation des containers en cas de surcharge de trafic.</li>
<li>Multiples technos/langages.</li>
</ul>
<h3>Désavantages</h3>
<ul>
<li>Attention aux réglages des autos scale des containers.</li>
</ul>
<h3>Utilisateurs</h3>
<p>Les Startups et entreprises sans grosse équipe technique. Ou équipe qui ne veut pas gérer les serveurs.</p>
<h3>Quelques exemples de services</h3>
<p><a href="fly.io">fly.io</a> (US)
<a href="https://www.heroku.com">https://www.heroku.com</a> (US) Salesforce
<a href="https://render.com/">https://render.com/</a> (US)
<a href="https://jelastic.com/paas-cloud-hosting/">https://jelastic.com/paas-cloud-hosting/</a> plusieurs sociétés utilisent cette interface. (US)
<a href="https://www.netlify.com/">https://www.netlify.com/</a> ( US )
<a href="https://vercel.com">https://vercel.com/</a> ( US )
<a href="https://coolify.io/">https://coolify.io/</a> ( sur ton VPS )</p>
<h4>France</h4>
<p><a href="https://scalingo.com/fr">https://scalingo.com/fr</a> (preview PR dispo) (FR)
<a href="www.clever-cloud.com">www.clever-cloud.com</a> (FR)</p>
<h2>Les services BASS (Backend as a Service)</h2>
<h3>Avantages</h3>
<ul>
<li>Très rapide, performances.</li>
<li>Possibilité d’auto scale.</li>
<li>Pas de serveur à gérer</li>
<li>plan gratuit généreux</li>
</ul>
<h3>Désavantages</h3>
<ul>
<li>Plus ou moins open source</li>
<li>À qui appartiennent les données ?</li>
</ul>
<h3>Utilisateurs</h3>
<p>Les Startups et entreprises sans grosse équipe technique. Ou équipe qui ne veut pas gérer les serveurs.</p>
<h3>Quelques exemples de services</h3>
<p><a href="https://firebase.google.com/">https://firebase.google.com/</a> (US)
<a href="https://supabase.com/">https://supabase.com/</a> (US)
<a href="https://nhost.io/">https://nhost.io/</a> (Sweden)
<a href="https://appwrite.io/">https://appwrite.io/</a> (ISR)
<a href="https://railway.app/">https://railway.app/</a> (US)
<a href="https://www.8base.com/platform">https://www.8base.com/platform</a> (US)
<a href="https://www.back4app.com/">https://www.back4app.com/</a> (US)</p>
<h2>Les offres Serverless Pass (Platform as a service)</h2>
<p>Comme des Pass, mais en mode serverless. Pas de container, mais des apps.</p>
<h3>Avantages</h3>
<ul>
<li>Très simple. Déploiement en quelques clics mêmes pour un non-Tech.</li>
<li>Auto déploiement par défaut.</li>
</ul>
<h3>Désavantages</h3>
<ul>
<li>La plateforme doit prendre en charge la techno/framework du projet.</li>
<li>Service client parfois inexistant</li>
<li>La majorité est une surcouche à AWS</li>
</ul>
<h3>Utilisateurs</h3>
<p>Les Startups et entreprises sans grosse équipe technique. Ou équipe qui ne veut pas gérer les serveurs.</p>
<h3>Quelques exemples de services</h3>
<p><a href="https://workers.cloudflare.com/">https://workers.cloudflare.com/</a> (US)
<a href="https://aws.amazon.com/fr/amplify/">https://aws.amazon.com/fr/amplify/</a> (US) <a href="https://www.netlify.com/">Netlify</a> (US)
<a href="https://vercel.com/">Vercel</a> (US)
<a href="https://www.stormkit.io/">Stormkit</a> (Suisse)</p>
<h4>Surcouche remote AWS:</h4>
<p><a href="https://www.qovery.com/">https://www.qovery.com/</a> (FR)
<a href="https://www.flightcontrol.dev/">https://www.flightcontrol.dev/</a> (US)</p>
<p>Bonne écoute !</p>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/state-of-hosting-2022/</link><guid
        isPermaLink="false"
      >60f157f17c98ece17c1b550c6151d4f0</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Wed, 25 May 2022 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_037_hosting.mp3"
        length="93000893"
        type="audio/mpeg"
      /><itunes:title
      >Héberger une application web en 2022</itunes:title><itunes:subtitle
      >Comment héberger une application web en 2022</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>37</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Dans cet épisode, nous évoquons les différentes solutions pour héberger une application web Retrouvez la vidéo de l&apos;enregistrement sur le Youtube de DoubleSlash Les différentes solutions pour héberger une application web Les offres Full Virtual Machine Dans cette offre, vous louez un serveur brut. Une machine virtuelle qui fait partie d’un serveur. Avantages Permets d’aller très très loin dans les configs et les optimisations. Sans limite, sauf vos compétences. Désavantages Barrières à l’entrée assez élevée. Demande de grosses compétences. Utilisateurs Les grosses équipes avec un gros budget. Une équipe ou une personne dédiée à la gestion des machines. Quelques exemples de services  • OVH (FR)
 • Amazon Web Services / Google Cloud Platform / Microsoft AZURE / Digital ocean (US)
 • Infomaniak (CH)
 • Scaleway (FR) Les offres PAAS (Platform as a service) Avantages Très simple à mettre en place, configurer. Intégration continue facile avec github action, circleci, etc.. Déploiement automatique possible. Certains services proposent même le déploiement des Pull Request. Capacité d’auto scale. Augmentation des containers en cas de surcharge de trafic. Multiples technos/langages. Désavantages Attention aux réglages des autos scale des containers. Utilisateurs Les Startups et entreprises sans grosse équipe technique. Ou équipe qui ne veut pas gérer les serveurs. Quelques exemples de services fly.io (US)
https://www.heroku.com (US) Salesforce
https://render.com/ (US)
https://jelastic.com/paas-cloud-hosting/ plusieurs sociétés utilisent cette interface. (US)
https://www.netlify.com/ ( US )
https://vercel.com/ ( US )
https://coolify.io/ ( sur ton VPS ) France https://scalingo.com/fr (preview PR dispo) (FR)
www.clever-cloud.com (FR) Les services BASS (Backend as a Service) Avantages Très rapide, performances. Possibilité d’auto scale. Pas de serveur à gérer plan gratuit généreux Désavantages Plus ou moins open source À qui appartiennent les données ? Utilisateurs Les Startups et entreprises sans grosse équipe technique. Ou équipe qui ne veut pas gérer les serveurs. Quelques exemples de services https://firebase.google.com/ (US)
https://supabase.com/ (US)
https://nhost.io/ (Sweden)
https://appwrite.io/ (ISR)
https://railway.app/ (US)
https://www.8base.com/platform (US)
https://www.back4app.com/ (US) Les offres Serverless Pass (Platform as a service) Comme des Pass, mais en mode serverless. Pas de container, mais des apps. Avantages Très simple. Déploiement en quelques clics mêmes pour un non-Tech. Auto déploiement par défaut. Désavantages La plateforme doit prendre en charge la techno/framework du projet. Service client parfois inexistant La majorité est une surcouche à AWS Utilisateurs Les Startups et entreprises sans grosse équipe technique. Ou équipe qui ne veut pas gérer les serveurs. Quelques exemples de services https://workers.cloudflare.com/ (US)
https://aws.amazon.com/fr/amplify/ (US) Netlify (US)
Vercel (US)
Stormkit (Suisse) Surcouche remote AWS: https://www.qovery.com/ (FR)
https://www.flightcontrol.dev/ (US) Bonne écoute ! Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Dans cet épisode, nous évoquons les différentes solutions pour héberger une application web Retrouvez la vidéo de l&apos;enregistrement sur le Youtube de DoubleSlash Les différentes solutions pour héberger une application web Les offres Full Virtual Machine Dans cette offre, vous louez un serveur brut. Une machine virtuelle qui fait partie d’un serveur. Avantages Permets d’aller très très loin dans les configs et les optimisations. Sans limite, sauf vos compétences. Désavantages Barrières à l’entrée assez élevée. Demande de grosses compétences. Utilisateurs Les grosses équipes avec un gros budget. Une équipe ou une personne dédiée à la gestion des machines. Quelques exemples de services  • OVH (FR)
 • Amazon Web Services / Google Cloud Platform / Microsoft AZURE / Digital ocean (US)
 • Infomaniak (CH)
 • Scaleway (FR) Les offres PAAS (Platform as a service) Avantages Très simple à mettre en place, configurer. Intégration continue facile avec github action, circleci, etc.. Déploiement automatique possible. Certains services proposent même le déploiement des Pull Request. Capacité d’auto scale. Augmentation des containers en cas de surcharge de trafic. Multiples technos/langages. Désavantages Attention aux réglages des autos scale des containers. Utilisateurs Les Startups et entreprises sans grosse équipe technique. Ou équipe qui ne veut pas gérer les serveurs. Quelques exemples de services fly.io (US)
https://www.heroku.com (US) Salesforce
https://render.com/ (US)
https://jelastic.com/paas-cloud-hosting/ plusieurs sociétés utilisent cette interface. (US)
https://www.netlify.com/ ( US )
https://vercel.com/ ( US )
https://coolify.io/ ( sur ton VPS ) France https://scalingo.com/fr (preview PR dispo) (FR)
www.clever-cloud.com (FR) Les services BASS (Backend as a Service) Avantages Très rapide, performances. Possibilité d’auto scale. Pas de serveur à gérer plan gratuit généreux Désavantages Plus ou moins open source À qui appartiennent les données ? Utilisateurs Les Startups et entreprises sans grosse équipe technique. Ou équipe qui ne veut pas gérer les serveurs. Quelques exemples de services https://firebase.google.com/ (US)
https://supabase.com/ (US)
https://nhost.io/ (Sweden)
https://appwrite.io/ (ISR)
https://railway.app/ (US)
https://www.8base.com/platform (US)
https://www.back4app.com/ (US) Les offres Serverless Pass (Platform as a service) Comme des Pass, mais en mode serverless. Pas de container, mais des apps. Avantages Très simple. Déploiement en quelques clics mêmes pour un non-Tech. Auto déploiement par défaut. Désavantages La plateforme doit prendre en charge la techno/framework du projet. Service client parfois inexistant La majorité est une surcouche à AWS Utilisateurs Les Startups et entreprises sans grosse équipe technique. Ou équipe qui ne veut pas gérer les serveurs. Quelques exemples de services https://workers.cloudflare.com/ (US)
https://aws.amazon.com/fr/amplify/ (US) Netlify (US)
Vercel (US)
Stormkit (Suisse) Surcouche remote AWS: https://www.qovery.com/ (FR)
https://www.flightcontrol.dev/ (US) Bonne écoute ! Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >3873</itunes:duration></item><item><title
      ><![CDATA[Doit-on utiliser TypeScript ?]]></title><description
      ><![CDATA[<h2>Un épisode sur les bases de TypeScript afin de vous convaincre d’utiliser TypeScript dans vos projets</h2>
<h3>Retrouvez la vidéo de l'enregistrement sur <a href="https://youtu.be/kVdeiE-hod0">le Youtube de DoubleSlash</a></h3>
<p><strong>Précision sur les types et interfaces</strong>
Durant l'épisode, on évoque la différence entre les types et les interfaces. Je dois préciser que l'on peut également faire des objets avec les types.</p>
<p>Les principales différences :</p>
<ul>
<li>Les types ne peuvent pas être réimplementés et étendus</li>
<li>Les interfaces peuvent être réassignées, ce qui provoque un fusion. Elles peuvent être implémentées contrairement aux types.<br>
Nous vous renvoyons sur cette vidéo explicative : <a href="https://youtu.be/sFNQeh5Oc08">https://youtu.be/sFNQeh5Oc08</a></li>
</ul>
<h2>TypeScript c’est quoi exactement ?</h2>
<p>En prenant la documentation officielle, TypeScript est un langage de programmation construit par-dessus Javascript et offrant de nouvelles fonctionnalités pour combler les manques.</p>
<p>Créé par Anders Hejlsberg (concepteur du FW .net) pour Microsoft entre 2010 et 2012 (premiere version 0.8 en 2012), dans l'objectif de combler les manques de Javascript. JS est obligatoire pour le browser, seulement pour les gros projet, JS c’est pas simple. Le projet est open-source.</p>
<p>Ce type de technologie est souvent appelé "Superset", un exemple très connu est SASS pour le CSS.</p>
<p><strong>Un language adoré par les dev Java, C++.</strong></p>
<p>Nous allons écrire du code TypeScript qui sera ensuite transcompiler en Javascript.</p>
<p>Il a été créé en 2012 mais personnellement, j’ai entendu parler de typescript avec la sortie d’angular 2.</p>
<p>Avant l’utilisation de typescript, j’utilisais Flow (<a href="https://flow.org/">https://flow.org/</a>) projet FB. Et Babel, si je voulais utiliser des choses non présentes dans JS.
Exemple : les classes.</p>
<h3>Important !</h3>
<p><strong>Le code est toujours compilé en JS. Le browser ne sais pas executer du TS. Pareil pour le coté serveur. Deno, convertie en JS.</strong></p>
<h2>Pourquoi TypeScript ?</h2>
<p>1 - Disposer de type : JavaScript est un language au typage dynamique. Dans les langages à typage dynamique, l'interpréteur attribue aux variables un type lors de l'exécution en fonction de la valeur qu'elles possèdent à ce moment.
Autre exemple : Piège classique, les valeurs des champs de formulaire sont en texte. Pour provoquer des bugs pour les calcules avec des nombres par exemple. TypeScript te prévient en cas d’usage avec les types définis pour les éléments de formulaire.</p>
<pre><code>2 + "3"
"23"
2 + "lol"
"2lol"
</code></pre>
<p>2 - Comme les tests, c’est une façon de contrôler et de valider son code
3 - Autocompletion et vérification des valeurs : Quand un projet devient gros avec beaucoup de fonction et de fichier, il devient difficile de se souvenir des paramètres de fonction, les valeurs, etc.
En gros, avec TypeScript, c’est une sorte de pair programming. TypeScript vient régulièrement te taper sur l’épaule pour te dire : “Yep mon gars, là, ce que tu fais, ce n’est pas bon.”
4 - Travail avec les API. Cela permet de typer les réponses des API par exemple. On définit clairement la réponse et ensuite on peut être certain que notre code fonctionne correctement. <a href="https://medium.com/@wujido20/runtime-types-in-typescript-5f74fc9dc6c4">https://medium.com/@wujido20/runtime-types-in-typescript-5f74fc9dc6c4</a></p>
<h3>Principe de base</h3>
<p> • Initialisation
Création du fichier tsconfig.json qui indique comment compiler le code. Avec target, on indique la version de JS. Mini ES5. Max ESNext. <a href="https://www.typescriptlang.org/tsconfig#target">https://www.typescriptlang.org/tsconfig#target</a>
• Extension des fichiers en .ts ou .tsx
• Type/Interface définir les types des variables, paramètres, retour de fonction, etc.
• Les types c’est pour les définitions simples
• Les interfaces, c’est une sorte de shape d’objet. On pour aller plus loin et faire de l’héritage, etc..
• Inférence TypeScript est capable de définir lui-même le type. À partir du moment où une variable est définie, il peut voir automatiquement le type.
• Generic C’est une sorte de typage dynamique. On détermine à l’usage le type de la valeur. Ça offre plus de souplesse, car avec l’inférence, je ne suis pas obligé de typer. Il devine. Si le premier usage de la fonction envoie une string, alors le type est string.</p>
<p> Exemple simple :</p>
<pre><code>function identity&#x3C;T>(value: T): T {
 return value;
}

const result = identity&#x3C;number>(123);
</code></pre>
<p>Plus poussé :</p>
<pre><code>function pickObjectKeys&#x3C;T, K extends keyof T>(obj: T, keys: K[]) {
  let result = {} as Pick&#x3C;T, K>
  for (const key of keys) {
    if (key in obj) {
      result[key] = obj[key]
    }
  }
  return result
}

const language = {
  name: "TypeScript",
  age: 8,
  extensions: ['ts', 'tsx']
}

const ageAndExtensions = pickObjectKeys(language, ['age', 'extensions'])
</code></pre>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-use-generics-in-typescript">https://www.digitalocean.com/community/tutorials/how-to-use-generics-in-typescript</a></p>
<p> • Type Guard et Narrowing Permet comme avec du code JS, vérifier que la valeur est bien la bonne. Si tu utilises un union avec donc plusieurs types, il faut tester le type avant de l’utiliser.</p>
<pre><code>const isArticle = (article: any): article is Article =>
   typeof article === 'object' &#x26;&#x26; article !== null &#x26;&#x26;
   hasOwnProperty(article, 'title') &#x26;&#x26; typeof article.title === 'string' &#x26;&#x26;
   hasOwnProperty(article, 'views') in article &#x26;&#x26; typeof article.views === 'number';
</code></pre>
<pre><code>function padLeft(padding: number | string, input: string) {
  if (typeof padding === "number") {
    return " ".repeat(padding) + input;
  }
  return padding + input;
}
</code></pre>
<p> • Classes Usage très avancées des classes avec les éléments classiques : private, public, protected, readOnly, etc..
• Decorator (toujours experimental) utiliser une fonction dans une classe, sorte d’héritage.</p>
<h3>Tips</h3>
<p>On peut inclure TS dans un projet JS. Pas obligatoire de faire 100% TS. AllowJS dans la config. Et on peut même utiliser les types à travers JSDoc <a href="https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#type">https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#type</a></p>
<h2>Inclure les dépendances dans son projet</h2>
<p>De plus en plus de librairies sont écrites avec TS. Donc dans ce cas, les Definitions Types sont dans le package. Exemple: Vue 3 est 100% en TS. Donc les définitions sont générées à la compilation.
Sinon pour les full JS, il faut ajouter un package de type.
Exemple : Lodash est en JS mais un package @type existe
• <a href="https://www.npmjs.com/package/lodash">https://www.npmjs.com/package/lodash</a>
• <a href="https://www.npmjs.com/package/@types/lodash">https://www.npmjs.com/package/@types/lodash</a></p>
<p>Definitely Typed, l’organisation @types, un repo à la base communautaire et automatisé pour ajouter les types des packages <a href="https://github.com/DefinitelyTyped">https://github.com/DefinitelyTyped</a></p>
<p>En dernier recours, il faudra déclarer les type pour un package, si rien n’existe.
Repo pour vérifier les packages <a href="https://www.typescriptlang.org/dt/search">https://www.typescriptlang.org/dt/search</a></p>
<h2>Courbe d’apprentissage</h2>
<p>Un peu difficile dès que l’on rentre dans du code plus complexe. Notamment sur les types. Parfois on passe du temps à chercher pourquoi il n’accepte pas tel type.
C’est souvent un problème de définition de type un peu trop poussé.</p>
<h2>Liens</h2>
<ul>
<li><a href="https://www.typescriptlang.org/cheatsheets">https://www.typescriptlang.org/cheatsheets</a></li>
</ul>
<p>Bonne écoute !</p>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/typescript/</link><guid
        isPermaLink="false"
      >2c93ee325b9807e8e4c77ec0871af9e0</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Wed, 08 Jun 2022 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_038_ts.mp3"
        length="81278039"
        type="audio/mpeg"
      /><itunes:title
      >Doit-on utiliser TypeScript ?</itunes:title><itunes:subtitle
      >Doit-on utiliser TypeScript sur nos projets en 2022</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>38</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Un épisode sur les bases de TypeScript afin de vous convaincre d’utiliser TypeScript dans vos projets Retrouvez la vidéo de l&apos;enregistrement sur le Youtube de DoubleSlash Précision sur les types et interfaces
Durant l&apos;épisode, on évoque la différence entre les types et les interfaces. Je dois préciser que l&apos;on peut également faire des objets avec les types. Les principales différences : Les types ne peuvent pas être réimplementés et étendus Les interfaces peuvent être réassignées, ce qui provoque un fusion. Elles peuvent être implémentées contrairement aux types. Nous vous renvoyons sur cette vidéo explicative : https://youtu.be/sFNQeh5Oc08 TypeScript c’est quoi exactement ? En prenant la documentation officielle, TypeScript est un langage de programmation construit par-dessus Javascript et offrant de nouvelles fonctionnalités pour combler les manques. Créé par Anders Hejlsberg (concepteur du FW .net) pour Microsoft entre 2010 et 2012 (premiere version 0.8 en 2012), dans l&apos;objectif de combler les manques de Javascript. JS est obligatoire pour le browser, seulement pour les gros projet, JS c’est pas simple. Le projet est open-source. Ce type de technologie est souvent appelé &quot;Superset&quot;, un exemple très connu est SASS pour le CSS. Un language adoré par les dev Java, C++. Nous allons écrire du code TypeScript qui sera ensuite transcompiler en Javascript. Il a été créé en 2012 mais personnellement, j’ai entendu parler de typescript avec la sortie d’angular 2. Avant l’utilisation de typescript, j’utilisais Flow (https://flow.org/) projet FB. Et Babel, si je voulais utiliser des choses non présentes dans JS.
Exemple : les classes. Important ! Le code est toujours compilé en JS. Le browser ne sais pas executer du TS. Pareil pour le coté serveur. Deno, convertie en JS. Pourquoi TypeScript ? 1 - Disposer de type : JavaScript est un language au typage dynamique. Dans les langages à typage dynamique, l&apos;interpréteur attribue aux variables un type lors de l&apos;exécution en fonction de la valeur qu&apos;elles possèdent à ce moment.
Autre exemple : Piège classique, les valeurs des champs de formulaire sont en texte. Pour provoquer des bugs pour les calcules avec des nombres par exemple. TypeScript te prévient en cas d’usage avec les types définis pour les éléments de formulaire. 2 - Comme les tests, c’est une façon de contrôler et de valider son code
3 - Autocompletion et vérification des valeurs : Quand un projet devient gros avec beaucoup de fonction et de fichier, il devient difficile de se souvenir des paramètres de fonction, les valeurs, etc.
En gros, avec TypeScript, c’est une sorte de pair programming. TypeScript vient régulièrement te taper sur l’épaule pour te dire : “Yep mon gars, là, ce que tu fais, ce n’est pas bon.”
4 - Travail avec les API. Cela permet de typer les réponses des API par exemple. On définit clairement la réponse et ensuite on peut être certain que notre code fonctionne correctement. https://medium.com/@wujido20/runtime-types-in-typescript-5f74fc9dc6c4 Principe de base  • Initialisation
Création du fichier tsconfig.json qui indique comment compiler le code. Avec target, on indique la version de JS. Mini ES5. Max ESNext. https://www.typescriptlang.org/tsconfig#target
 • Extension des fichiers en .ts ou .tsx
 • Type/Interface définir les types des variables, paramètres, retour de fonction, etc.
 • Les types c’est pour les définitions simples
 • Les interfaces, c’est une sorte de shape d’objet. On pour aller plus loin et faire de l’héritage, etc..
 • Inférence TypeScript est capable de définir lui-même le type. À partir du moment où une variable est définie, il peut voir automatiquement le type.
 • Generic C’est une sorte de typage dynamique. On détermine à l’usage le type de la valeur. Ça offre plus de souplesse, car avec l’inférence, je ne suis pas obligé de typer. Il devine. Si le premier usage de la fonction envoie une string, alors le type est string.  Exemple simple : Plus poussé : https://www.digitalocean.com…</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Un épisode sur les bases de TypeScript afin de vous convaincre d’utiliser TypeScript dans vos projets Retrouvez la vidéo de l&apos;enregistrement sur le Youtube de DoubleSlash Précision sur les types et interfaces
Durant l&apos;épisode, on évoque la différence entre les types et les interfaces. Je dois préciser que l&apos;on peut également faire des objets avec les types. Les principales différences : Les types ne peuvent pas être réimplementés et étendus Les interfaces peuvent être réassignées, ce qui provoque un fusion. Elles peuvent être implémentées contrairement aux types. Nous vous renvoyons sur cette vidéo explicative : https://youtu.be/sFNQeh5Oc08 TypeScript c’est quoi exactement ? En prenant la documentation officielle, TypeScript est un langage de programmation construit par-dessus Javascript et offrant de nouvelles fonctionnalités pour combler les manques. Créé par Anders Hejlsberg (concepteur du FW .net) pour Microsoft entre 2010 et 2012 (premiere version 0.8 en 2012), dans l&apos;objectif de combler les manques de Javascript. JS est obligatoire pour le browser, seulement pour les gros projet, JS c’est pas simple. Le projet est open-source. Ce type de technologie est souvent appelé &quot;Superset&quot;, un exemple très connu est SASS pour le CSS. Un language adoré par les dev Java, C++. Nous allons écrire du code TypeScript qui sera ensuite transcompiler en Javascript. Il a été créé en 2012 mais personnellement, j’ai entendu parler de typescript avec la sortie d’angular 2. Avant l’utilisation de typescript, j’utilisais Flow (https://flow.org/) projet FB. Et Babel, si je voulais utiliser des choses non présentes dans JS.
Exemple : les classes. Important ! Le code est toujours compilé en JS. Le browser ne sais pas executer du TS. Pareil pour le coté serveur. Deno, convertie en JS. Pourquoi TypeScript ? 1 - Disposer de type : JavaScript est un language au typage dynamique. Dans les langages à typage dynamique, l&apos;interpréteur attribue aux variables un type lors de l&apos;exécution en fonction de la valeur qu&apos;elles possèdent à ce moment.
Autre exemple : Piège classique, les valeurs des champs de formulaire sont en texte. Pour provoquer des bugs pour les calcules avec des nombres par exemple. TypeScript te prévient en cas d’usage avec les types définis pour les éléments de formulaire. 2 - Comme les tests, c’est une façon de contrôler et de valider son code
3 - Autocompletion et vérification des valeurs : Quand un projet devient gros avec beaucoup de fonction et de fichier, il devient difficile de se souvenir des paramètres de fonction, les valeurs, etc.
En gros, avec TypeScript, c’est une sorte de pair programming. TypeScript vient régulièrement te taper sur l’épaule pour te dire : “Yep mon gars, là, ce que tu fais, ce n’est pas bon.”
4 - Travail avec les API. Cela permet de typer les réponses des API par exemple. On définit clairement la réponse et ensuite on peut être certain que notre code fonctionne correctement. https://medium.com/@wujido20/runtime-types-in-typescript-5f74fc9dc6c4 Principe de base  • Initialisation
Création du fichier tsconfig.json qui indique comment compiler le code. Avec target, on indique la version de JS. Mini ES5. Max ESNext. https://www.typescriptlang.org/tsconfig#target
 • Extension des fichiers en .ts ou .tsx
 • Type/Interface définir les types des variables, paramètres, retour de fonction, etc.
 • Les types c’est pour les définitions simples
 • Les interfaces, c’est une sorte de shape d’objet. On pour aller plus loin et faire de l’héritage, etc..
 • Inférence TypeScript est capable de définir lui-même le type. À partir du moment où une variable est définie, il peut voir automatiquement le type.
 • Generic C’est une sorte de typage dynamique. On détermine à l’usage le type de la valeur. Ça offre plus de souplesse, car avec l’inférence, je ne suis pas obligé de typer. Il devine. Si le premier usage de la fonction envoie une string, alors le type est string.  Exemple simple : Plus poussé : https://www.digitalocean.com…</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >3385</itunes:duration></item><item><title
      ><![CDATA[Spécial news - Juin 2022]]></title><description
      ><![CDATA[<h2>Un passage en revue des news et releases de nos outils et technologies de développement web des dernières semaines</h2>
<h3>Retrouvez la vidéo de l'enregistrement sur <a href="https://youtu.be/eTBTWDVQ8EQ">le Youtube de DoubleSlash</a></h3>
<h4>Les news évoquées durant l'épisode :</h4>
<ul>
<li>01:00 <a href="https://blog.angular.io/angular-v14-is-now-available-391a6db736af">Angular 14</a></li>
<li>03:47 <a href="https://betterprogramming.pub/atom-text-editor-is-dying-long-live-ides-3d1d35ff4e7e">Atom, va mourir le 15 décembre 2022 !</a></li>
<li>06:02 <a href="https://tauri.studio/">Tauri en version 1.0</a></li>
<li>08:34 <a href="https://www.cypress.io/blog/2022/06/01/cypress-10-release/">Cypress en version 10</a></li>
<li>13:00 <a href="https://histoire.dev/guide/index.html">Histoire</a></li>
<li>16:38 <a href="https://blog.vuejs.org/posts/vue-2-7-beta.html">Vue version 2.7</a></li>
<li>21:10 <a href="https://github.com/fastify/fastify-dx/blob/main/packages/fastify-dx-react/README.md">Fastify DX React</a></li>
<li>28:50 <a href="https://fresh.deno.dev/">Fresh</a></li>
<li>35:21 <a href="https://tom.preston-werner.com/2022/05/23/major-version-numbers-are-not-sacred.html">Redwood en version 2.0</a></li>
<li>38:35 <a href="https://fr.wordpress.org/2022/05/04/guide-des-changements-techniques-de-wordpress-6-0/">Wordpress 6</a></li>
<li>45:53 🎉🎉 IE11 n'est plus ! 🎉🎉</li>
</ul>
<p>Bonne écoute !</p>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/news-juin-2022/</link><guid
        isPermaLink="false"
      >0f919ee6ee5c883b1253f2c584915dc9</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Wed, 22 Jun 2022 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_039_news06_22.mp3"
        length="71247983"
        type="audio/mpeg"
      /><itunes:title>Spécial news - Juin 2022</itunes:title><itunes:subtitle
      >Un passage en revue des news et releases de nos outils et technologies de développement web des dernières semaines</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>39</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Un passage en revue des news et releases de nos outils et technologies de développement web des dernières semaines Retrouvez la vidéo de l&apos;enregistrement sur le Youtube de DoubleSlash Les news évoquées durant l&apos;épisode : 01:00 Angular 14 03:47 Atom, va mourir le 15 décembre 2022 ! 06:02 Tauri en version 1.0 08:34 Cypress en version 10 13:00 Histoire 16:38 Vue version 2.7 21:10 Fastify DX React 28:50 Fresh 35:21 Redwood en version 2.0 38:35 Wordpress 6 45:53 🎉🎉 IE11 n&apos;est plus ! 🎉🎉 Bonne écoute ! Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Un passage en revue des news et releases de nos outils et technologies de développement web des dernières semaines Retrouvez la vidéo de l&apos;enregistrement sur le Youtube de DoubleSlash Les news évoquées durant l&apos;épisode : 01:00 Angular 14 03:47 Atom, va mourir le 15 décembre 2022 ! 06:02 Tauri en version 1.0 08:34 Cypress en version 10 13:00 Histoire 16:38 Vue version 2.7 21:10 Fastify DX React 28:50 Fresh 35:21 Redwood en version 2.0 38:35 Wordpress 6 45:53 🎉🎉 IE11 n&apos;est plus ! 🎉🎉 Bonne écoute ! Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >2962</itunes:duration></item><item><title
      ><![CDATA[Les Web Platforms en 2022]]></title><description
      ><![CDATA[<h2>Un passage en revue des implémentations futures et actuelles dans les navigateurs après la Google IO et la WWDC Apple.</h2>
<h3>Retrouvez la vidéo de l'enregistrement sur <a href="https://youtu.be/41oHH_opXKg">le Youtube de DoubleSlash</a></h3>
<p><strong>Les slides utilisés pour l'épisode <a href="https://slides.com/goodmotion/state-of-web-platform">https://slides.com/goodmotion/state-of-web-platform</a></strong></p>
<p>Pour la toute première fois, tous les principaux fournisseurs de navigateurs se sont réunis pour résoudre les principaux problèmes de compatibilité des navigateurs identifiés par les développeurs Web.
Et cela se ressent déjà dans les évolutions de nos navigateurs. Les implémentations sont plus rapides et nous pouvons profiter plus rapidement des nouvelles fonctionnalités.</p>
<p>En tant que développeurs web, nous devons nous tenir à jour sur les nouvelles fonctionnalités présentes dans les navigateurs afin de faire évoluer notre façon de coder et supprimer les hacks utilisés auparavant.</p>
<p>Dans cet épisode, nous passons en revue les importantes implémentations qui vont vraiment changer notre quotidien de développeur web.</p>
<p>Suite à la Google IO 2022, la conférence annuelle Google pour les développeurs, différentes vidéos ont été publiées pour présenter les nouveautés.
Également, suite à la WWDC 2022, la conférence annuelle Apple pour les développeurs, différentes vidéos ont été publiées pour présenter les évolutions de Safari et de WebKit.</p>
<p>Nous avons visionné ces vidéos pour vous faire un résumé des principales fonctionnalités implémentées ou qui vont être implémentées dans les navigateurs.</p>
<h3>Les liens des articles</h3>
<ul>
<li><a href="https://web.dev/interop-2022/">Interop 2022: browsers working together to improve the web for developers</a></li>
<li><a href="https://web.dev/state-of-css-2022/">State of CSS 2022</a></li>
</ul>
<h3>Les liens des vidéos</h3>
<ul>
<li><a href="https://youtu.be/5b4YcLB4DVI">What's new for the web platform</a></li>
<li><a href="https://youtu.be/JCJUPJ_zDQ4">Bringing page transitions to the web</a></li>
<li><a href="https://youtu.be/Xy9ZXRRgpLk">State of CSS</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2022/10048/">What's new in Safari and WebKit</a></li>
</ul>
<p>Bonne écoute !</p>
<h3>Podcast présenté par :</h3>
<ul>
<li>Alexandre Duval <a href="https://twitter.com/xlanex6">@xlanex6</a></li>
<li>Patrick Faramaz <a href="https://twitter.com/PatrickFaramaz">@PatrickFaramaz</a></li>
</ul>]]></description><link
      >https://slash-podcast.fr/podcasts/web-platform-2022/</link><guid
        isPermaLink="false"
      >ab1b72df509cb2a1ec871478816c4223</guid><category
      ><![CDATA[Technology]]></category><dc:creator
      ><![CDATA[Double Slash]]></dc:creator><pubDate
      >Wed, 29 Jun 2022 00:00:00 GMT</pubDate><enclosure
        url="https://chtbl.com/track/79E812/double-slash.ams3.cdn.digitaloceanspaces.com/DS_040_webapi22.mp3"
        length="66602951"
        type="audio/mpeg"
      /><itunes:title>Les Web Platforms en 2022</itunes:title><itunes:subtitle
      >Un passage en revue des implémentations futures et actuelles dans les navigateurs après la Google IO et la WWDC Apple.</itunes:subtitle><itunes:season
      >1</itunes:season><itunes:episode>40</itunes:episode><itunes:episodeType
      >full</itunes:episodeType><itunes:explicit
      >false</itunes:explicit><itunes:summary
      >Un passage en revue des implémentations futures et actuelles dans les navigateurs après la Google IO et la WWDC Apple. Retrouvez la vidéo de l&apos;enregistrement sur le Youtube de DoubleSlash Les slides utilisés pour l&apos;épisode https://slides.com/goodmotion/state-of-web-platform Pour la toute première fois, tous les principaux fournisseurs de navigateurs se sont réunis pour résoudre les principaux problèmes de compatibilité des navigateurs identifiés par les développeurs Web.
Et cela se ressent déjà dans les évolutions de nos navigateurs. Les implémentations sont plus rapides et nous pouvons profiter plus rapidement des nouvelles fonctionnalités. En tant que développeurs web, nous devons nous tenir à jour sur les nouvelles fonctionnalités présentes dans les navigateurs afin de faire évoluer notre façon de coder et supprimer les hacks utilisés auparavant. Dans cet épisode, nous passons en revue les importantes implémentations qui vont vraiment changer notre quotidien de développeur web. Suite à la Google IO 2022, la conférence annuelle Google pour les développeurs, différentes vidéos ont été publiées pour présenter les nouveautés.
Également, suite à la WWDC 2022, la conférence annuelle Apple pour les développeurs, différentes vidéos ont été publiées pour présenter les évolutions de Safari et de WebKit. Nous avons visionné ces vidéos pour vous faire un résumé des principales fonctionnalités implémentées ou qui vont être implémentées dans les navigateurs. Les liens des articles Interop 2022: browsers working together to improve the web for developers State of CSS 2022 Les liens des vidéos What&apos;s new for the web platform Bringing page transitions to the web State of CSS What&apos;s new in Safari and WebKit Bonne écoute ! Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</itunes:summary><itunes:author
      >Double Slash</itunes:author><itunes:image
        href="https://slash-podcast.fr/new-double-slash.jpg"
      /><googleplay:description
      >Un passage en revue des implémentations futures et actuelles dans les navigateurs après la Google IO et la WWDC Apple. Retrouvez la vidéo de l&apos;enregistrement sur le Youtube de DoubleSlash Les slides utilisés pour l&apos;épisode https://slides.com/goodmotion/state-of-web-platform Pour la toute première fois, tous les principaux fournisseurs de navigateurs se sont réunis pour résoudre les principaux problèmes de compatibilité des navigateurs identifiés par les développeurs Web.
Et cela se ressent déjà dans les évolutions de nos navigateurs. Les implémentations sont plus rapides et nous pouvons profiter plus rapidement des nouvelles fonctionnalités. En tant que développeurs web, nous devons nous tenir à jour sur les nouvelles fonctionnalités présentes dans les navigateurs afin de faire évoluer notre façon de coder et supprimer les hacks utilisés auparavant. Dans cet épisode, nous passons en revue les importantes implémentations qui vont vraiment changer notre quotidien de développeur web. Suite à la Google IO 2022, la conférence annuelle Google pour les développeurs, différentes vidéos ont été publiées pour présenter les nouveautés.
Également, suite à la WWDC 2022, la conférence annuelle Apple pour les développeurs, différentes vidéos ont été publiées pour présenter les évolutions de Safari et de WebKit. Nous avons visionné ces vidéos pour vous faire un résumé des principales fonctionnalités implémentées ou qui vont être implémentées dans les navigateurs. Les liens des articles Interop 2022: browsers working together to improve the web for developers State of CSS 2022 Les liens des vidéos What&apos;s new for the web platform Bringing page transitions to the web State of CSS What&apos;s new in Safari and WebKit Bonne écoute ! Podcast présenté par : Alexandre Duval @xlanex6 Patrick Faramaz @PatrickFaramaz</googleplay:description><googleplay:explicit
      >false</googleplay:explicit><itunes:duration
      >2773</itunes:duration></item></channel></rss>
